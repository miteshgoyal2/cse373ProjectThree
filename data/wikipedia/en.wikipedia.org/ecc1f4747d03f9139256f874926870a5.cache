https://en.wikipedia.org/wiki/Structured_programming
Structured programming - Wikipedia
Structured programming is a programming paradigm aimed at improving the clarity, quality, and development time of a computer program by making extensive use of subroutines, block structures, for and while...
structured programming from wikipedia the free encyclopedia jump to navigation search this article includes a list of references but its sources remain unclear because it has insufficient inline citations please help to improve this article by introducing more precise citations march 2015 learn how and when to remove this template message programming paradigms action agentoriented arrayoriented automatabased concept concurrent computing relativistic programming datadriven declarative contrast imperative constraint constraint logic concurrent constraint logic dataflow flowbased celloriented spreadsheets reactive functional functional logic purely functional logic abductive logic answer set concurrent logic functional logic inductive logic dynamic enduser programming eventdriven serviceoriented timedriven expressionoriented featureoriented functionlevel contrast valuelevel generic imperative contrast declarative literate procedural languageoriented natural language programming disciplinespecific domainspecific grammaroriented dialecting intentional metaprogramming automatic inductive programming reflective attributeoriented homoiconic macro template policybased nonstructured contrast structured array nondeterministic parallel computing processoriented pointfree style concatenative probabilistic semantic structured contrast nonstructured blockstructured modular contrast monolithic objectoriented actorbased classbased concurrent prototypebased by separation of concerns aspectoriented roleoriented subjectoriented recursive valuelevel contrast functionlevel v t e structured programming is a programming paradigm aimed at improving the clarity quality and development time of a computer program by making extensive use of subroutines block structures for and while loops—in contrast to using simple tests and jumps such as the go to statement which could lead to spaghetti code that is difficult to follow and maintain it emerged in the late 1950s with the appearance of the algol 58 and algol 60 programming languages1 with the latter including support for block structures contributing factors to its popularity and widespread acceptance at first in academia and later among practitioners include the discovery of what is now known as the structured program theorem in 19662 and the publication of the influential go to statement considered harmful open letter in 1968 by dutch computer scientist edsger w dijkstra who coined the term structured programming3 structured programming is most frequently used with deviations that allow for clearer programs in some particular cases such as when exception handling has to be performed contents 1 elements 11 control structures 12 subroutines 13 blocks 2 structured programming languages 3 history 31 theoretical foundation 32 debate 33 outcome 4 common deviations 41 early exit 42 exception handling 43 multiple entry 44 state machines 5 see also 6 notes 7 references 8 external links elementsedit control structuresedit following the structured program theorem all programs are seen as composed of control structures sequence ordered statements or subroutines executed in sequence selection one or a number of statements is executed depending on the state of the program this is usually expressed with keywords such as ifthenelseendif iteration a statement or block is executed until the program reaches a certain state or operations have been applied to every element of a collection this is usually expressed with keywords such as while repeat for or dountil often it is recommended that each loop should only have one entry point and in the original structural programming also only one exit point and a few languages enforce this recursion a statement is executed by repeatedly calling itself until termination conditions are met while similar in practice to iterative loops recursive loops may be more computationally efficient and are implemented differently as a cascading stack graphical representations of the three basic patterns using ns diagrams blue and flow charts green subroutinesedit subroutines callable units such as procedures functions methods or subprograms are used to allow a sequence to be referred to by a single statement blocksedit blocks are used to enable groups of statements to be treated as if they were one statement blockstructured languages have a syntax for enclosing structures in some formal way such as an ifstatement bracketed by iffi as in algol 68 or a code section bracketed by beginend as in pli whitespace indentation as in python or the curly braces of c and many later languages structured programming languagesedit it is possible to do structured programming in any programming language though it is preferable to use something like a procedural programming language some of the languages initially used for structured programming include algol pascal pli and ada but most new procedural programming languages since that time have included features to encourage structured programming and sometimes deliberately left out features – notably goto – in an effort to make unstructured programming more difficult structured programming sometimes known as modular programming enforces a logical structure on the program being written to make it more efficient and easier to understand and modify historyedit theoretical foundationedit the structured program theorem provides the theoretical basis of structured programming it states that three ways of combining programs—sequencing selection and iteration—are sufficient to express any computable function this observation did not originate with the structured programming movement these structures are sufficient to describe the instruction cycle of a central processing unit as well as the operation of a turing machine therefore a processor is always executing a structured program in this sense even if the instructions it reads from memory are not part of a structured program however authors usually credit the result to a 1966 paper by böhm and jacopini possibly because dijkstra cited this paper himself4 the structured program theorem does not address how to write and analyze a usefully structured program these issues were addressed during the late 1960s and early 1970s with major contributions by dijkstra robert w floyd tony hoare olejohan dahl and david gries debateedit p j plauger an early adopter of structured programming described his reaction to the structured program theorem us converts waved this interesting bit of news under the noses of the unreconstructed assemblylanguage programmers who kept trotting forth twisty bits of logic and saying i betcha cant structure this neither the proof by böhm and jacopini nor our repeated successes at writing structured code brought them around one day sooner than they were ready to convince themselves5 donald knuth accepted the principle that programs must be written with provability in mind but he disagreed and still disagreescitation needed with abolishing the goto statement in his 1974 paper structured programming with goto statements6 he gave examples where he believed that a direct jump leads to clearer and more efficient code without sacrificing provability knuth proposed a looser structural constraint it should be possible to draw a programs flow chart with all forward branches on the left all backward branches on the right and no branches crossing each other many of those knowledgeable in compilers and graph theory have advocated allowing only reducible flow graphswhen defined aswho structured programming theorists gained a major ally in the 1970s after ibm researcher harlan mills applied his interpretation of structured programming theory to the development of an indexing system for the new york times research file the project was a great engineering success and managers at other companies cited it in support of adopting structured programming although dijkstra criticized the ways that millss interpretation differed from the published workcitation needed as late as 1987 it was still possible to raise the question of structured programming in a computer science journal frank rubin did so in that year with an open letter titled goto considered harmful considered harmful7 numerous objections followed including a response from dijkstra that sharply criticized both rubin and the concessions other writers made when responding to him outcomeedit by the end of the 20th century nearly all computer scientists were convinced that it is useful to learn and apply the concepts of structured programming highlevel programming languages that originally lacked programming structures such as fortran cobol and basic now have them common deviationsedit while goto has now largely been replaced by the structured constructs of selection ifthenelse and repetition while and for few languages are purely structured the most common deviation found in many languages is the use of a return statement for early exit from a subroutine this results in multiple exit points instead of the single exit point required by structured programming there are other constructions to handle cases that are awkward in purely structured programming early exitedit the most common deviation from structured programming is early exit from a function or loop at the level of functions this is a return statement at the level of loops this is a break statement terminate the loop or continue statement terminate the current iteration proceed with next iteration in structured programming these can be replicated by adding additional branches or tests but for returns from nested code this can add significant complexity c is an early and prominent example of these constructs some newer languages also have labeled breaks which allow breaking out of more than just the innermost loop exceptions also allow early exit but have further consequences and thus are treated below multiple exits can arise for a variety of reasons most often either that the subroutine has no more work to do if returning a value it has completed the calculation or has encountered exceptional circumstances that prevent it from continuing hence needing exception handling the most common problem in early exit is that cleanup or final statements are not executed – for example allocated memory is not deallocated or open files are not closed causing memory leaks or resource leaks these must be done at each return site which is brittle and can easily result in bugs for instance in later development a return statement could be overlooked by a developer and an action which should be performed at the end of a subroutine eg a trace statement might not be performed in all cases languages without a return statement such as standard pascal dont have this problem most modern languages provide languagelevel support to prevent such leaks8 see detailed discussion at resource management most commonly this is done via unwind protection which ensures that certain code is guaranteed to be run when execution exits a block this is a structured alternative to having a cleanup block and a goto this is most often known as tryfinally and considered a part of exception handling various techniques exist to encapsulate resource management an alternative approach found primarily in c is resource acquisition is initialization which uses normal stack unwinding variable deallocation at function exit to call destructors on local variables to deallocate resources kent beck martin fowler and coauthors have argued in their refactoring books that nested conditionals may be harder to understand than a certain type of flatter structure using multiple exits predicated by guard clauses their 2009 book flatly states that one exit point is really not a useful rule clarity is the key principle if the method is clearer with one exit point use one exit point otherwise don’t they offer a cookbook solution for transforming a function consisting only of nested conditionals into a sequence of guarded return or throw statements followed by a single unguarded block which is intended to contain the code for the common case while the guarded statements are supposed to deal with the less common ones or with errors9 herb sutter and andrei alexandrescu also argue in their 2004 c tips book that the singleexit point is an obsolete requirement10 in his 2004 textbook david watt writes that singleentry multiexit control flows are often desirable using tennents framework notion of sequencer watt uniformly describes the control flow constructs found in contemporary programming languages and attempts to explain why certain types of sequencers are preferable to others in the context of multiexit control flows watt writes that unrestricted gotos jump sequencers are bad because the destination of the jump is not selfexplanatory to the reader of a program until the reader finds and examines the actual label or address that is the target of the jump in contrast watt argues that the conceptual intent of a return sequencer is clear from its own context without having to examine its destination watt writes that a class of sequencers known as escape sequencers defined as a sequencer that terminates execution of a textually enclosing command or procedure encompasses both breaks from loops including multilevel breaks and return statements watt also notes that while jump sequencers gotos have been somewhat restricted in languages like c where the target must be an inside the local block or an encompassing outer block that restriction alone is not sufficient to make the intent of gotos in c selfdescribing and so they can still produce spaghetti code watt also examines how exception sequencers differ from escape and jump sequencers this is explained in the next section of this article11 in contrast to the above bertrand meyer wrote in his 2009 textbook that instructions like break and continue are just the old goto in sheeps clothing and strongly advised against their use12 exception handlingedit based on the coding error from the ariane 501 disaster software developer jim bonang argues that any exceptions thrown from a function violate the singleexit paradigm and proposes that all interprocedural exceptions should be forbidden in c syntax this is done by declaring all function signatures as noexcept since c11 or throw13 bonang proposes that all singleexit conforming c should be written along the lines of bool mycheck1 throw bool success false try do something that may throw exceptions ifmycheck2 false throw someinternalexception other code similar to the above success true catch all exceptions caught and logged return success peter ritchie also notes that in principle even a single throw right before the return in a function constitutes a violation of the singleexit principle but argues that dijkstras rules were written in a time before exception handling became a paradigm in programming languages so he proposes to allow any number of throw points in addition to a single return point he notes that solutions which wrap exceptions for the sake of creating a singleexit have higher nesting depth and thus are more difficult to comprehend and even accuses those who propose to apply such solutions to programming languages which support exceptions of engaging in cargo cult thinking14 david watt also analyzes exception handling in the framework of sequencers introduced in this article in the previous section on early exits watt notes that an abnormal situation generally exemplified with arithmetic overflows or inputoutput failures like file not found is a kind of error that is detected in some lowlevel program unit but for which a handler is more naturally located in a highlevel program unit for example a program might contain several calls to read files but the action to perform when a file is not found depends on the meaning purpose of the file in question to the program and thus a handling routine for this abnormal situation cannot be located in lowlevel system code watts further notes that introducing status flags testing in the caller as singleexit structured programming or even multiexit return sequencers would entail results in a situation where the application code tends to get cluttered by tests of status flags and that the programmer might forgetfully or lazily omit to test a status flag in fact abnormal situations represented by status flags are by default ignored he notes that in contrast to status flags testing exceptions have the opposite default behavior causing the program to terminate unless the programmer explicitly deals with the exception in some way possibly by adding code to willfully ignore it based on these arguments watt concludes that jump sequencers or escape sequencers discussed in the previous section arent as suitable as a dedicated exception sequencer with the semantics discussed above15 the textbook by louden and lambert emphasizes that exception handling differs from structured programming constructs like while loops because the transfer of control is set up at a different point in the program than that where the actual transfer takes place at the point where the transfer actually occurs there may be no syntactic indication that control will in fact be transferred16 computer science professor arvind kumar bansal also notes that in languages which implement exception handling even control structures like for which have the singleexit property in absence of exceptions no longer have it in presence of exceptions because an exception can prematurely cause an early exit in any part of the control structure for instance if init throws an exception in for init check increm then the usual exit point after check is not reached17 citing multiple prior studies by others 19992004 and their own results westley weimer and george necula wrote that a significant problem with exceptions is that they create hidden controlflow paths that are difficult for programmers to reason about18827 the necessity to limit code to singleexit points appears in some contemporary programming environments focused on parallel computing such as openmp the various parallel constructs from openmp like parallel do do not allow early exits from inside to the outside of the parallel construct this restriction includes all manner of exits from break to c exceptions but all of these are permitted inside the parallel construct if the jump target is also inside it19 multiple entryedit further information coroutine more rarely subprograms allow multiple entry this is most commonly only reentry into a coroutine or generatorsemicoroutine where a subprogram yields control and possibly a value but can then be resumed where it left off there are a number of common uses of such programming notably for streams particularly inputoutput state machines and concurrency from a code execution point of view yielding from a coroutine is closer to structured programming than returning from a subroutine as the subprogram has not actually terminated and will continue when called again – it is not an early exit however coroutines mean that multiple subprograms have execution state – rather than a single call stack of subroutines – and thus introduce a different form of complexity it is very rare for subprograms to allow entry to an arbitrary position in the subprogram as in this case the program state such as variable values is uninitialized or ambiguous and this is very similar to a goto state machinesedit some programs particularly parsers and communications protocols have a number of states that follow each other in a way that is not easily reduced to the basic structures and some programmers implement the statechanges with a jump to the new state this type of stateswitching is often used in the linux kernelcitation needed however it is possible to structure these systems by making each statechange a separate subprogram and using a variable to indicate the active state see trampoline alternatively these can be implemented via coroutines which dispense with the trampoline see alsoedit drakon minimal evaluation nassi–shneiderman diagram structure chart switch statement notesedit clark leslie b wilson robert g robert clark 2000 comparative programming languages 3rd ed harlow england addisonwesley p 20 isbn 9780201710120 retrieved 25 november 2015  bohm corrado giuseppe jacopini may 1966 flow diagrams turing machines and languages with only two formation rules pdf communications of the acm 9 5 366–371 doi101145355592365646  dijkstra 1968 the unbridled use of the go to statement has as an immediate consequence that it becomes terribly hard to find a meaningful set of coordinates in which to describe the process progress the go to statement as it stands is just too primitive it is too much an invitation to make a mess of ones program dijkstra e w march 1968 letters to the editor go to statement considered harmful communications of the acm 11 3 147–148 issn 00010782 doi101145362929362947  plauger p j february 12 1993 programming on purpose essays on software design 1 ed prenticehall p 25 isbn 9780137213740  donald knuth structured programming with go to statements frank rubin march 1987 goto considered harmful considered harmful pdf communications of the acm 30 3 195–196 doi101145214748315722 archived from the original pdf on 20090320  elder jackson liblit 2008 jay fields shane harvie martin fowler kent beck 2009 refactoring ruby edition pearson education pp 274–279 isbn 9780321603500  herb sutter andrei alexandrescu 2004 c coding standards 101 rules guidelines and best practices pearson education isbn 9780132654425 example 4 single entry single exit sese historically some coding standards have required that each function have exactly one exit meaning one return statement such a requirement is obsolete in languages that support exceptions and destructors where functions typically have numerous implicit exits  david anthony watt william findlay 2004 programming language design concepts john wiley sons pp 215–221 isbn 9780470853207  bertrand meyer 2009 touch of class learning to program well with objects and contracts springer science business media p 189 isbn 9783540921448  httppragprogcommagazines201204thepragmaticdefense httpmsmvpscomblogspeterritchiearchive20080307singleentrysingleexitshoulditstillbeapplicableinobjectorientedlanguagesaspx david anthony watt william findlay 2004 programming language design concepts john wiley sons pp 221–222 isbn 9780470853207  kenneth c louden kenneth a lambert 2011 programming languages principles and practices 3 ed cengage learning p 423 isbn 1111529418  arvind kumar bansal 2013 introduction to programming languages crc press p 135 isbn 9781466565142  weimer w necula gc 2008 exceptional situations and program reliability pdf acm transactions on programming languages and systems vol 30 2  rohit chandra 2001 parallel programming in openmp morgan kaufmann p 45 isbn 9781558606715  referencesedit edsger dijkstra notes on structured programming pg 6 böhm c jacopini g may 1966 flow diagrams turing machines and languages with only two formation rules pdf communications of the acm 9 5 366–371 doi101145355592365646  dijkstra edsger w march 1968 letters to the editor go to statement considered harmful pdf communications of the acm 11 3 147–148 doi101145362929362947  michael a jackson principles of program design academic press london 1975 oj dahl e w dijkstra c a r hoare structured programming academic press london 1972 isbn 0122005503 this volume includes an expanded version of the notes on structured programming above including an extended example of using the structured approach to develop a backtracking algorithm to solve the 8 queens problem a pdf version is in the acm classic books series note that the third chapter of this book by dahl describes an approach which is easily recognized as object oriented programming it can be seen as another way to usefully structure a program to aid in showing that it is correct elder matt jackson steve liblit ben october 2008 code sandwiches pdf technical report university of wisconsin–madison 1647 abstract  external linksedit the wikibook computer programming has a page on the topic of control bpstruct a tool to structure concurrent systems programs process models j darlinton m ghanem h w to 1993 structured parallel programming in programming models for massively parallel computers ieee computer society press 1993  v t e edsger dijkstra publications structured programming book a discipline of programming book a method of programming book predicate calculus and program semantics book selected writings on computing a personal perspective book selected papers ewds ewd manuscripts 1 go to statement considered harmful on the cruelty of really teaching computer science main research areas theoretical computing science software engineering systems science algorithm design concurrent computing distributed computing formal methods programming methodology programming language research program design and development software architecture scientific contributions concepts and methods algol 60 implementation call stack concurrency concurrent programming cooperating sequential processes critical section deadly embrace deadlock dining philosophers problem dutch national flag problem faulttolerant system gotoless programming guarded commands guarded command language layered structure in software architecture levels of abstraction multithreaded programming mutual exclusion mutex philosophy of computer programming and computing science producer–consumer problem bounded buffer problem program families predicate transformer semantics process synchronization selfstabilizing distributed system semaphore programming separation of concerns sleeping barber problem software crisis structured analysis structured programming the multiprogramming system unbounded nondeterminism weakest precondition calculus algorithms bankers algorithm dijkstras algorithm djp algorithm prims algorithm dijkstrascholten algorithm dekkers algorithm generalization smoothsort shuntingyard algorithm tricolor marking algorithm concurrent algorithm distributed algorithm deadlock prevention algorithm selfstabilizing algorithm related people shlomi dolev per brinch hansen tony hoare olejohan dahl leslie lamport david parnas adriaan van wijngaarden niklaus wirth other topics dijkstra prize edsger w dijkstra prize in distributed computing centrum wiskunde informatica ew dijkstra archive university of texas at austin list of pioneers in computer science list of important publications in computer science list of important publications in theoretical computer science list of important publications in concurrent parallel and distributed computing 1 dijkstras numbered manuscripts on computing science wikiquote authority control lccn sh85129214 gnd 40581330 bnf cb11966709k data bne xx531013 retrieved from httpsenwikipediaorgwindexphptitlestructuredprogrammingoldid807183574 categories programming paradigms holism edsger w dijkstra dutch inventions hidden categories articles lacking intext citations from march 2015 all articles lacking intext citations all articles with unsourced statements articles with unsourced statements from january 2008 wikipedia articles needing clarification from april 2012 all articles with specifically marked weaselworded phrases articles with specifically marked weaselworded phrases from may 2011 articles with unsourced statements from july 2014 articles with unsourced statements from april 2017 wikipedia articles with lccn identifiers wikipedia articles with gnd identifiers wikipedia articles with bnf identifiers navigation menu personal tools not logged in talk contributions create account log in namespaces article talk variants views read edit view history more search navigation main page contents featured content current events random article donate to wikipedia wikipedia store interaction help about wikipedia community portal recent changes contact page tools what links here related changes upload file special pages permanent link page information wikidata item cite this page printexport create a book download as pdf printable version languages العربية български català čeština dansk deutsch eesti español فارسی français galego 한국어 hrvatski bahasa indonesia italiano עברית latina lietuvių magyar македонски bahasa melayu nederlands 日本語 norsk polski português română русиньскый русский српски srpski suomi svenska தமிழ் türkçe українська tiếng việt 中文 edit links this page was last edited on 26 october 2017 at 1245 text is available under the creative commons attributionsharealike license additional terms may apply by using this site you agree to the terms of use and privacy policy wikipedia® is a registered trademark of the wikimedia foundation inc a nonprofit organization privacy policy about wikipedia disclaimers contact wikipedia developers cookie statement mobile view 
https://en.wikipedia.org/wiki/Structured_programming
https://en.wikipedia.org/wiki/Structured_programming
https://en.wikipedia.org/wiki/Wikipedia:Citing_sources
https://en.wikipedia.org/wiki/Wikipedia:Citing_sources
https://en.wikipedia.org/wiki/Wikipedia:WikiProject_Fact_and_Reference_Check
https://en.wikipedia.org/wiki/Wikipedia:When_to_cite
https://en.wikipedia.org/wiki/Help:Maintenance_template_removal
https://en.wikipedia.org/wiki/Programming_paradigm
https://en.wikipedia.org/wiki/Action_language
https://en.wikipedia.org/wiki/Agent-oriented_programming
https://en.wikipedia.org/wiki/Array_programming
https://en.wikipedia.org/wiki/Automata-based_programming
https://en.wikipedia.org/wiki/Concept_programming
https://en.wikipedia.org/wiki/Concurrent_computing
https://en.wikipedia.org/wiki/Relativistic_programming
https://en.wikipedia.org/wiki/Data-driven_programming
https://en.wikipedia.org/wiki/Declarative_programming
https://en.wikipedia.org/wiki/Imperative_programming
https://en.wikipedia.org/wiki/Constraint_programming
https://en.wikipedia.org/wiki/Constraint_logic_programming
https://en.wikipedia.org/wiki/Concurrent_constraint_logic_programming
https://en.wikipedia.org/wiki/Dataflow_programming
https://en.wikipedia.org/wiki/Flow-based_programming
https://en.wikipedia.org/wiki/Spreadsheet
https://en.wikipedia.org/wiki/Reactive_programming
https://en.wikipedia.org/wiki/Functional_programming
https://en.wikipedia.org/wiki/Functional_logic_programming
https://en.wikipedia.org/wiki/Purely_functional_programming
https://en.wikipedia.org/wiki/Logic_programming
https://en.wikipedia.org/wiki/Abductive_logic_programming
https://en.wikipedia.org/wiki/Answer_set_programming
https://en.wikipedia.org/wiki/Concurrent_logic_programming
https://en.wikipedia.org/wiki/Functional_logic_programming
https://en.wikipedia.org/wiki/Inductive_logic_programming
https://en.wikipedia.org/wiki/Dynamic_programming_language
https://en.wikipedia.org/wiki/End-user_development
https://en.wikipedia.org/wiki/Event-driven_programming
https://en.wikipedia.org/wiki/Service-oriented_architecture
https://en.wikipedia.org/wiki/Time-driven_programming
https://en.wikipedia.org/wiki/Expression-oriented_programming_language
https://en.wikipedia.org/wiki/Feature-oriented_programming
https://en.wikipedia.org/wiki/Function-level_programming
https://en.wikipedia.org/wiki/Value-level_programming
https://en.wikipedia.org/wiki/Generic_programming
https://en.wikipedia.org/wiki/Imperative_programming
https://en.wikipedia.org/wiki/Declarative_programming
https://en.wikipedia.org/wiki/Literate_programming
https://en.wikipedia.org/wiki/Procedural_programming
https://en.wikipedia.org/wiki/Language-oriented_programming
https://en.wikipedia.org/wiki/Natural_language_programming
https://en.wikipedia.org/wiki/Service-oriented_modeling
https://en.wikipedia.org/wiki/Domain-specific_language
https://en.wikipedia.org/wiki/Grammar-oriented_programming
https://en.wikipedia.org/wiki/Dialect_(computing)
https://en.wikipedia.org/wiki/Intentional_programming
https://en.wikipedia.org/wiki/Metaprogramming
https://en.wikipedia.org/wiki/Automatic_programming
https://en.wikipedia.org/wiki/Inductive_programming
https://en.wikipedia.org/wiki/Reflection_(computer_programming)
https://en.wikipedia.org/wiki/Attribute-oriented_programming
https://en.wikipedia.org/wiki/Homoiconicity
https://en.wikipedia.org/wiki/Macro_(computer_science)
https://en.wikipedia.org/wiki/Template_metaprogramming
https://en.wikipedia.org/wiki/Policy-based_design
https://en.wikipedia.org/wiki/Non-structured_programming
https://en.wikipedia.org/wiki/Array_programming
https://en.wikipedia.org/wiki/Nondeterministic_programming
https://en.wikipedia.org/wiki/Parallel_computing
https://en.wikipedia.org/wiki/Process-oriented_programming
https://en.wikipedia.org/wiki/Tacit_programming
https://en.wikipedia.org/wiki/Concatenative_programming_language
https://en.wikipedia.org/wiki/Probabilistic_programming_language
https://en.wikipedia.org/wiki/Semantic-oriented_programming
https://en.wikipedia.org/wiki/Non-structured_programming
https://en.wikipedia.org/wiki/Block_(programming)
https://en.wikipedia.org/wiki/Modular_programming
https://en.wikipedia.org/wiki/Monolithic_application
https://en.wikipedia.org/wiki/Object-oriented_programming
https://en.wikipedia.org/wiki/Actor_model
https://en.wikipedia.org/wiki/Class-based_programming
https://en.wikipedia.org/wiki/Concurrent_object-oriented_programming
https://en.wikipedia.org/wiki/Prototype-based_programming
https://en.wikipedia.org/wiki/Separation_of_concerns
https://en.wikipedia.org/wiki/Aspect-oriented_programming
https://en.wikipedia.org/wiki/Role-oriented_programming
https://en.wikipedia.org/wiki/Subject-oriented_programming
https://en.wikipedia.org/wiki/Recursion_(computer_science)
https://en.wikipedia.org/wiki/Value-level_programming
https://en.wikipedia.org/wiki/Function-level_programming
https://en.wikipedia.org/wiki/Template:Programming_paradigms
https://en.wikipedia.org/wiki/Template_talk:Programming_paradigms
https://en.wikipedia.org/w/index.php?title=Template:Programming_paradigms&action=edit
https://en.wikipedia.org/wiki/Programming_paradigm
https://en.wikipedia.org/wiki/Computer_program
https://en.wikipedia.org/wiki/Subroutines
https://en.wikipedia.org/wiki/Block_(programming)
https://en.wikipedia.org/wiki/For_loop
https://en.wikipedia.org/wiki/While_loop
https://en.wikipedia.org/wiki/Go_to
https://en.wikipedia.org/wiki/Spaghetti_code
https://en.wikipedia.org/wiki/ALGOL_58
https://en.wikipedia.org/wiki/ALGOL_60
https://en.wikipedia.org/wiki/Structured_programming
https://en.wikipedia.org/wiki/Structured_program_theorem
https://en.wikipedia.org/wiki/Structured_programming
https://en.wikipedia.org/wiki/Go_To_Statement_Considered_Harmful
https://en.wikipedia.org/wiki/Edsger_W._Dijkstra
https://en.wikipedia.org/wiki/Structured_programming
https://en.wikipedia.org/wiki/Exception_handling
https://en.wikipedia.org/wiki/Structured_programming
https://en.wikipedia.org/wiki/Structured_programming
https://en.wikipedia.org/wiki/Structured_programming
https://en.wikipedia.org/wiki/Structured_programming
https://en.wikipedia.org/wiki/Structured_programming
https://en.wikipedia.org/wiki/Structured_programming
https://en.wikipedia.org/wiki/Structured_programming
https://en.wikipedia.org/wiki/Structured_programming
https://en.wikipedia.org/wiki/Structured_programming
https://en.wikipedia.org/wiki/Structured_programming
https://en.wikipedia.org/wiki/Structured_programming
https://en.wikipedia.org/wiki/Structured_programming
https://en.wikipedia.org/wiki/Structured_programming
https://en.wikipedia.org/wiki/Structured_programming
https://en.wikipedia.org/wiki/Structured_programming
https://en.wikipedia.org/wiki/Structured_programming
https://en.wikipedia.org/wiki/Structured_programming
https://en.wikipedia.org/wiki/Structured_programming
https://en.wikipedia.org/w/index.php?title=Structured_programming&action=edit&section=1
https://en.wikipedia.org/w/index.php?title=Structured_programming&action=edit&section=2
https://en.wikipedia.org/wiki/Control_structure
https://en.wikipedia.org/wiki/Keyword_(computer_programming)
https://en.wikipedia.org/wiki/Conditional_(programming)
https://en.wikipedia.org/wiki/While_loop
https://en.wikipedia.org/wiki/Do_while_loop
https://en.wikipedia.org/wiki/For_loop
https://en.wikipedia.org/wiki/Do_while_loop
https://en.wikipedia.org/wiki/File:Structured_program_patterns.png
https://en.wikipedia.org/wiki/File:Structured_program_patterns.png
https://en.wikipedia.org/wiki/Nassi–Shneiderman_diagram
https://en.wikipedia.org/wiki/Flow_chart
https://en.wikipedia.org/w/index.php?title=Structured_programming&action=edit&section=3
https://en.wikipedia.org/wiki/Subroutine
https://en.wikipedia.org/w/index.php?title=Structured_programming&action=edit&section=4
https://en.wikipedia.org/wiki/Block_(programming)
https://en.wikipedia.org/wiki/ALGOL_68
https://en.wikipedia.org/wiki/PL/I
https://en.wikipedia.org/wiki/Whitespace_character
https://en.wikipedia.org/wiki/Python_(programming_language)
https://en.wikipedia.org/wiki/C_(programming_language)
https://en.wikipedia.org/wiki/Curly_brace_family
https://en.wikipedia.org/w/index.php?title=Structured_programming&action=edit&section=5
https://en.wikipedia.org/wiki/Procedural_programming_language
https://en.wikipedia.org/wiki/ALGOL
https://en.wikipedia.org/wiki/Pascal_(programming_language)
https://en.wikipedia.org/wiki/PL/I
https://en.wikipedia.org/wiki/Ada_(programming_language)
https://en.wikipedia.org/wiki/Unstructured_programming
https://en.wikipedia.org/w/index.php?title=Structured_programming&action=edit&section=6
https://en.wikipedia.org/w/index.php?title=Structured_programming&action=edit&section=7
https://en.wikipedia.org/wiki/Structured_program_theorem
https://en.wikipedia.org/wiki/Computable_function
https://en.wikipedia.org/wiki/Instruction_cycle
https://en.wikipedia.org/wiki/Central_processing_unit
https://en.wikipedia.org/wiki/Turing_machine
https://en.wikipedia.org/wiki/Edsger_W._Dijkstra
https://en.wikipedia.org/wiki/Structured_programming
https://en.wikipedia.org/wiki/Edsger_W._Dijkstra
https://en.wikipedia.org/wiki/Robert_W._Floyd
https://en.wikipedia.org/wiki/Tony_Hoare
https://en.wikipedia.org/wiki/Ole-Johan_Dahl
https://en.wikipedia.org/wiki/David_Gries
https://en.wikipedia.org/w/index.php?title=Structured_programming&action=edit&section=8
https://en.wikipedia.org/wiki/P._J._Plauger
https://en.wikipedia.org/wiki/Early_adopter
https://en.wikipedia.org/wiki/Structured_programming
https://en.wikipedia.org/wiki/Donald_Knuth
https://en.wikipedia.org/wiki/Wikipedia:Citation_needed
https://en.wikipedia.org/wiki/Structured_programming
https://en.wikipedia.org/wiki/Flow_chart
https://en.wikipedia.org/wiki/Compiler
https://en.wikipedia.org/wiki/Graph_theory
https://en.wikipedia.org/wiki/Reducible_flow_graphs
https://en.wikipedia.org/wiki/Wikipedia:Manual_of_Style
https://en.wikipedia.org/wiki/Wikipedia:Manual_of_Style/Words_to_watch
https://en.wikipedia.org/wiki/IBM
https://en.wikipedia.org/wiki/Harlan_Mills
https://en.wikipedia.org/wiki/New_York_Times
https://en.wikipedia.org/wiki/Wikipedia:Citation_needed
https://en.wikipedia.org/wiki/Structured_programming
https://en.wikipedia.org/w/index.php?title=Structured_programming&action=edit&section=9
https://en.wikipedia.org/wiki/FORTRAN
https://en.wikipedia.org/wiki/COBOL
https://en.wikipedia.org/wiki/BASIC
https://en.wikipedia.org/w/index.php?title=Structured_programming&action=edit&section=10
https://en.wikipedia.org/wiki/Return_statement
https://en.wikipedia.org/w/index.php?title=Structured_programming&action=edit&section=11
https://en.wikipedia.org/wiki/C_(programming_language)
https://en.wikipedia.org/wiki/Memory_leak
https://en.wikipedia.org/wiki/Resource_leak
https://en.wikipedia.org/wiki/Tracing_(software)
https://en.wikipedia.org/wiki/Pascal_(programming_language)
https://en.wikipedia.org/wiki/Structured_programming
https://en.wikipedia.org/wiki/Resource_management_(computing)
https://en.wikipedia.org/wiki/Exception_handling
https://en.wikipedia.org/wiki/Resource_Acquisition_Is_Initialization
https://en.wikipedia.org/wiki/Kent_Beck
https://en.wikipedia.org/wiki/Martin_Fowler
https://en.wikipedia.org/wiki/Refactoring
https://en.wikipedia.org/wiki/Guard_clause
https://en.wikipedia.org/wiki/Structured_programming
https://en.wikipedia.org/wiki/Herb_Sutter
https://en.wikipedia.org/wiki/Andrei_Alexandrescu
https://en.wikipedia.org/wiki/Structured_programming
https://en.wikipedia.org/wiki/David_Watt_(computer_scientist)
https://en.wikipedia.org/wiki/S-algol
https://en.wikipedia.org/wiki/Spaghetti_code
https://en.wikipedia.org/wiki/Structured_programming
https://en.wikipedia.org/wiki/Bertrand_Meyer
https://en.wikipedia.org/wiki/Structured_programming
https://en.wikipedia.org/w/index.php?title=Structured_programming&action=edit&section=12
https://en.wikipedia.org/wiki/Cluster_(spacecraft)
https://en.wikipedia.org/wiki/Structured_programming
https://en.wikipedia.org/wiki/Cargo_cult
https://en.wikipedia.org/wiki/Structured_programming
https://en.wikipedia.org/wiki/Default_effect_(psychology)
https://en.wikipedia.org/wiki/Structured_programming
https://en.wikipedia.org/wiki/Structured_programming
https://en.wikipedia.org/wiki/Structured_programming
https://en.wikipedia.org/wiki/George_Necula
https://en.wikipedia.org/wiki/Structured_programming
https://en.wikipedia.org/wiki/OpenMP
https://en.wikipedia.org/wiki/Structured_programming
https://en.wikipedia.org/w/index.php?title=Structured_programming&action=edit&section=13
https://en.wikipedia.org/wiki/Coroutine
https://en.wikipedia.org/wiki/Coroutine
https://en.wikipedia.org/wiki/Generator_(computer_programming)
https://en.wikipedia.org/wiki/Coroutine
https://en.wikipedia.org/wiki/Stream_(computing)
https://en.wikipedia.org/w/index.php?title=Structured_programming&action=edit&section=14
https://en.wikipedia.org/wiki/Parsers
https://en.wikipedia.org/wiki/Communications_protocol
https://en.wikipedia.org/wiki/State_(computer_science)
https://en.wikipedia.org/wiki/Wikipedia:Citation_needed
https://en.wikipedia.org/wiki/Trampoline_(computing)
https://en.wikipedia.org/w/index.php?title=Structured_programming&action=edit&section=15
https://en.wikipedia.org/wiki/DRAKON
https://en.wikipedia.org/wiki/Minimal_evaluation
https://en.wikipedia.org/wiki/Nassi–Shneiderman_diagram
https://en.wikipedia.org/wiki/Structure_chart
https://en.wikipedia.org/wiki/Switch_statement
https://en.wikipedia.org/w/index.php?title=Structured_programming&action=edit&section=16
https://en.wikipedia.org/wiki/Structured_programming
https://books.google.co.uk/books?id=bVSjoO8f2fMC&lpg=PR11&ots=zItCa2GxG6&dq=Comparative%20Programming%20Languages&lr&pg=PA20
https://en.wikipedia.org/wiki/International_Standard_Book_Number
https://en.wikipedia.org/wiki/Special:BookSources/9780201710120
https://en.wikipedia.org/wiki/Structured_programming
http://www.cs.unibo.it/~martini/PP/bohm-jac.pdf
https://en.wikipedia.org/wiki/Communications_of_the_ACM
https://en.wikipedia.org/wiki/Digital_object_identifier
https://doi.org/10.1145/355592.365646
https://en.wikipedia.org/wiki/Structured_programming
https://en.wikipedia.org/wiki/Structured_programming
https://en.wikipedia.org/wiki/Structured_programming
https://en.wikipedia.org/wiki/Communications_of_the_ACM
https://en.wikipedia.org/wiki/International_Standard_Serial_Number
https://www.worldcat.org/issn/0001-0782
https://en.wikipedia.org/wiki/Digital_object_identifier
https://doi.org/10.1145/362929.362947
https://en.wikipedia.org/wiki/Structured_programming
https://en.wikipedia.org/wiki/P._J._Plauger
https://en.wikipedia.org/wiki/International_Standard_Book_Number
https://en.wikipedia.org/wiki/Special:BookSources/978-0-13-721374-0
https://en.wikipedia.org/wiki/Structured_programming
http://cs.sjsu.edu/~mak/CS185C/KnuthStructuredProgrammingGoTo.pdf
https://en.wikipedia.org/wiki/Structured_programming
https://web.archive.org/web/20090320002214/http:/www.ecn.purdue.edu/ParaMount/papers/rubin87goto.pdf
https://en.wikipedia.org/wiki/Digital_object_identifier
https://doi.org/10.1145/214748.315722
http://www.ecn.purdue.edu/ParaMount/papers/rubin87goto.pdf
https://en.wikipedia.org/wiki/Structured_programming
https://en.wikipedia.org/wiki/Structured_programming
https://en.wikipedia.org/wiki/Structured_programming
https://en.wikipedia.org/wiki/International_Standard_Book_Number
https://en.wikipedia.org/wiki/Special:BookSources/978-0-321-60350-0
https://en.wikipedia.org/wiki/Structured_programming
https://en.wikipedia.org/wiki/International_Standard_Book_Number
https://en.wikipedia.org/wiki/Special:BookSources/978-0-13-265442-5
https://en.wikipedia.org/wiki/Structured_programming
https://en.wikipedia.org/wiki/International_Standard_Book_Number
https://en.wikipedia.org/wiki/Special:BookSources/978-0-470-85320-7
https://en.wikipedia.org/wiki/Structured_programming
https://en.wikipedia.org/wiki/International_Standard_Book_Number
https://en.wikipedia.org/wiki/Special:BookSources/978-3-540-92144-8
https://en.wikipedia.org/wiki/Structured_programming
http://pragprog.com/magazines/2012-04/the-pragmatic-defense
https://en.wikipedia.org/wiki/Structured_programming
http://msmvps.com/blogs/peterritchie/archive/2008/03/07/single-entry-single-exit-should-it-still-be-applicable-in-object-oriented-languages.aspx
https://en.wikipedia.org/wiki/Structured_programming
https://en.wikipedia.org/wiki/International_Standard_Book_Number
https://en.wikipedia.org/wiki/Special:BookSources/978-0-470-85320-7
https://en.wikipedia.org/wiki/Structured_programming
https://en.wikipedia.org/wiki/International_Standard_Book_Number
https://en.wikipedia.org/wiki/Special:BookSources/1-111-52941-8
https://en.wikipedia.org/wiki/Structured_programming
https://en.wikipedia.org/wiki/International_Standard_Book_Number
https://en.wikipedia.org/wiki/Special:BookSources/978-1-4665-6514-2
https://en.wikipedia.org/wiki/Structured_programming
http://www.cs.virginia.edu/~weimer/p/weimer-toplas2008.pdf
https://en.wikipedia.org/wiki/Structured_programming
https://en.wikipedia.org/wiki/International_Standard_Book_Number
https://en.wikipedia.org/wiki/Special:BookSources/978-1-55860-671-5
https://en.wikipedia.org/w/index.php?title=Structured_programming&action=edit&section=17
https://en.wikipedia.org/wiki/Edsger_Dijkstra
http://www.cs.utexas.edu/users/EWD/ewd02xx/EWD249.PDF
https://en.wikipedia.org/wiki/Corrado_Böhm
http://www.cs.unibo.it/~martini/PP/bohm-jac.pdf
https://en.wikipedia.org/wiki/Digital_object_identifier
https://doi.org/10.1145/355592.365646
https://en.wikipedia.org/wiki/Edsger_Dijkstra
https://www.cs.utexas.edu/users/EWD/ewd02xx/EWD215.PDF
https://en.wikipedia.org/wiki/Digital_object_identifier
https://doi.org/10.1145/362929.362947
https://en.wikipedia.org/wiki/Michael_A._Jackson
https://en.wikipedia.org/wiki/Ole-Johan_Dahl
https://en.wikipedia.org/wiki/E._W._Dijkstra
https://en.wikipedia.org/wiki/C._A._R._Hoare
https://en.wikipedia.org/wiki/International_Standard_Book_Number
https://en.wikipedia.org/wiki/Special:BookSources/0-12-200550-3
https://en.wikipedia.org/wiki/Eight_queens_puzzle
http://portal.acm.org/citation.cfm?id=1243380&jmp=cit&coll=portal&dl=GUIDE&CFID=://www.acm.org/publications/&CFTOKEN=www.acm.org/publications/
http://research.cs.wisc.edu/techreports/2008/TR1647.pdf
https://en.wikipedia.org/wiki/University_of_Wisconsin–Madison
http://pages.cs.wisc.edu/~liblit/tr-1647/
https://en.wikipedia.org/w/index.php?title=Structured_programming&action=edit&section=18
https://en.wikibooks.org/wiki/Computer_Programming
https://en.wikibooks.org/wiki/Computer_Programming/Control
http://code.google.com/p/bpstruct/
http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.37.4610
https://en.wikipedia.org/wiki/Template:Edsger_Dijkstra
https://en.wikipedia.org/w/index.php?title=Template_talk:Edsger_Dijkstra&action=edit&redlink=1
https://en.wikipedia.org/w/index.php?title=Template:Edsger_Dijkstra&action=edit
https://en.wikipedia.org/wiki/Edsger_W._Dijkstra
https://en.wikipedia.org/wiki/Edsger_W._Dijkstra
https://en.wikipedia.org/wiki/Structured_Programming
https://en.wikipedia.org/wiki/Edsger_W._Dijkstra
https://en.wikipedia.org/wiki/EWDs
https://en.wikipedia.org/wiki/Go_To_Statement_Considered_Harmful
https://en.wikipedia.org/wiki/On_the_Cruelty_of_Really_Teaching_Computer_Science
https://en.wikipedia.org/wiki/Computer_science
https://en.wikipedia.org/wiki/Theoretical_computer_science
https://en.wikipedia.org/wiki/Software_engineering
https://en.wikipedia.org/wiki/Systems_science
https://en.wikipedia.org/wiki/Algorithm_design
https://en.wikipedia.org/wiki/Concurrent_computing
https://en.wikipedia.org/wiki/Distributed_computing
https://en.wikipedia.org/wiki/Formal_methods
https://en.wikipedia.org/wiki/Programming_methodology
https://en.wikipedia.org/wiki/Programming_language_research
https://en.wikipedia.org/wiki/Software_design
https://en.wikipedia.org/wiki/Software_development
https://en.wikipedia.org/wiki/Software_architecture
https://en.wikipedia.org/wiki/Edsger_W._Dijkstra
https://en.wikipedia.org/wiki/Edsger_W._Dijkstra
https://en.wikipedia.org/wiki/ALGOL_60
https://en.wikipedia.org/wiki/Programming_language_implementation
https://en.wikipedia.org/wiki/Call_stack
https://en.wikipedia.org/wiki/Concurrency_(computer_science)
https://en.wikipedia.org/wiki/Concurrent_programming
https://en.wikipedia.org/wiki/Cooperating_sequential_processes
https://en.wikipedia.org/wiki/Critical_section
https://en.wikipedia.org/wiki/Deadly_embrace
https://en.wikipedia.org/wiki/Deadlock
https://en.wikipedia.org/wiki/Dining_philosophers_problem
https://en.wikipedia.org/wiki/Dutch_national_flag_problem
https://en.wikipedia.org/wiki/Fault-tolerant_system
https://en.wikipedia.org/wiki/Goto-less_programming
https://en.wikipedia.org/wiki/Guarded_commands
https://en.wikipedia.org/wiki/Guarded_Command_Language
https://en.wikipedia.org/wiki/Abstraction_layer
https://en.wikipedia.org/wiki/Software_architecture
https://en.wikipedia.org/wiki/Abstraction_layer
https://en.wikipedia.org/wiki/Multithreaded_programming
https://en.wikipedia.org/wiki/Mutual_exclusion
https://en.wikipedia.org/wiki/Mutex
https://en.wikipedia.org/wiki/Philosophy_of_computer_science
https://en.wikipedia.org/wiki/Producer–consumer_problem
https://en.wikipedia.org/wiki/Bounded_buffer_problem
https://en.wikipedia.org/wiki/Software_product_line
https://en.wikipedia.org/wiki/Predicate_transformer_semantics
https://en.wikipedia.org/wiki/Synchronization_(computer_science)
https://en.wikipedia.org/wiki/Self-stabilizing_system
https://en.wikipedia.org/wiki/Semaphore_(programming)
https://en.wikipedia.org/wiki/Separation_of_concerns
https://en.wikipedia.org/wiki/Sleeping_barber_problem
https://en.wikipedia.org/wiki/Software_crisis
https://en.wikipedia.org/wiki/Structured_analysis
https://en.wikipedia.org/wiki/THE_multiprogramming_system
https://en.wikipedia.org/wiki/Unbounded_nondeterminism
https://en.wikipedia.org/wiki/Weakest_precondition_calculus
https://en.wikipedia.org/wiki/Edsger_W._Dijkstra
https://en.wikipedia.org/wiki/Banker's_algorithm
https://en.wikipedia.org/wiki/Dijkstra's_algorithm
https://en.wikipedia.org/wiki/DJP_algorithm
https://en.wikipedia.org/wiki/Prim's_algorithm
https://en.wikipedia.org/wiki/Dijkstra-Scholten_algorithm
https://en.wikipedia.org/wiki/Dekker's_algorithm
https://en.wikipedia.org/wiki/Smoothsort
https://en.wikipedia.org/wiki/Shunting-yard_algorithm
https://en.wikipedia.org/wiki/Tracing_garbage_collection
https://en.wikipedia.org/wiki/Concurrent_algorithm
https://en.wikipedia.org/wiki/Distributed_algorithm
https://en.wikipedia.org/wiki/Deadlock_prevention_algorithms
https://en.wikipedia.org/wiki/Self-stabilization
https://en.wikipedia.org/wiki/Shlomi_Dolev
https://en.wikipedia.org/wiki/Per_Brinch_Hansen
https://en.wikipedia.org/wiki/Tony_Hoare
https://en.wikipedia.org/wiki/Ole-Johan_Dahl
https://en.wikipedia.org/wiki/Leslie_Lamport
https://en.wikipedia.org/wiki/David_Parnas
https://en.wikipedia.org/wiki/Adriaan_van_Wijngaarden
https://en.wikipedia.org/wiki/Niklaus_Wirth
https://en.wikipedia.org/wiki/Dijkstra_Prize
https://en.wikipedia.org/wiki/Edsger_W._Dijkstra_Prize_in_Distributed_Computing
https://en.wikipedia.org/wiki/Centrum_Wiskunde_&_Informatica
https://en.wikipedia.org/w/index.php?title=E.W._Dijkstra_Archive&action=edit&redlink=1
https://en.wikipedia.org/wiki/University_of_Texas_at_Austin
https://en.wikipedia.org/wiki/List_of_pioneers_in_computer_science
https://en.wikipedia.org/wiki/List_of_important_publications_in_computer_science
https://en.wikipedia.org/wiki/List_of_important_publications_in_theoretical_computer_science
https://en.wikipedia.org/wiki/List_of_important_publications_in_concurrent,_parallel,_and_distributed_computing
https://en.wikiquote.org/wiki/Special:Search/Edsger_W._Dijkstra
https://en.wikipedia.org/wiki/Help:Authority_control
https://en.wikipedia.org/wiki/Library_of_Congress_Control_Number
http://id.loc.gov/authorities/subjects/sh85129214
https://en.wikipedia.org/wiki/Integrated_Authority_File
https://d-nb.info/gnd/4058133-0
https://en.wikipedia.org/wiki/Bibliothèque_nationale_de_France
http://catalogue.bnf.fr/ark:/12148/cb11966709k
http://data.bnf.fr/ark:/12148/cb11966709k
https://en.wikipedia.org/wiki/Biblioteca_Nacional_de_España
http://catalogo.bne.es/uhtbin/authoritybrowse.cgi?action=display&authority_id=XX531013
https://en.wikipedia.org/w/index.php?title=Structured_programming&oldid=807183574
https://en.wikipedia.org/wiki/Help:Category
https://en.wikipedia.org/wiki/Category:Programming_paradigms
https://en.wikipedia.org/wiki/Category:Holism
https://en.wikipedia.org/wiki/Category:Edsger_W._Dijkstra
https://en.wikipedia.org/wiki/Category:Dutch_inventions
https://en.wikipedia.org/wiki/Category:Articles_lacking_in-text_citations_from_March_2015
https://en.wikipedia.org/wiki/Category:All_articles_lacking_in-text_citations
https://en.wikipedia.org/wiki/Category:All_articles_with_unsourced_statements
https://en.wikipedia.org/wiki/Category:Articles_with_unsourced_statements_from_January_2008
https://en.wikipedia.org/wiki/Category:Wikipedia_articles_needing_clarification_from_April_2012
https://en.wikipedia.org/wiki/Category:All_articles_with_specifically_marked_weasel-worded_phrases
https://en.wikipedia.org/wiki/Category:Articles_with_specifically_marked_weasel-worded_phrases_from_May_2011
https://en.wikipedia.org/wiki/Category:Articles_with_unsourced_statements_from_July_2014
https://en.wikipedia.org/wiki/Category:Articles_with_unsourced_statements_from_April_2017
https://en.wikipedia.org/wiki/Category:Wikipedia_articles_with_LCCN_identifiers
https://en.wikipedia.org/wiki/Category:Wikipedia_articles_with_GND_identifiers
https://en.wikipedia.org/wiki/Category:Wikipedia_articles_with_BNF_identifiers
https://en.wikipedia.org/wiki/Special:MyTalk
https://en.wikipedia.org/wiki/Special:MyContributions
https://en.wikipedia.org/w/index.php?title=Special:CreateAccount&returnto=Structured+programming
https://en.wikipedia.org/w/index.php?title=Special:UserLogin&returnto=Structured+programming
https://en.wikipedia.org/wiki/Structured_programming
https://en.wikipedia.org/wiki/Talk:Structured_programming
https://en.wikipedia.org/wiki/Structured_programming
https://en.wikipedia.org/w/index.php?title=Structured_programming&action=edit
https://en.wikipedia.org/w/index.php?title=Structured_programming&action=history
https://en.wikipedia.org/wiki/Main_Page
https://en.wikipedia.org/wiki/Main_Page
https://en.wikipedia.org/wiki/Portal:Contents
https://en.wikipedia.org/wiki/Portal:Featured_content
https://en.wikipedia.org/wiki/Portal:Current_events
https://en.wikipedia.org/wiki/Special:Random
https://donate.wikimedia.org/wiki/Special:FundraiserRedirector?utm_source=donate&utm_medium=sidebar&utm_campaign=C13_en.wikipedia.org&uselang=en
https://shop.wikimedia.org
https://en.wikipedia.org/wiki/Help:Contents
https://en.wikipedia.org/wiki/Wikipedia:About
https://en.wikipedia.org/wiki/Wikipedia:Community_portal
https://en.wikipedia.org/wiki/Special:RecentChanges
https://en.wikipedia.org/wiki/Wikipedia:Contact_us
https://en.wikipedia.org/wiki/Special:WhatLinksHere/Structured_programming
https://en.wikipedia.org/wiki/Special:RecentChangesLinked/Structured_programming
https://en.wikipedia.org/wiki/Wikipedia:File_Upload_Wizard
https://en.wikipedia.org/wiki/Special:SpecialPages
https://en.wikipedia.org/w/index.php?title=Structured_programming&oldid=807183574
https://en.wikipedia.org/w/index.php?title=Structured_programming&action=info
https://www.wikidata.org/wiki/Special:EntityPage/Q223335
https://en.wikipedia.org/w/index.php?title=Special:CiteThisPage&page=Structured_programming&id=807183574
https://en.wikipedia.org/w/index.php?title=Special:Book&bookcmd=book_creator&referer=Structured+programming
https://en.wikipedia.org/w/index.php?title=Special:ElectronPdf&page=Structured+programming&action=show-download-screen
https://en.wikipedia.org/w/index.php?title=Structured_programming&printable=yes
https://ar.wikipedia.org/wiki/برمجة_مهيكلة
https://bg.wikipedia.org/wiki/Структурно_програмиране
https://ca.wikipedia.org/wiki/Programació_estructurada
https://cs.wikipedia.org/wiki/Strukturované_programování
https://da.wikipedia.org/wiki/Struktureret_programmering
https://de.wikipedia.org/wiki/Strukturierte_Programmierung
https://et.wikipedia.org/wiki/Struktureeritud_programmeerimine
https://es.wikipedia.org/wiki/Programación_estructurada
https://fa.wikipedia.org/wiki/برنامه‌نویسی_ساخت‌یافته
https://fr.wikipedia.org/wiki/Programmation_structurée
https://gl.wikipedia.org/wiki/Programación_estruturada
https://ko.wikipedia.org/wiki/구조적_프로그래밍
https://hr.wikipedia.org/wiki/Strukturirano_programiranje
https://id.wikipedia.org/wiki/Pemrograman_terstruktur
https://it.wikipedia.org/wiki/Programmazione_strutturata
https://he.wikipedia.org/wiki/תכנות_מובנה
https://la.wikipedia.org/wiki/Programmatura_ordinata
https://lt.wikipedia.org/wiki/Struktūrinis_programavimas
https://hu.wikipedia.org/wiki/Strukturált_programozás
https://mk.wikipedia.org/wiki/Структурно_програмирање
https://ms.wikipedia.org/wiki/Pengaturcaraan_berstruktur
https://nl.wikipedia.org/wiki/Gestructureerd_programmeren
https://ja.wikipedia.org/wiki/構造化プログラミング
https://no.wikipedia.org/wiki/Strukturert_programmering
https://pl.wikipedia.org/wiki/Programowanie_strukturalne
https://pt.wikipedia.org/wiki/Programação_estruturada
https://ro.wikipedia.org/wiki/Programare_structurată
https://rue.wikipedia.org/wiki/Штруктуроване_проґрамованя
https://ru.wikipedia.org/wiki/Структурное_программирование
https://sr.wikipedia.org/wiki/Strukturirano_programiranje
https://fi.wikipedia.org/wiki/Strukturoitu_ohjelmointi
https://sv.wikipedia.org/wiki/Strukturerad_programmering
https://ta.wikipedia.org/wiki/ஒழுங்குசார்_நிரலாக்கம்
https://tr.wikipedia.org/wiki/Yapısal_programlama
https://uk.wikipedia.org/wiki/Структурне_програмування
https://vi.wikipedia.org/wiki/Lập_trình_cấu_trúc
https://zh.wikipedia.org/wiki/结构化编程
https://www.wikidata.org/wiki/Special:EntityPage/Q223335
https://en.wikipedia.org/wiki/Wikipedia:Text_of_Creative_Commons_Attribution-ShareAlike_3.0_Unported_License
https://creativecommons.org/licenses/by-sa/3.0/
https://wikimediafoundation.org/wiki/Terms_of_Use
https://wikimediafoundation.org/wiki/Privacy_policy
https://www.wikimediafoundation.org/
https://wikimediafoundation.org/wiki/Privacy_policy
https://en.wikipedia.org/wiki/Wikipedia:About
https://en.wikipedia.org/wiki/Wikipedia:General_disclaimer
https://en.wikipedia.org/wiki/Wikipedia:Contact_us
https://www.mediawiki.org/wiki/Special:MyLanguage/How_to_contribute
https://wikimediafoundation.org/wiki/Cookie_statement
https://en.m.wikipedia.org/w/index.php?title=Structured_programming&mobileaction=toggle_view_mobile
https://wikimediafoundation.org/
https://www.mediawiki.org/
