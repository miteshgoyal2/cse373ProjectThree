https://en.wikipedia.org/wiki/Software_architecture
Software architecture - Wikipedia
Software architecture refers to the high level structures of a software system, the discipline of creating such structures, and the documentation of these structures. These structures are needed to reason...
software architecture from wikipedia the free encyclopedia jump to navigation search software development core activities processes requirements design engineering construction testing debugging deployment maintenance paradigms and models prototyping cleanroom incremental waterfall agile spiral methodologies and frameworks rad up xp tsp psp dsdm msf scrum kanban vmodel tdd atdd bdd fdd ddd mdd iid lean devops safe supporting disciplines configuration management documentation software quality assurance sqa project management user experience tools compiler debugger profiler gui designer modeling ide build automation release automation infrastructure as code testing standards and boks cmmi ieee standards iso 9001 isoiec standards swebok pmbok babok v t e software architecture refers to the high level structures of a software system the discipline of creating such structures and the documentation of these structures these structures are needed to reason about the software system each structure comprises software elements relations among them and properties of both elements and relations1 the architecture of a software system is a metaphor analogous to the architecture of a building2 software architecture is about making fundamental structural choices which are costly to change once implemented software architecture choices include specific structural options from possibilities in the design of software for example the systems that controlled the space shuttle launch vehicle had the requirement of being very fast and very reliable therefore an appropriate realtime computing language would need to be chosen additionally to satisfy the need for reliability the choice could be made to have multiple redundant and independently produced copies of the program and to run these copies on independent hardware while crosschecking results documenting software architecture facilitates communication between stakeholders captures early decisions about the highlevel design and allows reuse of design components between projects3pp29–35 contents 1 scope 2 characteristics 3 motivation 4 history 5 architecture activities 51 architecture supporting activities 6 software architecture topics 61 software architecture description 62 architecture description languages 63 architecture viewpoints 64 architecture frameworks 65 architectural styles and patterns 66 software architecture and agile development 67 software architecture erosion 68 software architecture recovery 7 related fields 71 design 72 requirements engineering 73 other types of architecture 8 see also 9 references 10 further reading 11 external links scopeedit opinions vary as to the scope of software architectures4 overall macroscopic system structure5 this refers to architecture as a higher level abstraction of a software system that consists of a collection of computational components together with connectors that describe the interaction between these components the important stuff—whatever that is6 this refers to the fact that software architects should concern themselves with those decisions that have high impact on the system and its stakeholders that which is fundamental to understanding a system in its environment7 things that people perceive as hard to change6 since designing the architecture takes place at the beginning of a software systems lifecycle the architect should focus on decisions that have to be right the first time following this line of thought architectural design issues may become nonarchitectural once their irreversibility can be overcome a set of architectural design decisions8 software architecture should not be considered merely a set of models or structures but should include the decisions that lead to these particular structures and the rationale behind them this insight has led to substantial research into software architecture knowledge management9 there is no sharp distinction between software architecture versus design and requirements engineering see related fields below they are all part of a chain of intentionality from highlevel intentions to lowlevel details10p18 characteristicsedit software architecture exhibits the following multitude of stakeholders software systems have to cater to a variety of stakeholders such as business managers owners users and operators these stakeholders all have their own concerns with respect to the system balancing these concerns and demonstrating how they are addressed is part of designing the system3pp29–31 this implies that architecture involves dealing with a broad variety of concerns and stakeholders and has a multidisciplinary nature separation of concerns the established way for architects to reduce complexity is to separate the concerns that drive the design architecture documentation shows that all stakeholder concerns are addressed by modeling and describing the architecture from separate points of view associated with the various stakeholder concerns11 these separate descriptions are called architectural views see for example the 41 architectural view model qualitydriven classic software design approaches eg jackson structured programming were driven by required functionality and the flow of data through the system but the current insight3pp26–28 is that the architecture of a software system is more closely related to its quality attributes such as faulttolerance backward compatibility extensibility reliability maintainability availability security usability and other such –ilities stakeholder concerns often translate into requirements on these quality attributes which are variously called nonfunctional requirements extrafunctional requirements behavioral requirements or quality attribute requirements recurring styles like building architecture the software architecture discipline has developed standard ways to address recurring concerns these standard ways are called by various names at various levels of abstraction common terms for recurring solutions are architectural style10pp273–277 tactic3pp70–72 reference architecture1213 and architectural pattern3pp203–205 conceptual integrity a term introduced by fred brooks in the mythical manmonth to denote the idea that the architecture of a software system represents an overall vision of what it should do and how it should do it this vision should be separated from its implementation the architect assumes the role of keeper of the vision making sure that additions to the system are in line with the architecture hence preserving conceptual integrity14pp41–50 motivationedit software architecture is an intellectually graspable abstraction of a complex system3pp5–6 this abstraction provides a number of benefits it gives a basis for analysis of software systems behavior before the system has been built2 the ability to verify that a future software system fulfills its stakeholders needs without actually having to build it represents substantial costsaving and riskmitigation15 a number of techniques have been developed to perform such analyses such as atam it provides a basis for reuse of elements and decisions23p35 a complete software architecture or parts of it like individual architectural strategies and decisions can be reused across multiple systems whose stakeholders require similar quality attributes or functionality saving design costs and mitigating the risk of design mistakes it supports early design decisions that impact a systems development deployment and maintenance life3p31 getting the early highimpact decisions right is important to prevent schedule and budget overruns it facilitates communication with stakeholders contributing to a system that better fulfills their needs3p29–31 communicating about complex systems from the point of view of stakeholders helps them understand the consequences of their stated requirements and the design decisions based on them architecture gives the ability to communicate about design decisions before the system is implemented when they are still relatively easy to adapt it helps in risk management software architecture helps to reduce risks and chance of failure10p18 it enables cost reduction software architecture is a means to manage risk and costs in complex it projects16 historyedit the comparison between software design and civil architecture was first drawn in the late 1960s17 but the term software architecture became prevalent only in the beginning of the 1990s18 the field of computer science had encountered problems associated with complexity since its formation19 earlier problems of complexity were solved by developers by choosing the right data structures developing algorithms and by applying the concept of separation of concerns although the term software architecture is relatively new to the industry the fundamental principles of the field have been applied sporadically by software engineering pioneers since the mid1980s early attempts to capture and explain software architecture of a system were imprecise and disorganized often characterized by a set of boxandline diagrams 20 software architecture as a concept has its origins in the research of edsger dijkstra in 1968 and david parnas in the early 1970s these scientists emphasized that the structure of a software system matters and getting the structure right is critical during the 1990s there was a concerted effort to define and codify fundamental aspects of the discipline with research work concentrating on architectural styles patterns architecture description languages architecture documentation and formal methods21 research institutions have played a prominent role in furthering software architecture as a discipline mary shaw and david garlan of carnegie mellon wrote a book titled software architecture perspectives on an emerging discipline in 1996 which promoted software architecture concepts such as components connectors and styles the university of california irvines institute for software researchs efforts in software architecture research is directed primarily in architectural styles architecture description languages and dynamic architectures ieee 14712000 recommended practice for architecture description of softwareintensive systems was the first formal standard in the area of software architecture it was adopted in 2007 by iso as isoiec 420102007 in november 2011 ieee 1471–2000 was superseded by isoiecieee 420102011 systems and software engineering — architecture description jointly published by ieee and iso11 while in ieee 1471 software architecture was about the architecture of softwareintensive systems defined as any system where software contributes essential influences to the design construction deployment and evolution of the system as a whole the 2011 edition goes a step further by including the isoiec 15288 and isoiec 12207 definitions of a system which embrace not only hardware and software but also humans processes procedures facilities materials and naturally occurring entities this reflects the relationship between software architecture enterprise architecture and solution architecture architecture activitiesedit there are many activities that a software architect performs a software architect typically works with project managers discusses architecturally significant requirements with stakeholders designs a software architecture evaluates a design communicates with designers and stakeholders documents the architectural design and more22 there are four core activities in software architecture design23 these core architecture activities are performed iteratively and at different stages of the initial software development lifecycle as well as over the evolution of a system architectural analysis is the process of understanding the environment in which a proposed system or systems will operate and determining the requirements for the system the input or requirements to the analysis activity can come from any number of stakeholders and include items such as what the system will do when operational the functional requirements how well the system will perform runtime nonfunctional requirements such as reliability operability performance efficiency security compatibility defined in isoiec 250102011 standard 24 developmenttime nonfunctional requirements such as maintainability and transferability defined in iso 250102011 standard 24 business requirements and environmental contexts of a system that may change over time such as legal social financial competitive and technology concerns 25 the outputs of the analysis activity are those requirements that have a measurable impact on a software system’s architecture called architecturally significant requirements26 architectural synthesis or design is the process of creating an architecture given the architecturally significant requirements determined by the analysis the current state of the design and the results of any evaluation activities the design is created and improved see 3pp311–32623 for a discussion of various techniques for improving a current design architecture evaluation is the process of determining how well the current design or a portion of it satisfies the requirements derived during analysis an evaluation can occur whenever an architect is considering a design decision it can occur after some portion of the design has been completed it can occur after the final design has been completed or it can occur after the system has been constructed some of the available software architecture evaluation techniques include architecture tradeoff analysis method atam and tara27 frameworks for comparing the techniques are discussed in frameworks such as sara report 15 and architecture reviews practice and experience28 architecture evolution is the process of maintaining and adapting an existing software architecture to meet requirement and environmental changes as software architecture provides a fundamental structure of a software system its evolution and maintenance would necessarily impact its fundamental structure as such architecture evolution is concerned with adding new functionality as well as maintaining existing functionality and system behaviour architecture requires critical supporting activities these supporting activities take place throughout the core software architecture process they include knowledge management and communication design reasoning and decision making and documentation architecture supporting activitiesedit software architecture supporting activities are carried out during core software architecture activities these supporting activities assist a software architect to carry out analysis synthesis evaluation and evolution for instance an architect has to gather knowledge make decisions and document during the analysis phase knowledge management and communication is the activity of exploring and managing knowledge that is essential to designing a software architecture a software architect does not work in isolation they get inputs functional and nonfunctional requirements and design contexts from various stakeholders and provides outputs to stakeholders software architecture knowledge is often tacit and is retained in the heads of stakeholders software architecture knowledge management activity is about finding communicating and retaining knowledge as software architecture design issues are intricate and interdependent a knowledge gap in design reasoning can lead to incorrect software architecture design2229 examples of knowledge management and communication activities include searching for design patterns prototyping asking experienced developers and architects evaluating the designs of similar systems sharing knowledge with other designers and stakeholders and documenting experience in a wikipage design reasoning and decision making is the activity of evaluating design decisions this activity is fundamental to all three core software architecture activities830 it entails gathering and associating decision contexts formulating design decision problems finding solution options and evaluating tradeoffs before making decisions this process occurs at different levels of decision granularity while evaluating significant architectural requirements and software architecture decisions and software architecture analysis synthesis and evaluation examples of reasoning activities include understanding the impacts of a requirement or a design on quality attributes questioning the issues that a design might cause assessing possible solution options and evaluating the tradeoffs between solutions documentation is the activity of recording the design generated during the software architecture process a system design is described using several views that frequently include a static view showing the code structure of the system a dynamic view showing the actions of the system during execution and a deployment view showing how a system is placed on hardware for execution kruchtens 41 view suggests a description of commonly used views for documenting software architecture31 documenting software architectures views and beyond has descriptions of the kinds of notations that could be used within the view description1 examples of documentation activities are writing a specification recording a system design model documenting a design rationale developing a viewpoint documenting views software architecture topicsedit software architecture descriptionedit main article software architecture description software architecture description involves the principles and practices of modeling and representing architectures using mechanisms such as architecture description languages architecture viewpoints and architecture frameworks architecture description languagesedit main article architecture description language an architecture description language adl is any means of expression used to describe a software architecture isoiecieee 42010 many specialpurpose adls have been developed since the 1990s including aadl sae standard wright developed by carnegie mellon acme developed by carnegie mellon xadl developed by uci darwin developed by imperial college london daopadl developed by university of málaga sbcadl developed by national sun yatsen university and byadl university of laquila italy architecture viewpointsedit main article view model 41 architectural view model software architecture descriptions are commonly organized into views which are analogous to the different types of blueprints made in building architecture each view addresses a set of system concerns following the conventions of its viewpoint where a viewpoint is a specification that describes the notations modeling and analysis techniques to use in a view that express the architecture in question from the perspective of a given set of stakeholders and their concerns isoiecieee 42010 the viewpoint specifies not only the concerns framed ie to be addressed but the presentation model kinds used conventions used and any consistency correspondence rules to keep a view consistent with other views architecture frameworksedit main article architecture framework an architecture framework captures the conventions principles and practices for the description of architectures established within a specific domain of application andor community of stakeholders isoiecieee 42010 a framework is usually implemented in terms of one or more viewpoints or adls architectural styles and patternsedit main article software architecture styles and patterns an architectural pattern is a general reusable solution to a commonly occurring problem in software architecture within a given context architectural patterns are often documented as software design patterns following traditional building architecture a software architectural style is a specific method of construction characterized by the features that make it notable architectural style an architectural style defines a family of systems in terms of a pattern of structural organization a vocabulary of components and connectors with constraints on how they can be combined32 architectural styles are reusable packages of design decisions and constraints that are applied to an architecture to induce chosen desirable qualities33 there are many recognized architectural patterns and styles among them blackboard clientserver 2tier 3tier ntier cloud computing exhibit this style componentbased datacentric eventdriven or implicit invocation layered or multilayered architecture monolithic application peertopeer p2p pipes and filters plugins representational state transfer rest rulebased serviceoriented microservices architecture shared nothing architecture spacebased architecture some treat architectural patterns and architectural styles as the same34 some treat styles as specializations of patterns what they have in common is both patterns and styles are idioms for architects to use they provide a common language34 or vocabulary32 with which to describe classes of systems software architecture and agile developmentedit main article agile development there are also concerns that software architecture leads to too much big design up front especially among proponents of agile software development a number of methods have been developed to balance the tradeoffs of upfront design and agility35 including the agile method dsdm which mandates a foundations phase during which just enough architectural foundations are laid ieee software devoted a special issue36 to the interaction between agility and architecture software architecture erosionedit software architecture erosion or decay refers to the gap observed between the planned and actual architecture of a software system as realized in its implementation37 software architecture erosion occurs when implementation decisions either do not fully achieve the architectureasplanned or otherwise violate constraints or principles of that architecture2 the gap between planned and actual architectures is sometimes understood in terms of the notion of technical debt as an example consider a strictly layered system where each layer can only use services provided by the layer immediately below it any source code component that does not observe this constraint represents an architecture violation if not corrected such violations can transform the architecture into a monolithic block with adverse effects on understandability maintainability and evolvability various approaches have been proposed to address erosion these approaches which include tools techniques and processes are primarily classified into three generic categories that attempt to minimise prevent and repair architecture erosion within these broad categories each approach is further broken down reflecting the highlevel strategies adopted to tackle erosion these are processoriented architecture conformance architecture evolution management architecture design enforcement architecture to implementation linkage selfadaptation and architecture restoration techniques consisting of recovery discovery and reconciliation38 there are two major techniques to detect architectural violations reflexion models and domainspecific languages reflexion model rm techniques compare a highlevel model provided by the systems architects with the source code implementation there are also domainspecific languages with focus on specifying and checking architectural constraints software architecture recoveryedit main article software architecture recovery software architecture recovery or reconstruction or reverse engineering includes the methods techniques and processes to uncover a software systems architecture from available information including its implementation and documentation architecture recovery is often necessary to make informed decisions in the face of obsolete or outofdate documentation and architecture erosion implementation and maintenance decisions diverging from the envisioned architecture39 related fieldsedit designedit main article software design architecture is design but not all design is architectural1 in practice the architect is the one who draws the line between software architecture architectural design and detailed design nonarchitectural design there are no rules or guidelines that fit all cases although there have been attempts to formalize the distinction according to the intensionlocality hypothesis40 the distinction between architectural and detailed design is defined by the locality criterion40 according to which a statement about software design is nonlocal architectural if and only if a program that satisfies it can be expanded into a program that does not for example the client–server style is architectural strategic because a program that is built on this principle can be expanded into a program that is not client–server—for example by adding peertopeer nodes requirements engineeringedit main article requirements engineering requirements engineering and software architecture can be seen as complementary approaches while software architecture targets the solution space or the how requirements engineering addresses the problem space or the what41 requirements engineering entails the elicitation negotiation specification validation documentation and management of requirements both requirements engineering and software architecture revolve around stakeholder concerns needs and wishes there is considerable overlap between requirements engineering and software architecture as evidenced for example by a study into five industrial software architecture methods that concludes that the inputs goals constrains etc are usually illdefined and only get discovered or better understood as the architecture starts to emerge and that while most architectural concerns are expressed as requirements on the system they can also include mandated design decisions23 in short the choice of required behavior given a particular problem impacts the architecture of the solution that addresses that problem while at the same time the architectural design may impact the problem and introduce new requirements42 approaches such as the twin peaks model 43 aim to exploit the synergistic relation between requirements and architecture other types of architectureedit main articles computer architecture systems architecture and enterprise architecture computer architecture computer architecture targets the internal structure of a computer system in terms of collaborating hardware components such as the cpu – or processor – the bus and the memory systems architecture the term systems architecture has originally been applied to the architecture of systems that consists of both hardware and software the main concern addressed by the systems architecture is then the integration of software and hardware in a complete correctly working device in another common – much broader – meaning the term applies to the architecture of any complex system which may be of technical sociotechnical or social nature enterprise architecture the goal of enterprise architecture is to translate business vision and strategy into effective enterprise44 enterprise architecture frameworks such as togaf and the zachman framework usually distinguish between different enterprise architecture layers although terminology differs from framework to framework many include at least a distinction between a business layer an application or information layer and a technology layer enterprise architecture addresses among others the alignment between these layers usually in a topdown approach see alsoedit architectural pattern computer science antipattern attributedriven design computer architecture distributed data management architecture distributed relational database architecture systems architecture systems design software architecture analysis method timetriggered system referencesedit a b c clements paul felix bachmann len bass david garlan james ivers reed little paulo merson robert nord judith stafford 2010 documenting software architectures views and beyond second edition boston addisonwesley isbn 0321552687  a b c d perry d e wolf a l 1992 foundations for the study of software architecture pdf acm sigsoft software engineering notes 17 4 40 doi101145141874141884  a b c d e f g h i j bass len paul clements rick kazman 2012 software architecture in practice third edition boston addisonwesley isbn 9780321815736  sei 2006 how do you define software architecture retrieved 20120912  garlan shaw 1994 an introduction to software architecture pdf retrieved 20120913  a b fowler m 2003 design – who needs an architect ieee software 20 5 11–44 doi101109ms20031231144  isoiecieee 42010 defining architecture isoarchitectureorg retrieved on 20130721 a b jansen a bosch j 2005 software architecture as a set of architectural design decisions 5th working ieeeifip conference on software architecture wicsa05 p 109 isbn 0769525482 doi101109wicsa200561  ali babar muhammad dingsoyr torgeir lago patricia van vliet hans 2009 software architecture knowledge management dordrecht heidelberg london new york springer isbn 9783642023736  a b c george fairbanks 2010 just enough software architecture marshall brainerd  a b isoiecieee 2011 isoiecieee 420102011 systems and software engineering – architecture description retrieved 20120912  muller gerrit august 20 2007 a reference architecture primer pdf gaudi site retrieved november 13 2015  angelov samuil grefen paul greefhorst danny a classification of software reference architectures analyzing their success and effectiveness proc of wicsaecsa 2009 ieee 141–150 doi101109wicsa20095290800 retrieved 13 november 2015  brooks jr frederick p 1975 the mythical manmonth essays on software engineering addisonwesley isbn 0201006502  a b obbink h kruchten p kozaczynski w postema h ran a dominick l kazman r hilliard r tracz w kahane e feb 6 2002 software architecture review and assessment sara report pdf retrieved november 1 2015  poort eltjo van vliet hans september 2012 rcda architecting as a risk and cost management discipline the journal of systems and software elsevier 85 9 1995–2013 doi101016jjss201203071  p naur and b randell ed 1969 software engineering report of a conference sponsored by the nato science committee garmisch germany 7–11 oct 1968 pdf brussels nato scientific affairs division retrieved 20121116  p kruchten h obbink j stafford 2006 the past present and future of software architecture retrieved 20121112  university of waterloo 2006 a very brief history of computer science retrieved 20060923  ieee transactions on software engineering 2006 introduction to the special issue on software architecture retrieved 20060923  garlan shaw 1994 an introduction to software architecture pdf retrieved 20060925  a b kruchten p 2008 what do software architects really do journal of systems and software 81 12 2413–2416 doi101016jjss200808025  a b c christine hofmeister philippe kruchten robert l nord henk obbink alexander ran pierre america 2007 a general model of software architecture design derived from five industrial approaches  a b isoiec 2011 isoiec 250102011 systems and software engineering – systems and software quality requirements and evaluation square – system and software quality models retrieved 20121008  osterwalder and pigneur 2004 an ontology for ebusiness models 65–97  chen lianping ali babar muhammad nuseibeh bashar 2013 characterizing architecturally significant requirements ieee software 30 2 38–45 doi101109ms2012174  woods e 2012 industrial architectural assessment using tara journal of systems and software 85 9 2034–2047 doi101016jjss201204055  maranzano j f rozsypal s a zimmerman g h warnken g w wirth p e weiss d m 2005 architecture reviews practice and experience ieee software 22 2 34 doi101109ms200528  babar ma dingsøyr t lago p vliet h van 2009 software architecture knowledge managementtheory and practice eds first edition springer isbn 9783642023736  tang a han j vasa r 2009 software architecture design reasoning a case for improved methodology support ieee software 26 2 43 doi101109ms200946  kruchten philippe 1995 november architectural blueprints — the 41 view model of software architecture ieee software 12 6 pp 42–50 a b shaw mary garlan david 1996 software architecture perspectives on an emerging discipline prentice hall isbn 9780131829572  uci software architecture research – uci software architecture research architectural styles isruciedu retrieved on 20130721 a b chapter 3 architectural patterns and styles msdnmicrosoftcom retrieved on 20130721 boehm barry turner richard 2004 balancing agility and discipline addisonwesley isbn 0321186125  ieee software special issue on agility and architecture april 2010 retrieved 14 september 2012  terra r mt valente k czarnecki and rs bigonha recommending refactorings to reverse software architecture erosion 16th european conference on software maintenance and reengineering 2012 httpgsduwaterloocasitesdefaultfilesfull20textpdf de silva l and d balasubramaniam controlling software architecture erosion a survey journal of systems and software 012012 85132–151 lungu m software architecture recovery university of lugano 2008 httpwwwslidesharenetmircealungusoftwarearchitecturerecoveryinfivequestionspresentation a b amnon h eden rick kazman 2003 architecture design implementation pdf  c shekaran d garlan m jackson nr mead c potts hb reubenstein 1994 the role of software architecture in requirements engineering  remco c de boer hans van vliet 2009 on the similarity between requirements and architecture  bashar nuseibeh 2001 weaving together requirements and architectures  definition of enterprise architecture gartner further readingedit paul clements felix bachmann len bass david garlan james ivers reed little paulo merson robert nord judith stafford documenting software architectures views and beyond second edition addisonwesley 2010 isbn 0321552687 this book describes what is software architecture and shows how to document it in multiple views using uml and other notations it also explains how to complement the architecture views with behavior software interface and rationale documentation accompanying the book is a wiki that contains an example of software architecture documentation len bass paul clements rick kazman software architecture in practice third edition addison wesley 2012 isbn 0321815734 this book now in third edition eloquently covers the fundamental concepts of the discipline the theme is centered on achieving quality attributes of a system amnon h eden rick kazman architecture design implementation on the distinction between architectural design and detailed design javier garzás and mario piattini an ontology for microarchitectural design knowledge ieee software magazine volume 22 issue 2 march–april 2005 pp 28 – 33 philippe kruchten architectural blueprints – the 41 view model of software architecture in ieee software 12 6 november 1995 pp 42–50 also available online at the rational websitepdf tony shan and winnie hua 2006 solution architecting mechanism proceedings of the 10th ieee international edoc enterprise computing conference edoc 2006 october 2006 p 23–32 martin fowler with ralph johnson who needs an architect ieee software julaug 2003 somf bell michael 2008 serviceoriented modeling service analysis design and architecture wiley  external linksedit wikimedia commons has media related to software architecture wikiquote has quotations related to software architecture explanation on ibm developerworks collection of software architecture definitions at software engineering institute sei carnegie mellon university cmu international association of it architects iasa global formerly known as the international association for software architects iasa softwarearchitectureportalorg — website of ifip working group 210 on software architecture softwarearchitecturescom — independent resource of information on the discipline software architecture chapter 1 of roy fieldings rest dissertation when good architecture goes bad the spiral architecture driven development – the sdlc based on spiral model is to reduce the risks of ineffective architecture v t e software engineering fields computer programming requirements engineering software deployment software design software maintenance software testing systems analysis formal methods concepts data modeling enterprise architecture functional specification modeling language orthogonality programming paradigm software software archaeology software architecture software configuration management software development methodology software development process software quality software quality assurance software verification and validation structured analysis orientations agile aspectoriented object orientation ontology service orientation sdlc models developmental agile eup executable uml incremental model iterative model prototype model rad up scrum spiral model vmodel waterfall model xp other spice cmmi data model er model function model information model metamodeling object model systems model view model languages idef uml usl sysml software engineers victor basili kent beck grady booch fred brooks barry boehm peter chen danese cooper ward cunningham tom demarco edsger w dijkstra delores m etter martin fowler adele goldstine margaret hamilton c a r hoare lois haibt mary jean harrold grace hopper watts humphrey michael a jackson ivar jacobson alan kay nancy leveson stephen j mellor bertrand meyer david parnas trygve reenskaug winston w royce james rumbaugh mary shaw peri tarr elaine weyuker niklaus wirth edward yourdon related fields computer science computer engineering project management risk management systems engineering category commons v t e edsger dijkstra publications structured programming book a discipline of programming book a method of programming book predicate calculus and program semantics book selected writings on computing a personal perspective book selected papers ewds ewd manuscripts 1 go to statement considered harmful on the cruelty of really teaching computer science main research areas theoretical computing science software engineering systems science algorithm design concurrent computing distributed computing formal methods programming methodology programming language research program design and development software architecture scientific contributions concepts and methods algol 60 implementation call stack concurrency concurrent programming cooperating sequential processes critical section deadly embrace deadlock dining philosophers problem dutch national flag problem faulttolerant system gotoless programming guarded commands guarded command language layered structure in software architecture levels of abstraction multithreaded programming mutual exclusion mutex philosophy of computer programming and computing science producer–consumer problem bounded buffer problem program families predicate transformer semantics process synchronization selfstabilizing distributed system semaphore programming separation of concerns sleeping barber problem software crisis structured analysis structured programming the multiprogramming system unbounded nondeterminism weakest precondition calculus algorithms bankers algorithm dijkstras algorithm djp algorithm prims algorithm dijkstrascholten algorithm dekkers algorithm generalization smoothsort shuntingyard algorithm tricolor marking algorithm concurrent algorithm distributed algorithm deadlock prevention algorithm selfstabilizing algorithm related people shlomi dolev per brinch hansen tony hoare olejohan dahl leslie lamport david parnas adriaan van wijngaarden niklaus wirth other topics dijkstra prize edsger w dijkstra prize in distributed computing centrum wiskunde informatica ew dijkstra archive university of texas at austin list of pioneers in computer science list of important publications in computer science list of important publications in theoretical computer science list of important publications in concurrent parallel and distributed computing 1 dijkstras numbered manuscripts on computing science wikiquote authority control gnd 41216775 retrieved from httpsenwikipediaorgwindexphptitlesoftwarearchitectureoldid800198237 categories software architecture edsger w dijkstra hidden categories wikipedia articles with gnd identifiers navigation menu personal tools not logged in talk contributions create account log in namespaces article talk variants views read edit view history more search navigation main page contents featured content current events random article donate to wikipedia wikipedia store interaction help about wikipedia community portal recent changes contact page tools what links here related changes upload file special pages permanent link page information wikidata item cite this page printexport create a book download as pdf printable version in other projects wikimedia commons wikiquote languages العربية български català dansk deutsch español فارسی français galego 한국어 bahasa indonesia עברית mirandés nederlands 日本語 polski português русский suomi తెలుగు türkçe українська tiếng việt 粵語 中文 edit links this page was last edited on 12 september 2017 at 0128 text is available under the creative commons attributionsharealike license additional terms may apply by using this site you agree to the terms of use and privacy policy wikipedia® is a registered trademark of the wikimedia foundation inc a nonprofit organization privacy policy about wikipedia disclaimers contact wikipedia developers cookie statement mobile view 
https://en.wikipedia.org/wiki/Software_architecture
https://en.wikipedia.org/wiki/Software_architecture
https://en.wikipedia.org/wiki/Software_development
https://en.wikipedia.org/wiki/Software_development_process
https://en.wikipedia.org/wiki/Requirements_analysis
https://en.wikipedia.org/wiki/Software_design
https://en.wikipedia.org/wiki/Software_engineering
https://en.wikipedia.org/wiki/Software_construction
https://en.wikipedia.org/wiki/Software_testing
https://en.wikipedia.org/wiki/Debugging
https://en.wikipedia.org/wiki/Software_deployment
https://en.wikipedia.org/wiki/Software_maintenance
https://en.wikipedia.org/wiki/Software_prototyping
https://en.wikipedia.org/wiki/Cleanroom_software_engineering
https://en.wikipedia.org/wiki/Incremental_build_model
https://en.wikipedia.org/wiki/Waterfall_model
https://en.wikipedia.org/wiki/Agile_software_development
https://en.wikipedia.org/wiki/Spiral_model
https://en.wikipedia.org/wiki/Software_development_methodology
https://en.wikipedia.org/wiki/Rapid_application_development
https://en.wikipedia.org/wiki/Unified_Process
https://en.wikipedia.org/wiki/Extreme_programming
https://en.wikipedia.org/wiki/Team_software_process
https://en.wikipedia.org/wiki/Personal_software_process
https://en.wikipedia.org/wiki/Dynamic_systems_development_method
https://en.wikipedia.org/wiki/Microsoft_Solutions_Framework
https://en.wikipedia.org/wiki/Scrum_(software_development)
https://en.wikipedia.org/wiki/Kanban_(development)
https://en.wikipedia.org/wiki/V-Model_(software_development)
https://en.wikipedia.org/wiki/Test-driven_development
https://en.wikipedia.org/wiki/Acceptance_test–driven_development
https://en.wikipedia.org/wiki/Behavior-driven_development
https://en.wikipedia.org/wiki/Feature-driven_development
https://en.wikipedia.org/wiki/Domain-driven_design
https://en.wikipedia.org/wiki/Model-driven_development
https://en.wikipedia.org/wiki/Iterative_and_incremental_development
https://en.wikipedia.org/wiki/Lean_software_development
https://en.wikipedia.org/wiki/DevOps
https://en.wikipedia.org/wiki/Scaled_Agile_Framework
https://en.wikipedia.org/wiki/Software_configuration_management
https://en.wikipedia.org/wiki/Software_documentation
https://en.wikipedia.org/wiki/Software_quality_assurance
https://en.wikipedia.org/wiki/Software_project_management
https://en.wikipedia.org/wiki/User_experience
https://en.wikipedia.org/wiki/Programming_tool
https://en.wikipedia.org/wiki/Compiler
https://en.wikipedia.org/wiki/Debugger
https://en.wikipedia.org/wiki/Profiling_(computer_programming)
https://en.wikipedia.org/wiki/Graphical_user_interface_builder
https://en.wikipedia.org/wiki/UML_tools
https://en.wikipedia.org/wiki/Integrated_development_environment
https://en.wikipedia.org/wiki/Build_automation
https://en.wikipedia.org/wiki/Application_release_automation
https://en.wikipedia.org/wiki/Infrastructure_as_Code
https://en.wikipedia.org/wiki/Category:Software_testing_tools
https://en.wikipedia.org/wiki/CMMI
https://en.wikipedia.org/wiki/IEEE_Standards_Association
https://en.wikipedia.org/wiki/ISO_9001
https://en.wikipedia.org/wiki/ISO/IEC_JTC_1/SC_7
https://en.wikipedia.org/wiki/SWEBOK
https://en.wikipedia.org/wiki/PMBOK
https://en.wikipedia.org/wiki/BABOK
https://en.wikipedia.org/wiki/Template:Software_development_process
https://en.wikipedia.org/wiki/Template_talk:Software_development_process
https://en.wikipedia.org/w/index.php?title=Template:Software_development_process&action=edit
https://en.wikipedia.org/wiki/Software_system
https://en.wikipedia.org/wiki/Software_architecture
https://en.wikipedia.org/wiki/Architecture
https://en.wikipedia.org/wiki/Software_architecture
https://en.wikipedia.org/wiki/Space_shuttle
https://en.wikipedia.org/wiki/Real-time_computing
https://en.wikipedia.org/wiki/Stakeholder_(corporate)
https://en.wikipedia.org/wiki/Software_architecture
https://en.wikipedia.org/wiki/Software_architecture
https://en.wikipedia.org/wiki/Software_architecture
https://en.wikipedia.org/wiki/Software_architecture
https://en.wikipedia.org/wiki/Software_architecture
https://en.wikipedia.org/wiki/Software_architecture
https://en.wikipedia.org/wiki/Software_architecture
https://en.wikipedia.org/wiki/Software_architecture
https://en.wikipedia.org/wiki/Software_architecture
https://en.wikipedia.org/wiki/Software_architecture
https://en.wikipedia.org/wiki/Software_architecture
https://en.wikipedia.org/wiki/Software_architecture
https://en.wikipedia.org/wiki/Software_architecture
https://en.wikipedia.org/wiki/Software_architecture
https://en.wikipedia.org/wiki/Software_architecture
https://en.wikipedia.org/wiki/Software_architecture
https://en.wikipedia.org/wiki/Software_architecture
https://en.wikipedia.org/wiki/Software_architecture
https://en.wikipedia.org/wiki/Software_architecture
https://en.wikipedia.org/wiki/Software_architecture
https://en.wikipedia.org/wiki/Software_architecture
https://en.wikipedia.org/wiki/Software_architecture
https://en.wikipedia.org/wiki/Software_architecture
https://en.wikipedia.org/wiki/Software_architecture
https://en.wikipedia.org/w/index.php?title=Software_architecture&action=edit&section=1
https://en.wikipedia.org/wiki/Software_architecture
https://en.wikipedia.org/wiki/Software_architecture
https://en.wikipedia.org/wiki/Abstraction_(computer_science)
https://en.wikipedia.org/wiki/Software_architecture
https://en.wikipedia.org/wiki/Software_architecture
https://en.wikipedia.org/wiki/Software_architecture
https://en.wikipedia.org/wiki/Software_architecture
https://en.wikipedia.org/wiki/Knowledge_management
https://en.wikipedia.org/wiki/Software_architecture
https://en.wikipedia.org/wiki/Software_architecture
https://en.wikipedia.org/wiki/Software_architecture
https://en.wikipedia.org/w/index.php?title=Software_architecture&action=edit&section=2
https://en.wikipedia.org/wiki/Software_architecture
https://en.wikipedia.org/wiki/Software_architecture
https://en.wikipedia.org/wiki/4+1_Architectural_View_Model
https://en.wikipedia.org/wiki/Software_design
https://en.wikipedia.org/wiki/Jackson_Structured_Programming
https://en.wikipedia.org/wiki/Software_architecture
https://en.wikipedia.org/wiki/Quality_attributes
https://en.wikipedia.org/wiki/Fault-tolerance
https://en.wikipedia.org/wiki/Backward_compatibility
https://en.wikipedia.org/wiki/Extensibility
https://en.wikipedia.org/wiki/Reliability_(engineering)
https://en.wikipedia.org/wiki/Maintainability
https://en.wikipedia.org/wiki/Availability
https://en.wikipedia.org/wiki/Ilities
https://en.wikipedia.org/wiki/Requirements
https://en.wikipedia.org/wiki/Non-functional_requirements
https://en.wikipedia.org/wiki/Software_architecture
https://en.wikipedia.org/wiki/Software_architecture
https://en.wikipedia.org/wiki/Reference_architecture
https://en.wikipedia.org/wiki/Software_architecture
https://en.wikipedia.org/wiki/Software_architecture
https://en.wikipedia.org/wiki/Architectural_pattern
https://en.wikipedia.org/wiki/Software_architecture
https://en.wikipedia.org/wiki/The_Mythical_Man-Month
https://en.wikipedia.org/wiki/The_Mythical_Man-Month
https://en.wikipedia.org/wiki/Software_architecture
https://en.wikipedia.org/w/index.php?title=Software_architecture&action=edit&section=3
https://en.wikipedia.org/wiki/Software_architecture
https://en.wikipedia.org/wiki/Software_architecture
https://en.wikipedia.org/wiki/Software_architecture
https://en.wikipedia.org/wiki/ATAM
https://en.wikipedia.org/wiki/Software_architecture
https://en.wikipedia.org/wiki/Software_architecture
https://en.wikipedia.org/wiki/Software_architecture
https://en.wikipedia.org/wiki/Cost_overrun
https://en.wikipedia.org/wiki/Software_architecture
https://en.wikipedia.org/wiki/Risk_management
https://en.wikipedia.org/wiki/Software_architecture
https://en.wikipedia.org/wiki/Cost_reduction
https://en.wikipedia.org/wiki/Software_architecture
https://en.wikipedia.org/w/index.php?title=Software_architecture&action=edit&section=4
https://en.wikipedia.org/wiki/Software_architecture
https://en.wikipedia.org/wiki/Software_architecture
https://en.wikipedia.org/wiki/Computer_science
https://en.wikipedia.org/wiki/Software_architecture
https://en.wikipedia.org/wiki/Data_structure
https://en.wikipedia.org/wiki/Algorithm
https://en.wikipedia.org/wiki/Separation_of_concerns
https://en.wikipedia.org/wiki/Software_engineering
https://en.wikipedia.org/wiki/Diagram
https://en.wikipedia.org/wiki/Software_architecture
https://en.wikipedia.org/wiki/Edsger_Dijkstra
https://en.wikipedia.org/wiki/David_Parnas
https://en.wikipedia.org/wiki/Patterns
https://en.wikipedia.org/wiki/Architecture_description_language
https://en.wikipedia.org/wiki/Software_documentation
https://en.wikipedia.org/wiki/Formal_method
https://en.wikipedia.org/wiki/Software_architecture
https://en.wikipedia.org/wiki/Mary_Shaw_(computer_scientist)
https://en.wikipedia.org/wiki/Carnegie_Mellon
https://en.wikipedia.org/wiki/Software_component
https://en.wikipedia.org/wiki/University_of_California,_Irvine
https://en.wikipedia.org/wiki/IEEE_1471
https://en.wikipedia.org/wiki/IEEE_1471
https://en.wikipedia.org/wiki/ISO/IEC_42010
https://en.wikipedia.org/wiki/Software_architecture
https://en.wikipedia.org/wiki/IEEE_1471
https://en.wikipedia.org/wiki/ISO/IEC_15288
https://en.wikipedia.org/wiki/ISO/IEC_12207
https://en.wikipedia.org/wiki/Enterprise_Architecture
https://en.wikipedia.org/wiki/Solution_Architecture
https://en.wikipedia.org/w/index.php?title=Software_architecture&action=edit&section=5
https://en.wikipedia.org/wiki/Architecturally_Significant_Requirements
https://en.wikipedia.org/wiki/Software_architecture
https://en.wikipedia.org/wiki/Software_architecture
https://en.wikipedia.org/wiki/ISO/IEC_25010
https://en.wikipedia.org/wiki/Software_architecture
https://en.wikipedia.org/wiki/Software_architecture
https://en.wikipedia.org/wiki/Software_architecture
https://en.wikipedia.org/wiki/Architecturally_Significant_Requirements
https://en.wikipedia.org/wiki/Software_architecture
https://en.wikipedia.org/wiki/Architecturally_Significant_Requirements
https://en.wikipedia.org/wiki/Software_architecture
https://en.wikipedia.org/wiki/Software_architecture
https://en.wikipedia.org/wiki/Architecture_tradeoff_analysis_method
https://en.wikipedia.org/wiki/Software_architecture
https://en.wikipedia.org/wiki/Software_architecture
https://en.wikipedia.org/wiki/Software_architecture
https://en.wikipedia.org/w/index.php?title=Software_architecture&action=edit&section=6
https://en.wikipedia.org/wiki/Software_architecture
https://en.wikipedia.org/wiki/Software_architecture
https://en.wikipedia.org/wiki/Software_architecture
https://en.wikipedia.org/wiki/Software_architecture
https://en.wikipedia.org/wiki/Software_architecture
https://en.wikipedia.org/wiki/Software_architecture
https://en.wikipedia.org/w/index.php?title=Software_architecture&action=edit&section=7
https://en.wikipedia.org/w/index.php?title=Software_architecture&action=edit&section=8
https://en.wikipedia.org/wiki/Software_architecture_description
https://en.wikipedia.org/w/index.php?title=Software_architecture&action=edit&section=9
https://en.wikipedia.org/wiki/Architecture_description_language
https://en.wikipedia.org/wiki/ISO/IEC_42010
https://en.wikipedia.org/wiki/Architecture_analysis_and_design_language
https://en.wikipedia.org/wiki/Wright_(ADL)
https://en.wikipedia.org/w/index.php?title=Acme_(ADL)&action=edit&redlink=1
https://en.wikipedia.org/wiki/Darwin_(ADL)
https://en.wikipedia.org/wiki/Imperial_College_London
https://en.wikipedia.org/wiki/National_Sun_Yat-Sen_University
https://en.wikipedia.org/w/index.php?title=ByADL_(ADL)&action=edit&redlink=1
https://en.wikipedia.org/w/index.php?title=Software_architecture&action=edit&section=10
https://en.wikipedia.org/wiki/View_model
https://en.wikipedia.org/wiki/File:4+1_Architectural_View_Model.svg
https://en.wikipedia.org/wiki/File:4+1_Architectural_View_Model.svg
https://en.wikipedia.org/wiki/4+1_Architectural_View_Model
https://en.wikipedia.org/wiki/View_model
https://en.wikipedia.org/wiki/Blueprint
https://en.wikipedia.org/wiki/Architecture
https://en.wikipedia.org/wiki/ISO/IEC_42010
https://en.wikipedia.org/w/index.php?title=Software_architecture&action=edit&section=11
https://en.wikipedia.org/wiki/Architecture_framework
https://en.wikipedia.org/wiki/ISO/IEC_42010
https://en.wikipedia.org/w/index.php?title=Software_architecture&action=edit&section=12
https://en.wikipedia.org/wiki/Software_Architecture_styles_and_patterns
https://en.wikipedia.org/wiki/Architectural_pattern
https://en.wikipedia.org/wiki/Design_pattern_(computer_science)
https://en.wikipedia.org/wiki/Architectural_style
https://en.wikipedia.org/wiki/Software_architecture
https://en.wikipedia.org/wiki/Software_architecture
https://en.wikipedia.org/wiki/Blackboard_(computing)
https://en.wikipedia.org/wiki/Client–server_model
https://en.wikipedia.org/wiki/Three-tier_(computing)
https://en.wikipedia.org/wiki/N-tier
https://en.wikipedia.org/wiki/Cloud_computing
https://en.wikipedia.org/wiki/Software_componentry
https://en.wikipedia.org/wiki/Database-centric_architecture
https://en.wikipedia.org/wiki/Event-driven_architecture
https://en.wikipedia.org/wiki/Implicit_invocation
https://en.wikipedia.org/wiki/Abstraction_(computer_science)
https://en.wikipedia.org/wiki/Multilayered_architecture
https://en.wikipedia.org/wiki/Monolithic_application
https://en.wikipedia.org/wiki/Peer-to-peer
https://en.wikipedia.org/wiki/Pipes_and_filters
https://en.wikipedia.org/wiki/Plug-in_(computing)
https://en.wikipedia.org/wiki/Representational_state_transfer
https://en.wikipedia.org/wiki/Rule-based_system
https://en.wikipedia.org/wiki/Service-oriented_architecture
https://en.wikipedia.org/wiki/Microservices
https://en.wikipedia.org/wiki/Shared_nothing_architecture
https://en.wikipedia.org/wiki/Space-based_architecture
https://en.wikipedia.org/wiki/Software_architecture
https://en.wikipedia.org/wiki/Software_architecture
https://en.wikipedia.org/wiki/Software_architecture
https://en.wikipedia.org/w/index.php?title=Software_architecture&action=edit&section=13
https://en.wikipedia.org/wiki/Agile_development
https://en.wikipedia.org/wiki/Big_Design_Up_Front
https://en.wikipedia.org/wiki/Agile_software_development
https://en.wikipedia.org/wiki/Software_architecture
https://en.wikipedia.org/wiki/Dynamic_systems_development_method
https://en.wikipedia.org/wiki/IEEE_Software
https://en.wikipedia.org/wiki/Software_architecture
https://en.wikipedia.org/w/index.php?title=Software_architecture&action=edit&section=14
https://en.wikipedia.org/wiki/Software_architecture
https://en.wikipedia.org/wiki/Software_architecture
https://en.wikipedia.org/wiki/Technical_debt
https://en.wikipedia.org/wiki/Abstraction_(computer_science)
https://en.wikipedia.org/wiki/Software_architecture
https://en.wikipedia.org/wiki/Domain-specific_language
https://en.wikipedia.org/w/index.php?title=Software_architecture&action=edit&section=15
https://en.wikipedia.org/wiki/Software_architecture_recovery
https://en.wikipedia.org/wiki/Reverse_engineering
https://en.wikipedia.org/wiki/Software_architecture
https://en.wikipedia.org/wiki/Software_architecture
https://en.wikipedia.org/w/index.php?title=Software_architecture&action=edit&section=16
https://en.wikipedia.org/w/index.php?title=Software_architecture&action=edit&section=17
https://en.wikipedia.org/wiki/Software_design
https://en.wikipedia.org/wiki/Software_design
https://en.wikipedia.org/wiki/Software_architecture
https://en.wikipedia.org/wiki/Software_architecture
https://en.wikipedia.org/wiki/Software_architecture
https://en.wikipedia.org/wiki/Client–server
https://en.wikipedia.org/wiki/Peer-to-peer
https://en.wikipedia.org/w/index.php?title=Software_architecture&action=edit&section=18
https://en.wikipedia.org/wiki/Requirements_engineering
https://en.wikipedia.org/wiki/Requirements_engineering
https://en.wikipedia.org/wiki/Solution_space
https://en.wikipedia.org/wiki/Problem
https://en.wikipedia.org/wiki/Software_architecture
https://en.wikipedia.org/wiki/Requirements_elicitation
https://en.wikipedia.org/wiki/Requirements_analysis
https://en.wikipedia.org/wiki/Software_Requirements_Specification
https://en.wikipedia.org/wiki/Data_validation
https://en.wikipedia.org/wiki/Requirements_traceability
https://en.wikipedia.org/wiki/Requirements_management
https://en.wikipedia.org/wiki/Requirement
https://en.wikipedia.org/wiki/Stakeholder_(corporate)
https://en.wikipedia.org/wiki/Software_architecture
https://en.wikipedia.org/wiki/Software_architecture
https://en.wikipedia.org/wiki/Software_architecture
https://en.wikipedia.org/wiki/Synergy
https://en.wikipedia.org/w/index.php?title=Software_architecture&action=edit&section=19
https://en.wikipedia.org/wiki/Computer_architecture
https://en.wikipedia.org/wiki/Systems_architecture
https://en.wikipedia.org/wiki/Enterprise_architecture
https://en.wikipedia.org/wiki/Computer_architecture
https://en.wikipedia.org/wiki/Central_processing_unit
https://en.wikipedia.org/wiki/Bus_(computing)
https://en.wikipedia.org/wiki/Computer_memory
https://en.wikipedia.org/wiki/Systems_architecture
https://en.wikipedia.org/wiki/System
https://en.wikipedia.org/wiki/Software
https://en.wikipedia.org/wiki/Sociotechnical_system
https://en.wikipedia.org/wiki/Enterprise_architecture
https://en.wikipedia.org/wiki/Software_architecture
https://en.wikipedia.org/wiki/Architecture_framework
https://en.wikipedia.org/wiki/TOGAF
https://en.wikipedia.org/wiki/Zachman_Framework
https://en.wikipedia.org/wiki/Business
https://en.wikipedia.org/wiki/Application_software
https://en.wikipedia.org/wiki/Information
https://en.wikipedia.org/wiki/Technology
https://en.wikipedia.org/w/index.php?title=Software_architecture&action=edit&section=20
https://en.wikipedia.org/wiki/Architectural_pattern_(computer_science)
https://en.wikipedia.org/wiki/Anti-pattern
https://en.wikipedia.org/wiki/Attribute-driven_design
https://en.wikipedia.org/wiki/Computer_architecture
https://en.wikipedia.org/wiki/Distributed_Data_Management_Architecture
https://en.wikipedia.org/wiki/DRDA
https://en.wikipedia.org/wiki/Systems_architecture
https://en.wikipedia.org/wiki/Systems_design
https://en.wikipedia.org/wiki/Software_Architecture_Analysis_Method
https://en.wikipedia.org/wiki/Time-triggered_system
https://en.wikipedia.org/w/index.php?title=Software_architecture&action=edit&section=21
https://en.wikipedia.org/wiki/Software_architecture
https://en.wikipedia.org/wiki/Software_architecture
https://en.wikipedia.org/wiki/Software_architecture
https://en.wikipedia.org/wiki/Len_Bass
https://en.wikipedia.org/wiki/International_Standard_Book_Number
https://en.wikipedia.org/wiki/Special:BookSources/0-321-55268-7
https://en.wikipedia.org/wiki/Software_architecture
https://en.wikipedia.org/wiki/Software_architecture
https://en.wikipedia.org/wiki/Software_architecture
https://en.wikipedia.org/wiki/Software_architecture
https://en.wikipedia.org/wiki/Alexander_L._Wolf
http://users.ece.utexas.edu/~perry/work/papers/swa-sen.pdf
https://en.wikipedia.org/wiki/ACM_SIGSOFT_Software_Engineering_Notes
https://en.wikipedia.org/wiki/Digital_object_identifier
https://doi.org/10.1145/141874.141884
https://en.wikipedia.org/wiki/Software_architecture
https://en.wikipedia.org/wiki/Software_architecture
https://en.wikipedia.org/wiki/Software_architecture
https://en.wikipedia.org/wiki/Software_architecture
https://en.wikipedia.org/wiki/Software_architecture
https://en.wikipedia.org/wiki/Software_architecture
https://en.wikipedia.org/wiki/Software_architecture
https://en.wikipedia.org/wiki/Software_architecture
https://en.wikipedia.org/wiki/Software_architecture
https://en.wikipedia.org/wiki/Software_architecture
https://en.wikipedia.org/wiki/International_Standard_Book_Number
https://en.wikipedia.org/wiki/Special:BookSources/978-0-321-81573-6
https://en.wikipedia.org/wiki/Software_architecture
http://www.sei.cmu.edu/architecture/start/glossary/definition-form.cfm
https://en.wikipedia.org/wiki/Software_architecture
http://www.cs.cmu.edu/afs/cs/project/able/ftp/intro_softarch/intro_softarch.pdf
https://en.wikipedia.org/wiki/Software_architecture
https://en.wikipedia.org/wiki/Software_architecture
https://en.wikipedia.org/wiki/Digital_object_identifier
https://doi.org/10.1109/MS.2003.1231144
https://en.wikipedia.org/wiki/Software_architecture
http://www.iso-architecture.org/42010/defining-architecture.html
https://en.wikipedia.org/wiki/Software_architecture
https://en.wikipedia.org/wiki/Software_architecture
https://en.wikipedia.org/wiki/International_Standard_Book_Number
https://en.wikipedia.org/wiki/Special:BookSources/0-7695-2548-2
https://en.wikipedia.org/wiki/Digital_object_identifier
https://doi.org/10.1109/WICSA.2005.61
https://en.wikipedia.org/wiki/Software_architecture
https://en.wikipedia.org/wiki/International_Standard_Book_Number
https://en.wikipedia.org/wiki/Special:BookSources/978-3-642-02373-6
https://en.wikipedia.org/wiki/Software_architecture
https://en.wikipedia.org/wiki/Software_architecture
https://en.wikipedia.org/wiki/Software_architecture
https://en.wikipedia.org/wiki/Software_architecture
https://en.wikipedia.org/wiki/Software_architecture
http://www.iso.org/iso/catalogue_detail.htm?csnumber=50508
https://en.wikipedia.org/wiki/Software_architecture
http://www.gaudisite.nl/ReferenceArchitecturePrimerPaper.pdf
https://en.wikipedia.org/wiki/Software_architecture
https://dx.doi.org/10.1109/WICSA.2009.5290800
https://en.wikipedia.org/wiki/Digital_object_identifier
https://doi.org/10.1109/WICSA.2009.5290800
https://en.wikipedia.org/wiki/Software_architecture
https://en.wikipedia.org/wiki/The_Mythical_Man-Month
https://en.wikipedia.org/wiki/International_Standard_Book_Number
https://en.wikipedia.org/wiki/Special:BookSources/0-201-00650-2
https://en.wikipedia.org/wiki/Software_architecture
https://en.wikipedia.org/wiki/Software_architecture
https://pkruchten.files.wordpress.com/2011/09/sarav1.pdf
https://en.wikipedia.org/wiki/Software_architecture
https://en.wikipedia.org/wiki/Digital_object_identifier
https://doi.org/10.1016/j.jss.2012.03.071
https://en.wikipedia.org/wiki/Software_architecture
http://homepages.cs.ncl.ac.uk/brian.randell/NATO/nato1968.PDF
https://en.wikipedia.org/wiki/Software_architecture
https://dx.doi.org/10.1109/MS.2006.59
https://en.wikipedia.org/wiki/Software_architecture
http://www.cs.uwaterloo.ca/~shallit/Courses/134/history.html
https://en.wikipedia.org/wiki/Software_architecture
http://csdl2.computer.org/persagen/DLAbsToc.jsp?resourcePath=/dl/trans/ts/&toc=comp/trans/ts/1995/04/e4toc.xml&DOI=10.1109/TSE.1995.10003
https://en.wikipedia.org/wiki/Software_architecture
http://www.cs.cmu.edu/afs/cs/project/able/ftp/intro_softarch/intro_softarch.pdf
https://en.wikipedia.org/wiki/Software_architecture
https://en.wikipedia.org/wiki/Software_architecture
https://en.wikipedia.org/wiki/Digital_object_identifier
https://doi.org/10.1016/j.jss.2008.08.025
https://en.wikipedia.org/wiki/Software_architecture
https://en.wikipedia.org/wiki/Software_architecture
https://en.wikipedia.org/wiki/Software_architecture
http://dl.acm.org/citation.cfm?id=1222045
https://en.wikipedia.org/wiki/Software_architecture
https://en.wikipedia.org/wiki/Software_architecture
http://www.iso.org/iso/iso_catalogue/catalogue_tc/catalogue_detail.htm?csnumber=35733
https://en.wikipedia.org/wiki/Software_architecture
https://en.wikipedia.org/wiki/Software_architecture
http://ieeexplore.ieee.org/xpl/articleDetails.jsp?arnumber=6365165
https://en.wikipedia.org/wiki/Digital_object_identifier
https://doi.org/10.1109/MS.2012.174
https://en.wikipedia.org/wiki/Software_architecture
https://en.wikipedia.org/wiki/Digital_object_identifier
https://doi.org/10.1016/j.jss.2012.04.055
https://en.wikipedia.org/wiki/Software_architecture
https://en.wikipedia.org/wiki/Digital_object_identifier
https://doi.org/10.1109/MS.2005.28
https://en.wikipedia.org/wiki/Software_architecture
https://en.wikipedia.org/wiki/International_Standard_Book_Number
https://en.wikipedia.org/wiki/Special:BookSources/978-3-642-02373-6
https://en.wikipedia.org/wiki/Software_architecture
https://en.wikipedia.org/wiki/Digital_object_identifier
https://doi.org/10.1109/MS.2009.46
https://en.wikipedia.org/wiki/Software_architecture
http://www.cs.ubc.ca/~gregor/teaching/papers/4+1view-architecture.pdf
https://en.wikipedia.org/wiki/Software_architecture
https://en.wikipedia.org/wiki/Software_architecture
https://en.wikipedia.org/wiki/International_Standard_Book_Number
https://en.wikipedia.org/wiki/Special:BookSources/978-0-13-182957-2
https://en.wikipedia.org/wiki/Software_architecture
http://www.isr.uci.edu/architecture/styles.html
https://en.wikipedia.org/wiki/Software_architecture
https://en.wikipedia.org/wiki/Software_architecture
http://msdn.microsoft.com/en-us/library/ee658117.aspx
https://en.wikipedia.org/wiki/Software_architecture
https://en.wikipedia.org/wiki/International_Standard_Book_Number
https://en.wikipedia.org/wiki/Special:BookSources/0-321-18612-5
https://en.wikipedia.org/wiki/Software_architecture
http://www.computer.org/portal/web/computingnow/archive/april2010
https://en.wikipedia.org/wiki/Software_architecture
http://gsd.uwaterloo.ca/sites/default/files/Full%20Text.pdf
https://en.wikipedia.org/wiki/Software_architecture
https://en.wikipedia.org/wiki/Software_architecture
http://www.slideshare.net/mircea.lungu/software-architecture-recovery-in-five-questions-presentation
https://en.wikipedia.org/wiki/Software_architecture
https://en.wikipedia.org/wiki/Software_architecture
http://www.eden-study.org/articles/2003/icse03.pdf
https://en.wikipedia.org/wiki/Software_architecture
https://dx.doi.org/10.1109/ICRE.1994.292379
https://en.wikipedia.org/wiki/Software_architecture
https://en.wikipedia.org/wiki/Hans_van_Vliet
https://dx.doi.org/10.1016/j.jss.2008.11.185
https://en.wikipedia.org/wiki/Software_architecture
https://dx.doi.org/10.1109/2.910904
https://en.wikipedia.org/wiki/Software_architecture
http://www.gartner.com/technology/it-glossary/enterprise-architecture.jsp
https://en.wikipedia.org/w/index.php?title=Software_architecture&action=edit&section=22
https://en.wikipedia.org/wiki/International_Standard_Book_Number
https://en.wikipedia.org/wiki/Special:BookSources/0-321-55268-7
https://wiki.sei.cmu.edu/sad/index.php/The_Adventure_Builder_SAD
https://en.wikipedia.org/wiki/International_Standard_Book_Number
https://en.wikipedia.org/wiki/Special:BookSources/0-321-81573-4
http://www.eden-study.org/articles/2003/icse03.pdf
https://en.wikipedia.org/wiki/IEEE_Software
http://www3.software.ibm.com/ibmdl/pub/software/rational/web/whitepapers/2003/Pbk4p1.pdf
http://doi.ieeecomputersociety.org/10.1109/EDOC.2006.54
http://martinfowler.com/ieeeSoftware/whoNeedsArchitect.pdf
https://www.amazon.com/Service-Oriented-Modeling-Service-Analysis-Architecture/dp/0470141115/ref=pd_bbs_2
https://en.wikipedia.org/w/index.php?title=Software_architecture&action=edit&section=23
https://commons.wikimedia.org/wiki/Category:Software_architecture
https://en.wikiquote.org/wiki/Special:Search/Software_architecture
http://www.ibm.com/developerworks/rational/library/feb06/eeles/
http://www.sei.cmu.edu/architecture/start/definitions.cfm
https://en.wikipedia.org/wiki/Software_Engineering_Institute
https://en.wikipedia.org/wiki/Carnegie_Mellon_University
http://www.iasaglobal.org/
http://www.softwarearchitectureportal.org/
https://en.wikipedia.org/wiki/IFIP_Working_Group_2.10
http://www.softwarearchitectures.com/
http://www.ics.uci.edu/~fielding/pubs/dissertation/software_arch.htm
https://en.wikipedia.org/wiki/Roy_Fielding
http://www.methodsandtools.com/archive/archive.php?id=85
http://sadd.codeplex.com
https://en.wikipedia.org/wiki/Systems_Development_Life_Cycle
https://en.wikipedia.org/wiki/Spiral_model
https://en.wikipedia.org/wiki/Template:Software_engineering
https://en.wikipedia.org/wiki/Template_talk:Software_engineering
https://en.wikipedia.org/w/index.php?title=Template:Software_engineering&action=edit
https://en.wikipedia.org/wiki/Software_engineering
https://en.wikipedia.org/wiki/Computer_programming
https://en.wikipedia.org/wiki/Requirements_engineering
https://en.wikipedia.org/wiki/Software_deployment
https://en.wikipedia.org/wiki/Software_design
https://en.wikipedia.org/wiki/Software_maintenance
https://en.wikipedia.org/wiki/Software_testing
https://en.wikipedia.org/wiki/Systems_analysis
https://en.wikipedia.org/wiki/Formal_methods
https://en.wikipedia.org/wiki/Data_modeling
https://en.wikipedia.org/wiki/Enterprise_architecture
https://en.wikipedia.org/wiki/Functional_specification
https://en.wikipedia.org/wiki/Modeling_language
https://en.wikipedia.org/wiki/Orthogonality_(programming)
https://en.wikipedia.org/wiki/Programming_paradigm
https://en.wikipedia.org/wiki/Software
https://en.wikipedia.org/wiki/Software_archaeology
https://en.wikipedia.org/wiki/Software_configuration_management
https://en.wikipedia.org/wiki/Software_development_process
https://en.wikipedia.org/wiki/Software_development_process
https://en.wikipedia.org/wiki/Software_quality
https://en.wikipedia.org/wiki/Software_quality_assurance
https://en.wikipedia.org/wiki/Software_verification_and_validation
https://en.wikipedia.org/wiki/Structured_analysis
https://en.wikipedia.org/wiki/Agile_software_development
https://en.wikipedia.org/wiki/Aspect-oriented_software_development
https://en.wikipedia.org/wiki/Object-oriented_programming
https://en.wikipedia.org/wiki/Ontology_(information_science)
https://en.wikipedia.org/wiki/Service-oriented_architecture
https://en.wikipedia.org/wiki/Systems_development_life_cycle
https://en.wikipedia.org/wiki/Agile_software_development
https://en.wikipedia.org/wiki/Enterprise_Unified_Process
https://en.wikipedia.org/wiki/Executable_UML
https://en.wikipedia.org/wiki/Incremental_build_model
https://en.wikipedia.org/wiki/Iterative_and_incremental_development
https://en.wikipedia.org/wiki/Software_prototyping
https://en.wikipedia.org/wiki/Rapid_application_development
https://en.wikipedia.org/wiki/Unified_Process
https://en.wikipedia.org/wiki/Scrum_(software_development)
https://en.wikipedia.org/wiki/Spiral_model
https://en.wikipedia.org/wiki/V-Model_(software_development)
https://en.wikipedia.org/wiki/Waterfall_model
https://en.wikipedia.org/wiki/Extreme_programming
https://en.wikipedia.org/wiki/ISO/IEC_15504
https://en.wikipedia.org/wiki/Capability_Maturity_Model_Integration
https://en.wikipedia.org/wiki/Data_model
https://en.wikipedia.org/wiki/Entity–relationship_model
https://en.wikipedia.org/wiki/Function_model
https://en.wikipedia.org/wiki/Information_model
https://en.wikipedia.org/wiki/Metamodeling
https://en.wikipedia.org/wiki/Object_model
https://en.wikipedia.org/wiki/Systems_modeling
https://en.wikipedia.org/wiki/View_model
https://en.wikipedia.org/wiki/IDEF
https://en.wikipedia.org/wiki/Unified_Modeling_Language
https://en.wikipedia.org/wiki/Universal_Systems_Language
https://en.wikipedia.org/wiki/Systems_Modeling_Language
https://en.wikipedia.org/wiki/Victor_Basili
https://en.wikipedia.org/wiki/Kent_Beck
https://en.wikipedia.org/wiki/Grady_Booch
https://en.wikipedia.org/wiki/Fred_Brooks
https://en.wikipedia.org/wiki/Barry_Boehm
https://en.wikipedia.org/wiki/Peter_Chen
https://en.wikipedia.org/wiki/Danese_Cooper
https://en.wikipedia.org/wiki/Ward_Cunningham
https://en.wikipedia.org/wiki/Tom_DeMarco
https://en.wikipedia.org/wiki/Edsger_W._Dijkstra
https://en.wikipedia.org/wiki/Delores_M._Etter
https://en.wikipedia.org/wiki/Martin_Fowler
https://en.wikipedia.org/wiki/Adele_Goldstine
https://en.wikipedia.org/wiki/Margaret_Hamilton_(scientist)
https://en.wikipedia.org/wiki/Tony_Hoare
https://en.wikipedia.org/wiki/Lois_Haibt
https://en.wikipedia.org/wiki/Mary_Jean_Harrold
https://en.wikipedia.org/wiki/Grace_Hopper
https://en.wikipedia.org/wiki/Watts_Humphrey
https://en.wikipedia.org/wiki/Michael_A._Jackson
https://en.wikipedia.org/wiki/Ivar_Jacobson
https://en.wikipedia.org/wiki/Alan_Kay
https://en.wikipedia.org/wiki/Nancy_Leveson
https://en.wikipedia.org/wiki/Stephen_J._Mellor
https://en.wikipedia.org/wiki/Bertrand_Meyer
https://en.wikipedia.org/wiki/David_Parnas
https://en.wikipedia.org/wiki/Trygve_Reenskaug
https://en.wikipedia.org/wiki/Winston_W._Royce
https://en.wikipedia.org/wiki/James_Rumbaugh
https://en.wikipedia.org/wiki/Mary_Shaw_(computer_scientist)
https://en.wikipedia.org/wiki/Peri_Tarr
https://en.wikipedia.org/wiki/Elaine_Weyuker
https://en.wikipedia.org/wiki/Niklaus_Wirth
https://en.wikipedia.org/wiki/Edward_Yourdon
https://en.wikipedia.org/wiki/Computer_science
https://en.wikipedia.org/wiki/Computer_engineering
https://en.wikipedia.org/wiki/Project_management
https://en.wikipedia.org/wiki/Risk_management
https://en.wikipedia.org/wiki/Systems_engineering
https://en.wikipedia.org/wiki/Category:Software_engineering
https://commons.wikimedia.org/wiki/Software_engineering
https://en.wikipedia.org/wiki/Template:Edsger_Dijkstra
https://en.wikipedia.org/w/index.php?title=Template_talk:Edsger_Dijkstra&action=edit&redlink=1
https://en.wikipedia.org/w/index.php?title=Template:Edsger_Dijkstra&action=edit
https://en.wikipedia.org/wiki/Edsger_W._Dijkstra
https://en.wikipedia.org/wiki/Edsger_W._Dijkstra
https://en.wikipedia.org/wiki/Structured_Programming
https://en.wikipedia.org/wiki/Edsger_W._Dijkstra
https://en.wikipedia.org/wiki/EWDs
https://en.wikipedia.org/wiki/Go_To_Statement_Considered_Harmful
https://en.wikipedia.org/wiki/On_the_Cruelty_of_Really_Teaching_Computer_Science
https://en.wikipedia.org/wiki/Computer_science
https://en.wikipedia.org/wiki/Theoretical_computer_science
https://en.wikipedia.org/wiki/Software_engineering
https://en.wikipedia.org/wiki/Systems_science
https://en.wikipedia.org/wiki/Algorithm_design
https://en.wikipedia.org/wiki/Concurrent_computing
https://en.wikipedia.org/wiki/Distributed_computing
https://en.wikipedia.org/wiki/Formal_methods
https://en.wikipedia.org/wiki/Programming_methodology
https://en.wikipedia.org/wiki/Programming_language_research
https://en.wikipedia.org/wiki/Software_design
https://en.wikipedia.org/wiki/Software_development
https://en.wikipedia.org/wiki/Edsger_W._Dijkstra
https://en.wikipedia.org/wiki/Edsger_W._Dijkstra
https://en.wikipedia.org/wiki/ALGOL_60
https://en.wikipedia.org/wiki/Programming_language_implementation
https://en.wikipedia.org/wiki/Call_stack
https://en.wikipedia.org/wiki/Concurrency_(computer_science)
https://en.wikipedia.org/wiki/Concurrent_programming
https://en.wikipedia.org/wiki/Cooperating_sequential_processes
https://en.wikipedia.org/wiki/Critical_section
https://en.wikipedia.org/wiki/Deadly_embrace
https://en.wikipedia.org/wiki/Deadlock
https://en.wikipedia.org/wiki/Dining_philosophers_problem
https://en.wikipedia.org/wiki/Dutch_national_flag_problem
https://en.wikipedia.org/wiki/Fault-tolerant_system
https://en.wikipedia.org/wiki/Goto-less_programming
https://en.wikipedia.org/wiki/Guarded_commands
https://en.wikipedia.org/wiki/Guarded_Command_Language
https://en.wikipedia.org/wiki/Abstraction_layer
https://en.wikipedia.org/wiki/Abstraction_layer
https://en.wikipedia.org/wiki/Multithreaded_programming
https://en.wikipedia.org/wiki/Mutual_exclusion
https://en.wikipedia.org/wiki/Mutex
https://en.wikipedia.org/wiki/Philosophy_of_computer_science
https://en.wikipedia.org/wiki/Producer–consumer_problem
https://en.wikipedia.org/wiki/Bounded_buffer_problem
https://en.wikipedia.org/wiki/Software_product_line
https://en.wikipedia.org/wiki/Predicate_transformer_semantics
https://en.wikipedia.org/wiki/Synchronization_(computer_science)
https://en.wikipedia.org/wiki/Self-stabilizing_system
https://en.wikipedia.org/wiki/Semaphore_(programming)
https://en.wikipedia.org/wiki/Separation_of_concerns
https://en.wikipedia.org/wiki/Sleeping_barber_problem
https://en.wikipedia.org/wiki/Software_crisis
https://en.wikipedia.org/wiki/Structured_analysis
https://en.wikipedia.org/wiki/Structured_programming
https://en.wikipedia.org/wiki/THE_multiprogramming_system
https://en.wikipedia.org/wiki/Unbounded_nondeterminism
https://en.wikipedia.org/wiki/Weakest_precondition_calculus
https://en.wikipedia.org/wiki/Edsger_W._Dijkstra
https://en.wikipedia.org/wiki/Banker's_algorithm
https://en.wikipedia.org/wiki/Dijkstra's_algorithm
https://en.wikipedia.org/wiki/DJP_algorithm
https://en.wikipedia.org/wiki/Prim's_algorithm
https://en.wikipedia.org/wiki/Dijkstra-Scholten_algorithm
https://en.wikipedia.org/wiki/Dekker's_algorithm
https://en.wikipedia.org/wiki/Smoothsort
https://en.wikipedia.org/wiki/Shunting-yard_algorithm
https://en.wikipedia.org/wiki/Tracing_garbage_collection
https://en.wikipedia.org/wiki/Concurrent_algorithm
https://en.wikipedia.org/wiki/Distributed_algorithm
https://en.wikipedia.org/wiki/Deadlock_prevention_algorithms
https://en.wikipedia.org/wiki/Self-stabilization
https://en.wikipedia.org/wiki/Shlomi_Dolev
https://en.wikipedia.org/wiki/Per_Brinch_Hansen
https://en.wikipedia.org/wiki/Tony_Hoare
https://en.wikipedia.org/wiki/Ole-Johan_Dahl
https://en.wikipedia.org/wiki/Leslie_Lamport
https://en.wikipedia.org/wiki/David_Parnas
https://en.wikipedia.org/wiki/Adriaan_van_Wijngaarden
https://en.wikipedia.org/wiki/Niklaus_Wirth
https://en.wikipedia.org/wiki/Dijkstra_Prize
https://en.wikipedia.org/wiki/Edsger_W._Dijkstra_Prize_in_Distributed_Computing
https://en.wikipedia.org/wiki/Centrum_Wiskunde_&_Informatica
https://en.wikipedia.org/w/index.php?title=E.W._Dijkstra_Archive&action=edit&redlink=1
https://en.wikipedia.org/wiki/University_of_Texas_at_Austin
https://en.wikipedia.org/wiki/List_of_pioneers_in_computer_science
https://en.wikipedia.org/wiki/List_of_important_publications_in_computer_science
https://en.wikipedia.org/wiki/List_of_important_publications_in_theoretical_computer_science
https://en.wikipedia.org/wiki/List_of_important_publications_in_concurrent,_parallel,_and_distributed_computing
https://en.wikiquote.org/wiki/Special:Search/Edsger_W._Dijkstra
https://en.wikipedia.org/wiki/Help:Authority_control
https://en.wikipedia.org/wiki/Integrated_Authority_File
http://d-nb.info/gnd/4121677-5
https://en.wikipedia.org/w/index.php?title=Software_architecture&oldid=800198237
https://en.wikipedia.org/wiki/Help:Category
https://en.wikipedia.org/wiki/Category:Software_architecture
https://en.wikipedia.org/wiki/Category:Edsger_W._Dijkstra
https://en.wikipedia.org/wiki/Category:Wikipedia_articles_with_GND_identifiers
https://en.wikipedia.org/wiki/Special:MyTalk
https://en.wikipedia.org/wiki/Special:MyContributions
https://en.wikipedia.org/w/index.php?title=Special:CreateAccount&returnto=Software+architecture
https://en.wikipedia.org/w/index.php?title=Special:UserLogin&returnto=Software+architecture
https://en.wikipedia.org/wiki/Software_architecture
https://en.wikipedia.org/wiki/Talk:Software_architecture
https://en.wikipedia.org/wiki/Software_architecture
https://en.wikipedia.org/w/index.php?title=Software_architecture&action=edit
https://en.wikipedia.org/w/index.php?title=Software_architecture&action=history
https://en.wikipedia.org/wiki/Main_Page
https://en.wikipedia.org/wiki/Main_Page
https://en.wikipedia.org/wiki/Portal:Contents
https://en.wikipedia.org/wiki/Portal:Featured_content
https://en.wikipedia.org/wiki/Portal:Current_events
https://en.wikipedia.org/wiki/Special:Random
https://donate.wikimedia.org/wiki/Special:FundraiserRedirector?utm_source=donate&utm_medium=sidebar&utm_campaign=C13_en.wikipedia.org&uselang=en
https://shop.wikimedia.org
https://en.wikipedia.org/wiki/Help:Contents
https://en.wikipedia.org/wiki/Wikipedia:About
https://en.wikipedia.org/wiki/Wikipedia:Community_portal
https://en.wikipedia.org/wiki/Special:RecentChanges
https://en.wikipedia.org/wiki/Wikipedia:Contact_us
https://en.wikipedia.org/wiki/Special:WhatLinksHere/Software_architecture
https://en.wikipedia.org/wiki/Special:RecentChangesLinked/Software_architecture
https://en.wikipedia.org/wiki/Wikipedia:File_Upload_Wizard
https://en.wikipedia.org/wiki/Special:SpecialPages
https://en.wikipedia.org/w/index.php?title=Software_architecture&oldid=800198237
https://en.wikipedia.org/w/index.php?title=Software_architecture&action=info
https://www.wikidata.org/wiki/Special:EntityPage/Q846636
https://en.wikipedia.org/w/index.php?title=Special:CiteThisPage&page=Software_architecture&id=800198237
https://en.wikipedia.org/w/index.php?title=Special:Book&bookcmd=book_creator&referer=Software+architecture
https://en.wikipedia.org/w/index.php?title=Special:ElectronPdf&page=Software+architecture&action=show-download-screen
https://en.wikipedia.org/w/index.php?title=Software_architecture&printable=yes
https://commons.wikimedia.org/wiki/Category:Software_architecture
https://en.wikiquote.org/wiki/Software_architecture
https://ar.wikipedia.org/wiki/معمارية_برمجيات
https://bg.wikipedia.org/wiki/Софтуерна_архитектура
https://ca.wikipedia.org/wiki/Arquitectura_de_programari
https://da.wikipedia.org/wiki/It-arkitektur
https://de.wikipedia.org/wiki/Softwarearchitektur
https://es.wikipedia.org/wiki/Arquitectura_de_software
https://fa.wikipedia.org/wiki/معماری_نرم‌افزار
https://fr.wikipedia.org/wiki/Architecture_logicielle
https://gl.wikipedia.org/wiki/Arquitectura_de_software
https://ko.wikipedia.org/wiki/소프트웨어_구조
https://id.wikipedia.org/wiki/Arsitektur_perangkat_lunak
https://he.wikipedia.org/wiki/ארכיטקטורת_תוכנה
https://mwl.wikipedia.org/wiki/Arquitetura_de_software
https://nl.wikipedia.org/wiki/Software-architectuur
https://ja.wikipedia.org/wiki/ソフトウェアアーキテクチャ
https://pl.wikipedia.org/wiki/Architektura_oprogramowania
https://pt.wikipedia.org/wiki/Arquitetura_de_software
https://ru.wikipedia.org/wiki/Архитектура_программного_обеспечения
https://fi.wikipedia.org/wiki/Tietojärjestelmäarkkitehtuuri
https://te.wikipedia.org/wiki/సాఫ్ట్వేర్_ఆర్కిటెక్చర్
https://tr.wikipedia.org/wiki/Yazılım_mimarisi
https://uk.wikipedia.org/wiki/Архітектура_програмного_забезпечення
https://vi.wikipedia.org/wiki/Kiến_trúc_phần_mềm
https://zh-yue.wikipedia.org/wiki/軟件畫則
https://zh.wikipedia.org/wiki/软件架构
https://www.wikidata.org/wiki/Special:EntityPage/Q846636
https://en.wikipedia.org/wiki/Wikipedia:Text_of_Creative_Commons_Attribution-ShareAlike_3.0_Unported_License
https://creativecommons.org/licenses/by-sa/3.0/
https://wikimediafoundation.org/wiki/Terms_of_Use
https://wikimediafoundation.org/wiki/Privacy_policy
https://www.wikimediafoundation.org/
https://wikimediafoundation.org/wiki/Privacy_policy
https://en.wikipedia.org/wiki/Wikipedia:About
https://en.wikipedia.org/wiki/Wikipedia:General_disclaimer
https://en.wikipedia.org/wiki/Wikipedia:Contact_us
https://www.mediawiki.org/wiki/Special:MyLanguage/How_to_contribute
https://wikimediafoundation.org/wiki/Cookie_statement
https://en.m.wikipedia.org/w/index.php?title=Software_architecture&mobileaction=toggle_view_mobile
https://wikimediafoundation.org/
https://www.mediawiki.org/
