https://en.wikipedia.org/wiki/Software_quality
Software quality - Wikipedia
In the context of software engineering, software quality refers to two related but distinct notions that exist wherever quality is defined in a business context: Software functional quality reflects how...
software quality from wikipedia the free encyclopedia jump to navigation search in the context of software engineering software quality refers to two related but distinct notions that exist wherever quality is defined in a business context software functional quality reflects how well it complies with or conforms to a given design based on functional requirements or specifications that attribute can also be described as the fitness for purpose of a piece of software or how it compares to competitors in the marketplace as a worthwhile product1 it is the degree to which the correct software was produced software structural quality refers to how it meets nonfunctional requirements that support the delivery of the functional requirements such as robustness or maintainability it has a lot more to do with the degree to which the software works as needed many aspects of structural quality can be evaluated only statically through the analysis of the software inner structure its source code at the unit level the technology level and the system level which is in effect how its architecture adheres to sound principles of software architecture outlined in a paper on the topic by omg2 but some structural qualities such as usability can be assessed only dynamically users or others acting in their behalf interact with the software or at least some prototype or partial implementation even the interaction with a mock version made in cardboard represents a dynamic test because such version can be considered a prototype other aspects such as reliability might involve not only the software but also the underlying hardware therefore it can be assessed both statically and dynamically stress test functional quality is typically assessed dynamically but it is also possible to use static tests such as software reviews historically the structure classification and terminology of attributes and metrics applicable to software quality management have been derived or extracted from the iso 91263 and the subsequent iso 2500020053 quality model also known as square4 based on these models the consortium for it software quality cisq has defined five major desirable structural characteristics needed for a piece of software to provide business value reliability efficiency security maintainability and adequate size software quality measurement quantifies to what extent a software program or system rates along each of these five dimensions an aggregated measure of software quality can be computed through a qualitative or a quantitative scoring scheme or a mix of both and then a weighting system reflecting the priorities this view of software quality being positioned on a linear continuum is supplemented by the analysis of critical programming errors that under specific circumstances can lead to catastrophic outages or performance degradations that make a given system unsuitable for use regardless of rating based on aggregated measurements such programming errors found at the system level represent up to 90 of production issues whilst at the unitlevel even if far more numerous programming errors account for less than 10 of production issues as a consequence code quality without the context of the whole system as w edwards deming described it has limited value to view explore analyze and communicate software quality measurements concepts and techniques of information visualization provide visual interactive means useful in particular if several software quality measures have to be related to each other or to components of a software or system for example software maps represent a specialized approach that can express and combine information about software development software quality and system dynamics5 contents 1 motivation 2 definitions 21 kitchenham pfleeger and garvins five perspectives on quality 22 software quality according to deming 23 software quality according to feigenbaum 24 software quality according to juran 25 cisqs quality model 3 alternative approaches 4 measurement 41 introduction 42 codebased analysis 43 reliability 44 efficiency 45 security 46 maintainability 47 size 48 identifying critical programming errors 49 operationalized quality models 5 see also 6 further reading 7 references 8 external links motivationedit a science is as mature as its measurement tools louis pasteur in ebert dumke p 91 measuring software quality is motivated by at least two reasons risk management software failure has caused more than inconvenience software errors have caused human fatalities the causes have ranged from poorly designed user interfaces to direct programming errors an example of a programming error that led to multiple deaths is discussed in dr levesons paper6 this resulted in requirements for the development of some types of software particularly and historically for software embedded in medical and other devices that regulate critical infrastructures engineers who write embedded software see java programs stalling for one third of a second to perform garbage collection and update the user interface and they envision airplanes falling out of the sky7 in the united states within the federal aviation administration faa the faa aircraft certification service provides software programs policy guidance and training focus on software and complex electronic hardware that has an effect on the airborne product a product is an aircraft an engine or a propeller8 cost management as in any other fields of engineering an application with good structural software quality costs less to maintain and is easier to understand and change in response to pressing business needs industry data demonstrate that poor application structural quality in core business applications such as enterprise resource planning erp customer relationship management crm or large transaction processing systems in financial services results in cost and schedule overruns and creates waste in the form of rework up to 45 of development time in some organizations9 moreover poor structural quality is strongly correlated with highimpact business disruptions due to corrupted data application outages security breaches and performance problems however the distinction between measuring and improving software quality in an embedded system with emphasis on risk management and software quality in business software with emphasis on cost and maintainability management is becoming somewhat irrelevant embedded systems now often include a user interface and their designers are as much concerned with issues affecting usability and user productivity as their counterparts who focus on business applications the latter are in turn looking at erp or crm system as a corporate nervous system whose uptime and performance are vital to the wellbeing of the enterprise this convergence is most visible in mobile computing a user who accesses an erp application on their smartphone is depending on the quality of software across all types of software layers both types of software now use multilayered technology stacks and complex architecture so software quality analysis and measurement have to be managed in a comprehensive and consistent manner decoupled from the softwares ultimate purpose or use in both cases engineers and management need to be able to make rational decisions based on measurement and factbased analysis in adherence to the precept in god we trust all others bring data misattributed to w edwards deming and others definitionsedit there are many different definitions of quality for some it is the capability of a software product to conform to requirements isoiec 900110 commented by11 while for others it can be synonymous with customer value highsmith 2002 or even defect level the first definition of quality history remembers is from shewhart in the beginning of 20th century there are two common aspects of quality one of them has to do with the consideration of the quality of a thing as an objective reality independent of the existence of man the other has to do with what we think feel or sense as a result of the objective reality in other words there is a subjective side of quality shewhart12 kitchenham pfleeger and garvins five perspectives on qualityedit kitchenham and pfleeger13 further reporting the teachings of david garvin14 identify five different perspectives on quality the transcendental perspective deals with the metaphysical aspect of quality in this view of quality it is something toward which we strive as an ideal but may never implement completely13 it can hardly be defined but is similar to what a federal judge once commented about obscenity i know it when i see it15 the user perspective is concerned with the appropriateness of the product for a given context of use whereas the transcendental view is ethereal the user view is more concrete grounded in the product characteristics that meet user’s needs13 the manufacturing perspective represents quality as conformance to requirements this aspect of quality is stressed by standards such as iso 9001 which defines quality as the degree to which a set of inherent characteristics fulfills requirements isoiec 900110 the product perspective implies that quality can be appreciated by measuring the inherent characteristics of the product the final perspective of quality is valuebased this perspective recognises that the different perspectives of quality may have different importance or value to various stakeholders software quality according to demingedit the problem inherent in attempts to define the quality of a product almost any product were stated by the master walter a shewhart the difficulty in defining quality is to translate future needs of the user into measurable characteristics so that a product can be designed and turned out to give satisfaction at a price that the user will pay this is not easy and as soon as one feels fairly successful in the endeavor he finds that the needs of the consumer have changed competitors have moved in etc16 — w edwards deming software quality according to feigenbaumedit quality is a customer determination not an engineers determination not a marketing determination nor a general management determination it is based on the customers actual experience with the product or service measured against his or her requirements stated or unstated conscious or merely sensed technically operational or entirely subjective and always representing a moving target in a competitive market17 software quality according to juranedit the word quality has multiple meanings two of these meanings dominate the use of the word 1 quality consists of those product features which meet the need of customers and thereby provide product satisfaction 2 quality consists of freedom from deficiencies nevertheless in a handbook such as this it is convenient to standardize on a short definition of the word quality as fitness for use18 cisqs quality modeledit even though quality is a perceptual conditional and somewhat subjective attribute and may be understood differently by different people as noted in the article on quality in business software structural quality characteristics have been clearly defined by the consortium for it software quality cisq under the guidance of bill curtis coauthor of the capability maturity model framework and cisqs first director and capers jones cisqs distinguished advisor cisq has defined five major desirable characteristics of a piece of software needed to provide business value19 in the house of quality model these are whats that need to be achieved reliability an attribute of resiliency and structural solidity reliability measures the level of risk and the likelihood of potential application failures it also measures the defects injected due to modifications made to the software its stability as termed by iso the goal for checking and monitoring reliability is to reduce and prevent application downtime application outages and errors that directly affect users and enhance the image of it and its impact on a companys business performance efficiency the source code and software architecture attributes are the elements that ensure high performance once the application is in runtime mode efficiency is especially important for applications in high execution speed environments such as algorithmic or transactional processing where performance and scalability are paramount an analysis of source code efficiency and scalability provides a clear picture of the latent business risks and the harm they can cause to customer satisfaction due to responsetime degradation security a measure of the likelihood of potential security breaches due to poor coding practices and architecture this quantifies the risk of encountering critical vulnerabilities that damage the business maintainability maintainability includes the notion of adaptability portability and transferability from one development team to another measuring and monitoring maintainability is a must for missioncritical applications where change is driven by tight timetomarket schedules and where it is important for it to remain responsive to businessdriven changes it is also essential to keep maintenance costs under control size while not a quality attribute per se the sizing of source code is a software characteristic that obviously impacts maintainability combined with the above quality characteristics software size can be used to assess the amount of work produced and to be done by teams as well as their productivity through correlation with timesheet data and other sdlcrelated metrics software functional quality is defined as conformance to explicitly stated functional requirements identified for example using voice of the customer analysis part of the design for six sigma toolkit andor documented through use cases and the level of satisfaction experienced by endusers the latter is referred as to as usability and is concerned with how intuitive and responsive the user interface is how easily simple and complex operations can be performed and how useful error messages are typically software testing practices and tools ensure that a piece of software behaves in compliance with the original design planned user experience and desired testability ie a piece of softwares disposition to support acceptance criteria the dual structuralfunctional dimension of software quality is consistent with the model proposed in steve mcconnells code complete which divides software characteristics into two pieces internal and external quality characteristics external quality characteristics are those parts of a product that face its users where internal quality characteristics are those that do not20 alternative approachesedit one of the challenges in defining quality is that everyone feels they understand it21 and other definitions of software quality could be based on extending the various descriptions of the concept of quality used in business dr tom demarco has proposed that a products quality is a function of how much it changes the world for the better22 this can be interpreted as meaning that functional quality and user satisfaction are more important than structural quality in determining software quality another definition coined by gerald weinberg in quality software management systems thinking is quality is value to some person 2324 this definition stresses that quality is inherently subjective—different people will experience the quality of the same software differently one strength of this definition is the questions it invites software teams to consider such as who are the people we want to value our software and what will be valuable to them measurementedit although the concepts presented in this section are applicable to both structural and functional software quality measurement of the latter is essentially performed through testing see main article software testing introductionedit relationship between software desirable characteristics right and measurable attributes left software quality measurement is about quantifying to what extent a system or software possesses desirable characteristics this can be performed through qualitative or quantitative means or a mix of both in both cases for each desirable characteristic there are a set of measurable attributes the existence of which in a piece of software or system tend to be correlated and associated with this characteristic for example an attribute associated with portability is the number of targetdependent statements in a program more precisely using the quality function deployment approach these measurable attributes are the hows that need to be enforced to enable the whats in the software quality definition above the structure classification and terminology of attributes and metrics applicable to software quality management have been derived or extracted from the iso 91263 and the subsequent isoiec 250002005 quality model the main focus is on internal structural quality subcategories have been created to handle specific areas like business application architecture and technical characteristics such as data access and manipulation or the notion of transactions the dependence tree between software quality characteristics and their measurable attributes is represented in the diagram on the right where each of the 5 characteristics that matter for the user right or owner of the business system depends on measurable attributes left application architecture practices coding practices application complexity documentation portability technical and functional volume correlations between programming errors and production defects unveil that basic code errors account for 92 of the total errors in the source code these numerous codelevel issues eventually count for only 10 of the defects in production bad software engineering practices at the architecture levels account for only 8 of total defects but consume over half the effort spent on fixing problems and lead to 90 of the serious reliability security and efficiency issues in production25 codebased analysisedit many of the existing software measures count structural elements of the application that result from parsing the source code for such individual instructions park 199226 tokens halstead 197727 control structures mccabe 1976 and objects chidamber kemerer 199428 software quality measurement is about quantifying to what extent a system or software rates along these dimensions the analysis can be performed using a qualitative or quantitative approach or a mix of both to provide an aggregate view using for example weighted averages that reflect relative importance between the factors being measured this view of software quality on a linear continuum has to be supplemented by the identification of discrete critical programming errors these vulnerabilities may not fail a test case but they are the result of bad practices that under specific circumstances can lead to catastrophic outages performance degradations security breaches corrupted data and myriad other problems nygard 200729 that make a given system de facto unsuitable for use regardless of its rating based on aggregated measurements a wellknown example of vulnerability is the common weakness enumeration30 a repository of vulnerabilities in the source code that make applications exposed to security breaches the measurement of critical application characteristics involves measuring structural attributes of the applications architecture coding and inline documentation as displayed in the picture above thus each characteristic is affected by attributes at numerous levels of abstraction in the application and all of which must be included calculating the characteristics measure if it is to be a valuable predictor of quality outcomes that affect the business the layered approach to calculating characteristic measures displayed in the figure above was first proposed by boehm and his colleagues at trw boehm 197831 and is the approach taken in the iso 9126 and 25000 series standards these attributes can be measured from the parsed results of a static analysis of the application source code even dynamic characteristics of applications such as reliability and performance efficiency have their causal roots in the static structure of the application structural quality analysis and measurement is performed through the analysis of the source code the architecture software framework database schema in relationship to principles and standards that together define the conceptual and logical architecture of a system this is distinct from the basic local componentlevel code analysis typically performed by development tools which are mostly concerned with implementation considerations and are crucial during debugging and testing activities reliabilityedit the root causes of poor reliability are found in a combination of noncompliance with good architectural and coding practices this noncompliance can be detected by measuring the static quality attributes of an application assessing the static attributes underlying an applications reliability provides an estimate of the level of business risk and the likelihood of potential application failures and defects the application will experience when placed in operation assessing reliability requires checks of at least the following software engineering best practices and technical attributes application architecture practices coding practices complexity of algorithms complexity of programming practices compliance with objectoriented and structured programming best practices when applicable component or pattern reuse ratio dirty programming error exception handling for all layers gui logic data multilayer design compliance resource bounds management software avoids patterns that will lead to unexpected behaviors software manages data integrity and consistency transaction complexity level depending on the application architecture and the thirdparty components used such as external libraries or frameworks custom checks should be defined along the lines drawn by the above list of best practices to ensure a better assessment of the reliability of the delivered software efficiencyedit as with reliability the causes of performance inefficiency are often found in violations of good architectural and coding practice which can be detected by measuring the static quality attributes of an application these static attributes predict potential operational performance bottlenecks and future scalability problems especially for applications requiring high execution speed for handling complex algorithms or huge volumes of data assessing performance efficiency requires checking at least the following software engineering best practices and technical attributes application architecture practices appropriate interactions with expensive andor remote resources data access performance and data management memory network and disk space management coding practices compliance with objectoriented and structured programming best practices as appropriate compliance with sql programming best practices securityedit most security vulnerabilities result from poor coding and architectural practices such as sql injection or crosssite scripting these are well documented in lists maintained by cwe32 and the seicomputer emergency center cert at carnegie mellon university assessing security requires at least checking the following software engineering best practices and technical attributes application architecture practices multilayer design compliance security best practices input validation sql injection crosssite scripting etc33 programming practices code level error exception handling security best practices system functions access access control to programs maintainabilityedit maintainability includes concepts of modularity understandability changeability testability reusability and transferability from one development team to another these do not take the form of critical issues at the code level rather poor maintainability is typically the result of thousands of minor violations with best practices in documentation complexity avoidance strategy and basic programming practices that make the difference between clean and easytoread code vs unorganized and difficulttoread code34 assessing maintainability requires checking the following software engineering best practices and technical attributes application architecture practices architecture programs and code documentation embedded in source code code readability complexity level of transactions complexity of algorithms complexity of programming practices compliance with objectoriented and structured programming best practices when applicable component or pattern reuse ratio controlled level of dynamic coding coupling ratio dirty programming documentation hardware os middleware software components and database independence multilayer design compliance portability programming practices code level reduced duplicate code and functions source code file organization cleanliness maintainability is closely related to ward cunninghams concept of technical debt which is an expression of the costs resulting of a lack of maintainability reasons for why maintainability is low can be classified as reckless vs prudent and deliberate vs inadvertent35 and often have their origin in developers inability lack of time and goals their carelessness and discrepancies in the creation cost of and benefits from documentation and in particular maintainable source code36 sizeedit measuring software size requires that the whole source code be correctly gathered including database structure scripts data manipulation source code component headers configuration files etc there are essentially two types of software sizes to be measured the technical size footprint and the functional size there are several software technical sizing methods that have been widely described the most common technical sizing method is number of lines of code loc per technology number of files functions classes tables etc from which backfiring function points can be computed the most common for measuring functional size is function point analysis function point analysis measures the size of the software deliverable from a users perspective function point sizing is done based on user requirements and provides an accurate representation of both size for the developerestimator and value functionality to be delivered and reflects the business functionality being delivered to the customer the method includes the identification and weighting of user recognizable inputs outputs and data stores the size value is then available for use in conjunction with numerous measures to quantify and to evaluate software delivery and performance development cost per function point delivered defects per function point function points per staff month the function point analysis sizing standard is supported by the international function point users group ifpug it can be applied early in the software development lifecycle and it is not dependent on lines of code like the somewhat inaccurate backfiring method the method is technology agnostic and can be used for comparative analysis across organizations and across industries since the inception of function point analysis several variations have evolved and the family of functional sizing techniques has broadened to include such sizing measures as cosmic nesma use case points fp lite early and quick fps and most recently story points however function points has a history of statistical accuracy and has been used as a common unit of work measurement in numerous application development management adm or outsourcing engagements serving as the currency by which services are delivered and performance is measured one common limitation to the function point methodology is that it is a manual process and therefore it can be laborintensive and costly in large scale initiatives such as application development or outsourcing engagements this negative aspect of applying the methodology may be what motivated industry it leaders to form the consortium for it software quality focused on introducing a computable metrics standard for automating the measuring of software size while the ifpug keep promoting a manual approach as most of its activity rely on fp counters certifications cisq announced the availability of its first metric standard automated function pointsto the cisq membership in cisq technical these recommendations have been developed in omgs request for comment format and submitted to omgs process for standardizationcitation needed identifying critical programming errorsedit critical programming errors are specific architectural andor coding bad practices that result in the highest immediate or long term business disruption risk these are quite often technologyrelated and depend heavily on the context business objectives and risks some may consider respect for naming conventions while others – those preparing the ground for a knowledge transfer for example – will consider it as absolutely critical critical programming errors can also be classified per cisq characteristics basic example below reliability avoid software patterns that will lead to unexpected behavior uninitialized variable null pointers etc methods procedures and functions doing insert update delete create table or select must include error management multithread functions should be made thread safe for instance servlets or struts action classes must not have instancenonfinal static fields efficiency ensure centralization of client requests incoming and data to reduce network traffic avoid sql queries that dont use an index against large tables in a loop security avoid fields in servlet classes that are not final static avoid data access without including error management check control return codes and implement error handling mechanisms ensure input validation to avoid crosssite scripting flaws or sql injections flaws maintainability deep inheritance trees and nesting should be avoided to improve comprehensibility modules should be loosely coupled fanout intermediaries to avoid propagation of modifications enforce homogeneous naming conventions operationalized quality modelsedit newer proposals for quality models such as squale and quamoco37 propagate a direct integration of the definition of quality attributes and measurement by breaking down quality attributes or even defining additional layers the complex abstract quality attributes such as reliability or maintainability become more manageable and measurable those quality models have been applied in industrial contexts but have not received widespread adoption see alsoedit isoiec 9126 software process improvement and capability determination isoiec 15504 software testing quality quality control total quality management software quality model software quality assurance programming style coding conventions software architecture software metrics cyclomatic complexity cohesion and coupling software reusability software standard ilities accessibility availability dependability testability security security engineering computer bug anomaly in software further readingedit international organization for standardization software engineering—product quality—part 1 quality model iso geneva switzerland 2001 isoiec 912612001e diomidis spinellis code quality the open source perspective addison wesley boston ma 2006 howon jung seunggweon kim and changsin chung measuring software product quality a survey of isoiec 9126 ieee software 21510–13 septemberoctober 2004 stephen h kan metrics and models in software quality engineering addisonwesley boston ma second edition 2002 omar alshathry helge janicke optimizing software quality assurance compsacw pp 87–92 2010 ieee 34th annual computer software and applications conference workshops 2010 robert l glass building quality software prentice hall upper saddle river nj 1992 roland petrasch the definition of software quality a practical approach issre 1999 capers jones and olivier bonsignour the economics of software quality addisonwesley professional 1st edition december 31 2011 isbn 9780132582209 measuring software product quality the iso 25000 series and cmmi sei site msqf a measurement based software quality framework cornell university library stefan wagner software product quality control springer 2013 girish suryanarayana software process versus design quality tug of war 38 referencesedit notes pressman scott 2005 software engineering a practitioners approach sixth international ed mcgrawhill education pressman p 388 how to deliver resilient secure efficient and easily changed it systems in line with cisq recommendations pdf retrieved 20131018  iso 250002005 pdf retrieved 20131018  isoiec 250102011 iso retrieved 14 march 2016  j bohnet j döllner monitoring code quality and development activity by software maps proceedings of the ieee acm icse workshop on managing technical debt pp 916 2011 medical devices the therac25 nancy leveson university of washington embedded software edward a lee to appear in advances in computers m zelkowitz editor vol 56 academic press london 2002 revised from ucb erl memorandum m0126 university of california berkeley ca 94720 usa november 1 2001 aircraft certification software and airborne electronic hardware retrieved 28 september 2014  improving quality through better requirements slideshow dr ralph r young 24012004 northrop grumman information technology a b international organization for standardization isoiec 9001 quality management systems requirements 1999 international organization for standardization isoiec 24765 systems and software engineering – vocabulary 2010 w a shewhart economic control of quality of manufactured product van nostrand 1931 a b c b kitchenham and s pfleeger software quality the elusive target software ieee vol 13 no 1 pp 12–21 1996 d a garvin managing quality the strategic and competitive edge new york ny free press ua 1988 s h kan metrics and models in software quality engineering 2nd ed boston ma usa addisonwesley longman publishing co inc 2002 w e deming out of the crisis quality productivity and competitive position cambridge university press 1988 a v feigenbaum total quality control mcgrawhill 1983 jm juran jurans quality control handbook mcgrawhill 1988 1 mcconnell steve 1993 code complete first ed microsoft press crosby p quality is free mcgrawhill 1979 demarco t management can make quality impossible cutter it summit boston april 1999 weinberg gerald m 1992 quality software management volume 1 systems thinking new york ny dorset house publishing p 7  weinberg gerald m 1993 quality software management volume 2 firstorder measurement new york ny dorset house publishing p 108  httpwwwomgorgcisqcompliantitsystemsv43pdf park re 1992 software size measurement a framework for counting source statements cmusei92tr020 software engineering institute carnegie mellon university halstead me 1977 elements of software science elsevier northholland chidamber s c kemerer c 1994 a metrics suite for object oriented design ieee transactions on software engineering 20 6 476493 nygard mt 2007 release it design and deploy production ready software the pragmatic programmers cwe common weakness enumeration cwemitreorg retrieved 20160520  boehm b brown jr kaspar h lipow m macleod gj merritt mj 1978 characteristics of software quality northholland cwe common weakness enumeration cwemitreorg retrieved 20131018  cwes top 25 sansorg retrieved 20131018  ifsq level2 a foundationlevel standard for computer program source code second edition august 2008 graham bolton stuart johnston ifsq institute for software quality fowler martin october 14 2009 technicaldebtquadrant retrieved february 4 2013  prause christian durdik zoya june 3 2012 architectural design and documentation waste in agile development ieee computer society retrieved february 4 2013  wagner stefan goeb andreas heinemann lars kläs michael lampasona constanza lochmann klaus mayr alois plösch reinhold seidl andreas 2015 operationalised product quality models and assessment the quamoco approach pdf information and software technology 62 101–123 doi101016jinfsof201502009  suryanarayana girish 2015 software process versus design quality tug of war ieee software 32 4 7–11 doi101109ms201587  bibliography albrecht a j 1979 measuring application development productivity in proceedings of the joint shareguide ibm applications development symposium ibm  benmenachem m marliss g s 1997 software quality producing practical and consistent software thomson computer press  boehm b brown jr kaspar h lipow m macleod gj merritt mj 1978 characteristics of software quality northholland  chidamber s kemerer c 1994 a metrics suite for object oriented design ieee transactions on software engineering 20 6 pp 476–493  ebert christof dumke reiner software measurement establish extract evaluate execute kindle edition p 91  garmus d herron d 2001 function point analysis addison wesley  halstead me 1977 elements of software science elsevier northholland  hamill m gosevapopstojanova k 2009 common faults in software fault and failure data ieee transactions of software engineering 35 4 pp 484–496  jackson dj 2009 a direct path to dependable software communications of the acm 52 4  martin r 2001 managing vulnerabilities in networked systems ieee computer  mccabe t december 1976 a complexity measure ieee transactions on software engineering  mcconnell steve 1993 code complete first ed microsoft press  nygard mt 2007 release it design and deploy production ready software the pragmatic programmers  park re 1992 software size measurement a framework for counting source statements cmusei92tr020 software engineering institute carnegie mellon university  pressman scott 2005 software engineering a practitioners approach sixth international ed mcgrawhill education  spinellis d 2006 code quality addison wesley  external linksedit linux fewer bugs than rivals wired magazine 2004 automated function points beta 1 by omg v t e software engineering fields computer programming requirements engineering software deployment software design software maintenance software testing systems analysis formal methods concepts data modeling enterprise architecture functional specification modeling language orthogonality programming paradigm software software archaeology software architecture software configuration management software development methodology software development process software quality software quality assurance software verification and validation structured analysis orientations agile aspectoriented object orientation ontology service orientation sdlc models developmental agile eup executable uml incremental model iterative model prototype model rad up scrum spiral model vmodel waterfall model xp other spice cmmi data model er model function model information model metamodeling object model systems model view model languages idef uml usl sysml software engineers victor basili kent beck grady booch fred brooks barry boehm peter chen danese cooper ward cunningham tom demarco edsger w dijkstra delores m etter martin fowler adele goldstine margaret hamilton c a r hoare lois haibt mary jean harrold grace hopper watts humphrey michael a jackson ivar jacobson alan kay nancy leveson stephen j mellor bertrand meyer david parnas trygve reenskaug winston w royce james rumbaugh mary shaw peri tarr elaine weyuker niklaus wirth edward yourdon related fields computer science computer engineering project management risk management systems engineering category commons v t e major fields of computer science note this template roughly follows the 2012 acm computing classification system hardware printed circuit board peripheral integrated circuit verylargescale integration energy consumption electronic design automation computer systems organization computer architecture embedded system realtime computing dependability networks network architecture network protocol network components network scheduler network performance evaluation network service software organization interpreter middleware virtual machine operating system software quality software notations and tools programming paradigm programming language compiler domainspecific language modeling language software framework integrated development environment software configuration management software library software repository software development software development process requirements analysis software design software construction software deployment software maintenance programming team opensource model theory of computation model of computation formal language automata theory computational complexity theory logic semantics algorithms algorithm design analysis of algorithms randomized algorithm computational geometry mathematics of computing discrete mathematics probability statistics mathematical software information theory mathematical analysis numerical analysis information systems database management system information storage systems enterprise information system social information systems geographic information system decision support system process control system multimedia information system data mining digital library computing platform digital marketing world wide web information retrieval security cryptography formal methods security services intrusion detection system hardware security network security information security application security human–computer interaction interaction design social computing ubiquitous computing visualization accessibility concurrency concurrent computing parallel computing distributed computing multithreading multiprocessing artificial intelligence natural language processing knowledge representation and reasoning computer vision automated planning and scheduling search methodology control method philosophy of artificial intelligence distributed artificial intelligence machine learning supervised learning unsupervised learning reinforcement learning multitask learning crossvalidation graphics animation rendering image manipulation graphics processing unit mixed reality virtual reality image compression solid modeling applied computing ecommerce enterprise software computational mathematics computational physics computational chemistry computational biology computational social science computational engineering computational healthcare digital art electronic publishing cyberwarfare electronic voting video game word processing operations research educational technology document management book category portal wikiproject commons retrieved from httpsenwikipediaorgwindexphptitlesoftwarequalityoldid806906459 categories software quality systems thinking software testing source code hidden categories all articles with unsourced statements articles with unsourced statements from december 2013 navigation menu personal tools not logged in talk contributions create account log in namespaces article talk variants views read edit view history more search navigation main page contents featured content current events random article donate to wikipedia wikipedia store interaction help about wikipedia community portal recent changes contact page tools what links here related changes upload file special pages permanent link page information wikidata item cite this page printexport create a book download as pdf printable version languages العربية български català deutsch español فارسی français 한국어 italiano македонски 日本語 polski português русский suomi українська tiếng việt 中文 edit links this page was last edited on 24 october 2017 at 2144 text is available under the creative commons attributionsharealike license additional terms may apply by using this site you agree to the terms of use and privacy policy wikipedia® is a registered trademark of the wikimedia foundation inc a nonprofit organization privacy policy about wikipedia disclaimers contact wikipedia developers cookie statement mobile view 
https://en.wikipedia.org/wiki/Software_quality
https://en.wikipedia.org/wiki/Software_quality
https://en.wikipedia.org/wiki/Software_engineering
https://en.wikipedia.org/wiki/Quality_(business)
https://en.wikipedia.org/wiki/Functional_requirements
https://en.wikipedia.org/wiki/Product_(business)
https://en.wikipedia.org/wiki/Software_quality
https://en.wikipedia.org/wiki/Software_verification_and_validation
https://en.wikipedia.org/wiki/Non-functional_requirements
https://en.wikipedia.org/wiki/Software_verification_and_validation
https://en.wikipedia.org/wiki/Static_testing
https://en.wikipedia.org/wiki/Software_architecture
https://en.wikipedia.org/wiki/Software_quality
https://en.wikipedia.org/wiki/Usability
https://en.wikipedia.org/wiki/Usability_testing
https://en.wikipedia.org/wiki/Dynamic_testing
https://en.wikipedia.org/wiki/Stress_testing_(software)
https://en.wikipedia.org/wiki/Software_review
https://en.wikipedia.org/wiki/Software_quality_management
https://en.wikipedia.org/wiki/ISO_9126
https://en.wikipedia.org/wiki/Software_quality
https://en.wikipedia.org/wiki/Software_quality
https://en.wikipedia.org/wiki/CISQ
https://en.wikipedia.org/wiki/Business_value
https://en.wikipedia.org/wiki/W._Edwards_Deming
https://en.wikipedia.org/wiki/Information_visualization
https://en.wikipedia.org/wiki/Software_map
https://en.wikipedia.org/wiki/Software_quality
https://en.wikipedia.org/wiki/Software_quality
https://en.wikipedia.org/wiki/Software_quality
https://en.wikipedia.org/wiki/Software_quality
https://en.wikipedia.org/wiki/Software_quality
https://en.wikipedia.org/wiki/Software_quality
https://en.wikipedia.org/wiki/Software_quality
https://en.wikipedia.org/wiki/Software_quality
https://en.wikipedia.org/wiki/Software_quality
https://en.wikipedia.org/wiki/Software_quality
https://en.wikipedia.org/wiki/Software_quality
https://en.wikipedia.org/wiki/Software_quality
https://en.wikipedia.org/wiki/Software_quality
https://en.wikipedia.org/wiki/Software_quality
https://en.wikipedia.org/wiki/Software_quality
https://en.wikipedia.org/wiki/Software_quality
https://en.wikipedia.org/wiki/Software_quality
https://en.wikipedia.org/wiki/Software_quality
https://en.wikipedia.org/wiki/Software_quality
https://en.wikipedia.org/wiki/Software_quality
https://en.wikipedia.org/wiki/Software_quality
https://en.wikipedia.org/wiki/Software_quality
https://en.wikipedia.org/wiki/Software_quality
https://en.wikipedia.org/w/index.php?title=Software_quality&action=edit&section=1
https://en.wikipedia.org/wiki/Software_quality
https://en.wikipedia.org/wiki/Programming_error
https://en.wikipedia.org/wiki/Software_quality
https://en.wikipedia.org/wiki/Embedded_software
https://en.wikipedia.org/wiki/Software_quality
https://en.wikipedia.org/wiki/Federal_Aviation_Administration
https://en.wikipedia.org/wiki/Software_quality
https://en.wikipedia.org/wiki/Business_application
https://en.wikipedia.org/wiki/Enterprise_resource_planning
https://en.wikipedia.org/wiki/Customer_relationship_management
https://en.wikipedia.org/wiki/Transaction_processing
https://en.wikipedia.org/wiki/Software_quality
https://en.wikipedia.org/wiki/Smartphone
https://en.wikipedia.org/wiki/W._Edwards_Deming
https://en.wikipedia.org/wiki/W._Edwards_Deming
https://en.wikipedia.org/w/index.php?title=Software_quality&action=edit&section=2
https://en.wikipedia.org/wiki/Software_quality
https://en.wikipedia.org/wiki/Software_quality
https://en.wikipedia.org/wiki/Software_quality
https://en.wikipedia.org/w/index.php?title=Software_quality&action=edit&section=3
https://en.wikipedia.org/wiki/Software_quality
https://en.wikipedia.org/wiki/Software_quality
https://en.wikipedia.org/wiki/Software_quality
https://en.wikipedia.org/wiki/Software_quality
https://en.wikipedia.org/wiki/Software_quality
https://en.wikipedia.org/wiki/Software_quality
https://en.wikipedia.org/w/index.php?title=Software_quality&action=edit&section=4
https://en.wikipedia.org/wiki/Software_quality
https://en.wikipedia.org/wiki/W._Edwards_Deming
https://en.wikipedia.org/w/index.php?title=Software_quality&action=edit&section=5
https://en.wikipedia.org/wiki/Software_quality
https://en.wikipedia.org/w/index.php?title=Software_quality&action=edit&section=6
https://en.wikipedia.org/wiki/Software_quality
https://en.wikipedia.org/w/index.php?title=Software_quality&action=edit&section=7
https://en.wikipedia.org/wiki/Quality_(business)
https://en.wikipedia.org/wiki/Dr_Bill_Curtis
https://en.wikipedia.org/wiki/Capability_Maturity_Model
https://en.wikipedia.org/wiki/Capers_Jones
https://en.wikipedia.org/wiki/Business_value
https://en.wikipedia.org/wiki/Software_quality
https://en.wikipedia.org/wiki/House_of_Quality
https://en.wikipedia.org/wiki/Reliability_(engineering)
https://en.wikipedia.org/wiki/Efficiency
https://en.wikipedia.org/wiki/Security
https://en.wikipedia.org/wiki/Maintainability
https://en.wikipedia.org/wiki/Software_development_process
https://en.wikipedia.org/wiki/Voice_of_the_Customer
https://en.wikipedia.org/wiki/Design_for_Six_Sigma
https://en.wikipedia.org/wiki/Use_cases
https://en.wikipedia.org/wiki/Usability
https://en.wikipedia.org/wiki/User_interface
https://en.wikipedia.org/wiki/Error_messages
https://en.wikipedia.org/wiki/Software_testability
https://en.wikipedia.org/wiki/Steve_McConnell
https://en.wikipedia.org/wiki/Code_Complete
https://en.wikipedia.org/wiki/Software_quality
https://en.wikipedia.org/w/index.php?title=Software_quality&action=edit&section=8
https://en.wikipedia.org/wiki/Software_quality
https://en.wikipedia.org/wiki/Quality_(business)
https://en.wikipedia.org/wiki/Tom_DeMarco
https://en.wikipedia.org/wiki/Software_quality
https://en.wikipedia.org/wiki/Gerald_Weinberg
https://en.wikipedia.org/wiki/Software_quality
https://en.wikipedia.org/wiki/Software_quality
https://en.wikipedia.org/w/index.php?title=Software_quality&action=edit&section=9
https://en.wikipedia.org/wiki/Software_testing
https://en.wikipedia.org/w/index.php?title=Software_quality&action=edit&section=10
https://en.wikipedia.org/wiki/File:SoftwareQualityCharacteristicAttributeRelationship.png
https://en.wikipedia.org/wiki/File:SoftwareQualityCharacteristicAttributeRelationship.png
https://en.wikipedia.org/wiki/Quality_Function_Deployment
https://en.wikipedia.org/wiki/ISO_9126
https://en.wikipedia.org/wiki/Software_quality
https://en.wikipedia.org/w/index.php?title=Software_quality&action=edit&section=11
https://en.wikipedia.org/wiki/Software_quality
https://en.wikipedia.org/wiki/Software_quality
https://en.wikipedia.org/wiki/Software_quality
https://en.wikipedia.org/wiki/Software_quality
https://en.wikipedia.org/wiki/Software_quality
https://en.wikipedia.org/wiki/Common_Weakness_Enumeration
https://en.wikipedia.org/wiki/Software_quality
https://en.wikipedia.org/wiki/Software_quality
https://en.wikipedia.org/wiki/Source_code
https://en.wikipedia.org/wiki/Software_architecture
https://en.wikipedia.org/wiki/Software_framework
https://en.wikipedia.org/wiki/Database_schema
https://en.wikipedia.org/wiki/Development_tool
https://en.wikipedia.org/wiki/Debugging
https://en.wikipedia.org/wiki/Software_testing
https://en.wikipedia.org/w/index.php?title=Software_quality&action=edit&section=12
https://en.wikipedia.org/w/index.php?title=Software_quality&action=edit&section=13
https://en.wikipedia.org/w/index.php?title=Software_quality&action=edit&section=14
https://en.wikipedia.org/wiki/Software_quality
https://en.wikipedia.org/wiki/CERT_Coordination_Center
https://en.wikipedia.org/wiki/Software_quality
https://en.wikipedia.org/w/index.php?title=Software_quality&action=edit&section=15
https://en.wikipedia.org/wiki/Software_quality
https://en.wikipedia.org/wiki/Duplicate_code
https://en.wikipedia.org/wiki/Technical_debt
https://en.wikipedia.org/wiki/Software_quality
https://en.wikipedia.org/wiki/Source_code
https://en.wikipedia.org/wiki/Software_quality
https://en.wikipedia.org/w/index.php?title=Software_quality&action=edit&section=16
https://en.wikipedia.org/wiki/Software_Sizing
https://en.wikipedia.org/wiki/Function_point
https://en.wikipedia.org/wiki/Wikipedia:Citation_needed
https://en.wikipedia.org/w/index.php?title=Software_quality&action=edit&section=17
https://en.wikipedia.org/wiki/Uninitialized_variable
https://en.wikipedia.org/wiki/Apache_Struts
https://en.wikipedia.org/w/index.php?title=Software_quality&action=edit&section=18
https://en.wikipedia.org/wiki/Squale
https://en.wikipedia.org/wiki/Software_quality
https://en.wikipedia.org/w/index.php?title=Software_quality&action=edit&section=19
https://en.wikipedia.org/wiki/ISO/IEC_9126
https://en.wikipedia.org/wiki/ISO/IEC_15504
https://en.wikipedia.org/wiki/Software_testing
https://en.wikipedia.org/wiki/Quality_(business)
https://en.wikipedia.org/wiki/Quality_control
https://en.wikipedia.org/wiki/Total_quality_management
https://en.wikipedia.org/wiki/Software_quality_model
https://en.wikipedia.org/wiki/Software_quality_assurance
https://en.wikipedia.org/wiki/Programming_style
https://en.wikipedia.org/wiki/Coding_conventions
https://en.wikipedia.org/wiki/Software_architecture
https://en.wikipedia.org/wiki/Software_metric
https://en.wikipedia.org/wiki/Cyclomatic_complexity
https://en.wikipedia.org/wiki/Cohesion_(computer_science)
https://en.wikipedia.org/wiki/Coupling_(computer_science)
https://en.wikipedia.org/wiki/Software_reusability
https://en.wikipedia.org/wiki/Software_standard
https://en.wikipedia.org/wiki/Ilities
https://en.wikipedia.org/wiki/Accessibility
https://en.wikipedia.org/wiki/Availability
https://en.wikipedia.org/wiki/Dependability
https://en.wikipedia.org/wiki/Software_testability
https://en.wikipedia.org/wiki/Security
https://en.wikipedia.org/wiki/Security_engineering
https://en.wikipedia.org/wiki/Computer_bug
https://en.wikipedia.org/wiki/Anomaly_in_software
https://en.wikipedia.org/w/index.php?title=Software_quality&action=edit&section=20
http://www.spinellis.gr/codequality
http://doi.ieeecomputersociety.org/10.1109/MS.2004.1331309
https://www.researchgate.net/publication/258105237_The_Definition_of_Software_Quality-_A_Practical_Approach
https://en.wikipedia.org/wiki/Capers_Jones
https://en.wikipedia.org/wiki/International_Standard_Book_Number
https://en.wikipedia.org/wiki/Special:BookSources/978-0-13-258220-9
http://www.sei.cmu.edu/library/abstracts/presentations/esepg.cfm
http://arxiv-web3.library.cornell.edu/abs/1408.3253
https://www.springer.com/us/book/9783642385704
https://en.wikipedia.org/wiki/Software_quality
https://en.wikipedia.org/w/index.php?title=Software_quality&action=edit&section=21
https://en.wikipedia.org/wiki/Software_quality
https://en.wikipedia.org/wiki/Software_quality
https://en.wikipedia.org/wiki/Software_quality
http://www.omg.org/CISQ_compliant_IT_Systemsv.4-3.pdf
https://en.wikipedia.org/wiki/Software_quality
http://webstore.iec.ch/preview/info_isoiec25000%7Bed1.0%7Den.pdf
https://en.wikipedia.org/wiki/Software_quality
http://www.iso.org/iso/catalogue_detail.htm?csnumber=35733
https://en.wikipedia.org/wiki/Software_quality
http://www.hpi.uni-potsdam.de/doellner/publications/year/2011/1428/BD2011.html
https://en.wikipedia.org/wiki/Software_quality
http://sunnyday.mit.edu/papers/therac.pdf
https://en.wikipedia.org/wiki/Software_quality
http://ptolemy.eecs.berkeley.edu/publications/papers/02/embsoft/embsoftwre.pdf
https://en.wikipedia.org/wiki/Software_quality
http://www.faa.gov/aircraft/air_cert/design_approvals/air_software
https://en.wikipedia.org/wiki/Software_quality
http://www.ralphyoung.net/conferences/ImprovingQuality2.ppt
https://en.wikipedia.org/wiki/Software_quality
https://en.wikipedia.org/wiki/Software_quality
https://en.wikipedia.org/wiki/Software_quality
https://en.wikipedia.org/wiki/Software_quality
https://en.wikipedia.org/wiki/Software_quality
https://en.wikipedia.org/wiki/Software_quality
https://en.wikipedia.org/wiki/Software_quality
https://en.wikipedia.org/wiki/Software_quality
https://en.wikipedia.org/wiki/Software_quality
https://en.wikipedia.org/wiki/Software_quality
https://en.wikipedia.org/wiki/Software_quality
https://en.wikipedia.org/wiki/Software_quality
https://en.wikipedia.org/wiki/Software_quality
http://it-cisq.org/wp-content/uploads/2012/09/CISQ_2009_Executive_Forums_Report.pdf
https://en.wikipedia.org/wiki/Software_quality
https://en.wikipedia.org/wiki/Software_quality
https://en.wikipedia.org/wiki/Software_quality
https://en.wikipedia.org/wiki/Software_quality
https://en.wikipedia.org/wiki/Software_quality
https://en.wikipedia.org/wiki/Software_quality
http://www.omg.org/CISQ_compliant_IT_Systemsv.4-3.pdf
https://en.wikipedia.org/wiki/Software_quality
https://en.wikipedia.org/wiki/Software_quality
https://en.wikipedia.org/wiki/Software_quality
https://en.wikipedia.org/wiki/Software_quality
https://en.wikipedia.org/wiki/Software_quality
https://cwe.mitre.org/
https://en.wikipedia.org/wiki/Software_quality
https://en.wikipedia.org/wiki/Software_quality
http://cwe.mitre.org/
https://en.wikipedia.org/wiki/Software_quality
http://www.sans.org/top25-programming-errors/
https://en.wikipedia.org/wiki/Software_quality
http://www.ifsq.org/resources/level-2/booklet.pdf
https://en.wikipedia.org/wiki/Software_quality
http://martinfowler.com/bliki/TechnicalDebtQuadrant.html
https://en.wikipedia.org/wiki/Software_quality
http://ieeexplore.ieee.org/xpls/abs_all.jsp?arnumber=6225956
https://en.wikipedia.org/wiki/Software_quality
http://elib.uni-stuttgart.de/opus/volltexte/2015/9916/pdf/quamoco.pdf
https://en.wikipedia.org/wiki/Digital_object_identifier
https://doi.org/10.1016/j.infsof.2015.02.009
https://en.wikipedia.org/wiki/Software_quality
http://ieeexplore.ieee.org/document/7140652/?arnumber=7140652
https://en.wikipedia.org/wiki/Digital_object_identifier
https://doi.org/10.1109/MS.2015.87
https://en.wikipedia.org/w/index.php?title=Software_quality&action=edit&section=22
https://www.wired.com/software/coolapps/news/2004/12/66022
http://it-cisq.org/wp-content/uploads/2012/09/13-02-01-Automated-Function-Points.pdf
https://en.wikipedia.org/wiki/Template:Software_engineering
https://en.wikipedia.org/wiki/Template_talk:Software_engineering
https://en.wikipedia.org/w/index.php?title=Template:Software_engineering&action=edit
https://en.wikipedia.org/wiki/Software_engineering
https://en.wikipedia.org/wiki/Computer_programming
https://en.wikipedia.org/wiki/Requirements_engineering
https://en.wikipedia.org/wiki/Software_deployment
https://en.wikipedia.org/wiki/Software_design
https://en.wikipedia.org/wiki/Software_maintenance
https://en.wikipedia.org/wiki/Software_testing
https://en.wikipedia.org/wiki/Systems_analysis
https://en.wikipedia.org/wiki/Formal_methods
https://en.wikipedia.org/wiki/Data_modeling
https://en.wikipedia.org/wiki/Enterprise_architecture
https://en.wikipedia.org/wiki/Functional_specification
https://en.wikipedia.org/wiki/Modeling_language
https://en.wikipedia.org/wiki/Orthogonality_(programming)
https://en.wikipedia.org/wiki/Programming_paradigm
https://en.wikipedia.org/wiki/Software
https://en.wikipedia.org/wiki/Software_archaeology
https://en.wikipedia.org/wiki/Software_architecture
https://en.wikipedia.org/wiki/Software_configuration_management
https://en.wikipedia.org/wiki/Software_development_process
https://en.wikipedia.org/wiki/Software_development_process
https://en.wikipedia.org/wiki/Software_quality_assurance
https://en.wikipedia.org/wiki/Software_verification_and_validation
https://en.wikipedia.org/wiki/Structured_analysis
https://en.wikipedia.org/wiki/Agile_software_development
https://en.wikipedia.org/wiki/Aspect-oriented_software_development
https://en.wikipedia.org/wiki/Object-oriented_programming
https://en.wikipedia.org/wiki/Ontology_(information_science)
https://en.wikipedia.org/wiki/Service-oriented_architecture
https://en.wikipedia.org/wiki/Systems_development_life_cycle
https://en.wikipedia.org/wiki/Agile_software_development
https://en.wikipedia.org/wiki/Enterprise_Unified_Process
https://en.wikipedia.org/wiki/Executable_UML
https://en.wikipedia.org/wiki/Incremental_build_model
https://en.wikipedia.org/wiki/Iterative_and_incremental_development
https://en.wikipedia.org/wiki/Software_prototyping
https://en.wikipedia.org/wiki/Rapid_application_development
https://en.wikipedia.org/wiki/Unified_Process
https://en.wikipedia.org/wiki/Scrum_(software_development)
https://en.wikipedia.org/wiki/Spiral_model
https://en.wikipedia.org/wiki/V-Model_(software_development)
https://en.wikipedia.org/wiki/Waterfall_model
https://en.wikipedia.org/wiki/Extreme_programming
https://en.wikipedia.org/wiki/ISO/IEC_15504
https://en.wikipedia.org/wiki/Capability_Maturity_Model_Integration
https://en.wikipedia.org/wiki/Data_model
https://en.wikipedia.org/wiki/Entity–relationship_model
https://en.wikipedia.org/wiki/Function_model
https://en.wikipedia.org/wiki/Information_model
https://en.wikipedia.org/wiki/Metamodeling
https://en.wikipedia.org/wiki/Object_model
https://en.wikipedia.org/wiki/Systems_modeling
https://en.wikipedia.org/wiki/View_model
https://en.wikipedia.org/wiki/IDEF
https://en.wikipedia.org/wiki/Unified_Modeling_Language
https://en.wikipedia.org/wiki/Universal_Systems_Language
https://en.wikipedia.org/wiki/Systems_Modeling_Language
https://en.wikipedia.org/wiki/Victor_Basili
https://en.wikipedia.org/wiki/Kent_Beck
https://en.wikipedia.org/wiki/Grady_Booch
https://en.wikipedia.org/wiki/Fred_Brooks
https://en.wikipedia.org/wiki/Barry_Boehm
https://en.wikipedia.org/wiki/Peter_Chen
https://en.wikipedia.org/wiki/Danese_Cooper
https://en.wikipedia.org/wiki/Ward_Cunningham
https://en.wikipedia.org/wiki/Tom_DeMarco
https://en.wikipedia.org/wiki/Edsger_W._Dijkstra
https://en.wikipedia.org/wiki/Delores_M._Etter
https://en.wikipedia.org/wiki/Martin_Fowler
https://en.wikipedia.org/wiki/Adele_Goldstine
https://en.wikipedia.org/wiki/Margaret_Hamilton_(scientist)
https://en.wikipedia.org/wiki/Tony_Hoare
https://en.wikipedia.org/wiki/Lois_Haibt
https://en.wikipedia.org/wiki/Mary_Jean_Harrold
https://en.wikipedia.org/wiki/Grace_Hopper
https://en.wikipedia.org/wiki/Watts_Humphrey
https://en.wikipedia.org/wiki/Michael_A._Jackson
https://en.wikipedia.org/wiki/Ivar_Jacobson
https://en.wikipedia.org/wiki/Alan_Kay
https://en.wikipedia.org/wiki/Nancy_Leveson
https://en.wikipedia.org/wiki/Stephen_J._Mellor
https://en.wikipedia.org/wiki/Bertrand_Meyer
https://en.wikipedia.org/wiki/David_Parnas
https://en.wikipedia.org/wiki/Trygve_Reenskaug
https://en.wikipedia.org/wiki/Winston_W._Royce
https://en.wikipedia.org/wiki/James_Rumbaugh
https://en.wikipedia.org/wiki/Mary_Shaw_(computer_scientist)
https://en.wikipedia.org/wiki/Peri_Tarr
https://en.wikipedia.org/wiki/Elaine_Weyuker
https://en.wikipedia.org/wiki/Niklaus_Wirth
https://en.wikipedia.org/wiki/Edward_Yourdon
https://en.wikipedia.org/wiki/Computer_science
https://en.wikipedia.org/wiki/Computer_engineering
https://en.wikipedia.org/wiki/Project_management
https://en.wikipedia.org/wiki/Risk_management
https://en.wikipedia.org/wiki/Systems_engineering
https://en.wikipedia.org/wiki/Category:Software_engineering
https://commons.wikimedia.org/wiki/Software_engineering
https://en.wikipedia.org/wiki/Template:Computer_science
https://en.wikipedia.org/wiki/Template_talk:Computer_science
https://en.wikipedia.org/w/index.php?title=Template:Computer_science&action=edit
https://en.wikipedia.org/wiki/Computer_science
https://en.wikipedia.org/wiki/ACM_Computing_Classification_System
https://en.wikipedia.org/wiki/Computer_hardware
https://en.wikipedia.org/wiki/Printed_circuit_board
https://en.wikipedia.org/wiki/Peripheral
https://en.wikipedia.org/wiki/Integrated_circuit
https://en.wikipedia.org/wiki/Very-large-scale_integration
https://en.wikipedia.org/wiki/Green_computing
https://en.wikipedia.org/wiki/Electronic_design_automation
https://en.wikipedia.org/wiki/Computer_architecture
https://en.wikipedia.org/wiki/Embedded_system
https://en.wikipedia.org/wiki/Real-time_computing
https://en.wikipedia.org/wiki/Dependability
https://en.wikipedia.org/wiki/Computer_network
https://en.wikipedia.org/wiki/Network_architecture
https://en.wikipedia.org/wiki/Network_protocol
https://en.wikipedia.org/wiki/Networking_hardware
https://en.wikipedia.org/wiki/Network_scheduler
https://en.wikipedia.org/wiki/Network_performance
https://en.wikipedia.org/wiki/Network_service
https://en.wikipedia.org/wiki/Interpreter_(computing)
https://en.wikipedia.org/wiki/Middleware
https://en.wikipedia.org/wiki/Virtual_machine
https://en.wikipedia.org/wiki/Operating_system
https://en.wikipedia.org/wiki/Programming_language_theory
https://en.wikipedia.org/wiki/Programming_tool
https://en.wikipedia.org/wiki/Programming_paradigm
https://en.wikipedia.org/wiki/Programming_language
https://en.wikipedia.org/wiki/Compiler_construction
https://en.wikipedia.org/wiki/Domain-specific_language
https://en.wikipedia.org/wiki/Modeling_language
https://en.wikipedia.org/wiki/Software_framework
https://en.wikipedia.org/wiki/Integrated_development_environment
https://en.wikipedia.org/wiki/Software_configuration_management
https://en.wikipedia.org/wiki/Library_(computing)
https://en.wikipedia.org/wiki/Software_repository
https://en.wikipedia.org/wiki/Software_development
https://en.wikipedia.org/wiki/Software_development_process
https://en.wikipedia.org/wiki/Requirements_analysis
https://en.wikipedia.org/wiki/Software_design
https://en.wikipedia.org/wiki/Software_construction
https://en.wikipedia.org/wiki/Software_deployment
https://en.wikipedia.org/wiki/Software_maintenance
https://en.wikipedia.org/wiki/Programming_team
https://en.wikipedia.org/wiki/Open-source_software
https://en.wikipedia.org/wiki/Theory_of_computation
https://en.wikipedia.org/wiki/Model_of_computation
https://en.wikipedia.org/wiki/Formal_language
https://en.wikipedia.org/wiki/Automata_theory
https://en.wikipedia.org/wiki/Computational_complexity_theory
https://en.wikipedia.org/wiki/Logic_in_computer_science
https://en.wikipedia.org/wiki/Semantics_(computer_science)
https://en.wikipedia.org/wiki/Algorithm
https://en.wikipedia.org/wiki/Algorithm_design
https://en.wikipedia.org/wiki/Analysis_of_algorithms
https://en.wikipedia.org/wiki/Randomized_algorithm
https://en.wikipedia.org/wiki/Computational_geometry
https://en.wikipedia.org/wiki/Discrete_mathematics
https://en.wikipedia.org/wiki/Probability
https://en.wikipedia.org/wiki/Statistics
https://en.wikipedia.org/wiki/Mathematical_software
https://en.wikipedia.org/wiki/Information_theory
https://en.wikipedia.org/wiki/Mathematical_analysis
https://en.wikipedia.org/wiki/Numerical_analysis
https://en.wikipedia.org/wiki/Information_system
https://en.wikipedia.org/wiki/Database_management_system
https://en.wikipedia.org/wiki/Computer_data_storage
https://en.wikipedia.org/wiki/Enterprise_information_system
https://en.wikipedia.org/wiki/Social_software
https://en.wikipedia.org/wiki/Geographic_information_system
https://en.wikipedia.org/wiki/Decision_support_system
https://en.wikipedia.org/wiki/Process_control
https://en.wikipedia.org/wiki/Multimedia_database
https://en.wikipedia.org/wiki/Data_mining
https://en.wikipedia.org/wiki/Digital_library
https://en.wikipedia.org/wiki/Computing_platform
https://en.wikipedia.org/wiki/Digital_marketing
https://en.wikipedia.org/wiki/World_Wide_Web
https://en.wikipedia.org/wiki/Information_retrieval
https://en.wikipedia.org/wiki/Computer_security
https://en.wikipedia.org/wiki/Cryptography
https://en.wikipedia.org/wiki/Formal_methods
https://en.wikipedia.org/wiki/Security_service_(telecommunication)
https://en.wikipedia.org/wiki/Intrusion_detection_system
https://en.wikipedia.org/wiki/Computer_security_compromised_by_hardware_failure
https://en.wikipedia.org/wiki/Network_security
https://en.wikipedia.org/wiki/Information_security
https://en.wikipedia.org/wiki/Application_security
https://en.wikipedia.org/wiki/Human–computer_interaction
https://en.wikipedia.org/wiki/Interaction_design
https://en.wikipedia.org/wiki/Social_computing
https://en.wikipedia.org/wiki/Ubiquitous_computing
https://en.wikipedia.org/wiki/Visualization_(computer_graphics)
https://en.wikipedia.org/wiki/Computer_accessibility
https://en.wikipedia.org/wiki/Concurrency_(computer_science)
https://en.wikipedia.org/wiki/Concurrent_computing
https://en.wikipedia.org/wiki/Parallel_computing
https://en.wikipedia.org/wiki/Distributed_computing
https://en.wikipedia.org/wiki/Multithreading_(computer_architecture)
https://en.wikipedia.org/wiki/Multiprocessing
https://en.wikipedia.org/wiki/Artificial_intelligence
https://en.wikipedia.org/wiki/Natural_language_processing
https://en.wikipedia.org/wiki/Knowledge_representation_and_reasoning
https://en.wikipedia.org/wiki/Computer_vision
https://en.wikipedia.org/wiki/Automated_planning_and_scheduling
https://en.wikipedia.org/wiki/Mathematical_optimization
https://en.wikipedia.org/wiki/Control_theory
https://en.wikipedia.org/wiki/Philosophy_of_artificial_intelligence
https://en.wikipedia.org/wiki/Distributed_artificial_intelligence
https://en.wikipedia.org/wiki/Machine_learning
https://en.wikipedia.org/wiki/Supervised_learning
https://en.wikipedia.org/wiki/Unsupervised_learning
https://en.wikipedia.org/wiki/Reinforcement_learning
https://en.wikipedia.org/wiki/Multi-task_learning
https://en.wikipedia.org/wiki/Cross-validation_(statistics)
https://en.wikipedia.org/wiki/Computer_graphics
https://en.wikipedia.org/wiki/Computer_animation
https://en.wikipedia.org/wiki/Rendering_(computer_graphics)
https://en.wikipedia.org/wiki/Photo_manipulation
https://en.wikipedia.org/wiki/Graphics_processing_unit
https://en.wikipedia.org/wiki/Mixed_reality
https://en.wikipedia.org/wiki/Virtual_reality
https://en.wikipedia.org/wiki/Image_compression
https://en.wikipedia.org/wiki/Solid_modeling
https://en.wikipedia.org/wiki/E-commerce
https://en.wikipedia.org/wiki/Enterprise_software
https://en.wikipedia.org/wiki/Computational_mathematics
https://en.wikipedia.org/wiki/Computational_physics
https://en.wikipedia.org/wiki/Computational_chemistry
https://en.wikipedia.org/wiki/Computational_biology
https://en.wikipedia.org/wiki/Computational_social_science
https://en.wikipedia.org/wiki/Computational_engineering
https://en.wikipedia.org/wiki/Health_informatics
https://en.wikipedia.org/wiki/Digital_art
https://en.wikipedia.org/wiki/Electronic_publishing
https://en.wikipedia.org/wiki/Cyberwarfare
https://en.wikipedia.org/wiki/Electronic_voting
https://en.wikipedia.org/wiki/Video_game
https://en.wikipedia.org/wiki/Word_processor
https://en.wikipedia.org/wiki/Operations_research
https://en.wikipedia.org/wiki/Educational_technology
https://en.wikipedia.org/wiki/Document_management_system
https://en.wikipedia.org/wiki/Book:Computer_science
https://en.wikipedia.org/wiki/Category:Computer_science
https://en.wikipedia.org/wiki/Portal:Computer_science
https://en.wikipedia.org/wiki/Wikipedia:WikiProject_Computer_science
https://commons.wikimedia.org/wiki/Category:Computer_science
https://en.wikipedia.org/w/index.php?title=Software_quality&oldid=806906459
https://en.wikipedia.org/wiki/Help:Category
https://en.wikipedia.org/wiki/Category:Software_quality
https://en.wikipedia.org/wiki/Category:Systems_thinking
https://en.wikipedia.org/wiki/Category:Software_testing
https://en.wikipedia.org/wiki/Category:Source_code
https://en.wikipedia.org/wiki/Category:All_articles_with_unsourced_statements
https://en.wikipedia.org/wiki/Category:Articles_with_unsourced_statements_from_December_2013
https://en.wikipedia.org/wiki/Special:MyTalk
https://en.wikipedia.org/wiki/Special:MyContributions
https://en.wikipedia.org/w/index.php?title=Special:CreateAccount&returnto=Software+quality
https://en.wikipedia.org/w/index.php?title=Special:UserLogin&returnto=Software+quality
https://en.wikipedia.org/wiki/Software_quality
https://en.wikipedia.org/wiki/Talk:Software_quality
https://en.wikipedia.org/wiki/Software_quality
https://en.wikipedia.org/w/index.php?title=Software_quality&action=edit
https://en.wikipedia.org/w/index.php?title=Software_quality&action=history
https://en.wikipedia.org/wiki/Main_Page
https://en.wikipedia.org/wiki/Main_Page
https://en.wikipedia.org/wiki/Portal:Contents
https://en.wikipedia.org/wiki/Portal:Featured_content
https://en.wikipedia.org/wiki/Portal:Current_events
https://en.wikipedia.org/wiki/Special:Random
https://donate.wikimedia.org/wiki/Special:FundraiserRedirector?utm_source=donate&utm_medium=sidebar&utm_campaign=C13_en.wikipedia.org&uselang=en
https://shop.wikimedia.org
https://en.wikipedia.org/wiki/Help:Contents
https://en.wikipedia.org/wiki/Wikipedia:About
https://en.wikipedia.org/wiki/Wikipedia:Community_portal
https://en.wikipedia.org/wiki/Special:RecentChanges
https://en.wikipedia.org/wiki/Wikipedia:Contact_us
https://en.wikipedia.org/wiki/Special:WhatLinksHere/Software_quality
https://en.wikipedia.org/wiki/Special:RecentChangesLinked/Software_quality
https://en.wikipedia.org/wiki/Wikipedia:File_Upload_Wizard
https://en.wikipedia.org/wiki/Special:SpecialPages
https://en.wikipedia.org/w/index.php?title=Software_quality&oldid=806906459
https://en.wikipedia.org/w/index.php?title=Software_quality&action=info
https://www.wikidata.org/wiki/Special:EntityPage/Q1412670
https://en.wikipedia.org/w/index.php?title=Special:CiteThisPage&page=Software_quality&id=806906459
https://en.wikipedia.org/w/index.php?title=Special:Book&bookcmd=book_creator&referer=Software+quality
https://en.wikipedia.org/w/index.php?title=Special:ElectronPdf&page=Software+quality&action=show-download-screen
https://en.wikipedia.org/w/index.php?title=Software_quality&printable=yes
https://ar.wikipedia.org/wiki/جودة_البرمجيات
https://bg.wikipedia.org/wiki/Качествен_програмен_код
https://ca.wikipedia.org/wiki/Qualitat_del_programari
https://de.wikipedia.org/wiki/Softwarequalität
https://es.wikipedia.org/wiki/Calidad_de_software
https://fa.wikipedia.org/wiki/کیفیت_نرم‌افزار
https://fr.wikipedia.org/wiki/Qualité_logicielle
https://ko.wikipedia.org/wiki/소프트웨어_품질
https://it.wikipedia.org/wiki/Qualità_del_software
https://mk.wikipedia.org/wiki/Квалитет_на_софтвер
https://ja.wikipedia.org/wiki/ソフトウェア品質
https://pl.wikipedia.org/wiki/Jakość_oprogramowania
https://pt.wikipedia.org/wiki/Qualidade_de_software
https://ru.wikipedia.org/wiki/Качество_программного_обеспечения
https://fi.wikipedia.org/wiki/Ohjelmiston_laatu
https://uk.wikipedia.org/wiki/Якість_програмного_забезпечення
https://vi.wikipedia.org/wiki/Chất_lượng_phần_mềm
https://zh.wikipedia.org/wiki/软件质量
https://www.wikidata.org/wiki/Special:EntityPage/Q1412670
https://en.wikipedia.org/wiki/Wikipedia:Text_of_Creative_Commons_Attribution-ShareAlike_3.0_Unported_License
https://creativecommons.org/licenses/by-sa/3.0/
https://wikimediafoundation.org/wiki/Terms_of_Use
https://wikimediafoundation.org/wiki/Privacy_policy
https://www.wikimediafoundation.org/
https://wikimediafoundation.org/wiki/Privacy_policy
https://en.wikipedia.org/wiki/Wikipedia:About
https://en.wikipedia.org/wiki/Wikipedia:General_disclaimer
https://en.wikipedia.org/wiki/Wikipedia:Contact_us
https://www.mediawiki.org/wiki/Special:MyLanguage/How_to_contribute
https://wikimediafoundation.org/wiki/Cookie_statement
https://en.m.wikipedia.org/w/index.php?title=Software_quality&mobileaction=toggle_view_mobile
https://wikimediafoundation.org/
https://www.mediawiki.org/
