https://en.wikipedia.org/wiki/Turing_machine
Turing machine - Wikipedia
For other uses, see Turing machine (disambiguation). A Turing machine is a mathematical model of computation that defines an abstract machine which manipulates symbols on a strip of tape according to a...
turing machine from wikipedia the free encyclopedia jump to navigation search for other uses see turing machine disambiguation turing machines machine turing machine equivalents turing machine examples turing machine gallery variants alternating turing machine differentiable neural computer nondeterministic turing machine quantum turing machine post–turing machine probabilistic turing machine readonly turing machine readonly right moving turing machines multitape turing machine multitrack turing machine symmetric turing machine total turing machine unambiguous turing machine universal turing machine zeno machine science alan turing categoryturing machine v t e classes of automata clicking on each layer will take you to an article on that subject a turing machine is a mathematical model of computation that defines an abstract machine1 which manipulates symbols on a strip of tape according to a table of rules2 despite the models simplicity given any computer algorithm a turing machine can be constructed that is capable of simulating that algorithms logic3 the machine operates on an infinite4 memory tape divided into discrete cells5 the machine positions its head over a cell and reads scans6 the symbol there then as per the symbol and its present place in a finite table7 of userspecified instructions the machine i writes a symbol eg a digit or a letter from a finite alphabet in the cell some models allowing symbol erasure8 or no writing then ii either moves the tape one cell left or right some models allow no motion some models move the head9 then iii as determined by the observed symbol and the machines place in the table either proceeds to a subsequent instruction or halts10 the computation the turing machine was invented in 1936 by alan turing1112 who called it an amachine automatic machine13 with this model turing was able to answer two questions in the negative 1 does a machine exist that can determine whether any arbitrary machine on its tape is circular eg freezes or fails to continue its computational task similarly 2 does a machine exist that can determine whether any arbitrary machine on its tape ever prints a given symbol14 thus by providing a mathematical description of a very simple device capable of arbitrary computations he was able to prove properties of computation in general—and in particular the uncomputability of the entscheidungsproblem decision problem15 thus turing machines prove fundamental limitations on the power of mechanical computation16 while they can express arbitrary computations their minimalistic design makes them unsuitable for computation in practice realworld computers are based on different designs that unlike turing machines use randomaccess memory turing completeness is the ability for a system of instructions to simulate a turing machine a programming language that is turing complete is theoretically capable of expressing all tasks accomplishable by computers nearly all programming languages are turing complete if the limitations of finite memory are ignored contents 1 overview 11 physical description 2 informal description 3 formal definition 4 additional details required to visualize or implement turing machines 41 alternative definitions 42 the state 43 turing machine state diagrams 5 models equivalent to the turing machine model 6 choice cmachines oracle omachines 7 universal turing machines 8 comparison with real machines 81 limitations of turing machines 811 computational complexity theory 812 concurrency 813 interaction 9 history 91 historical background computational machinery 92 the entscheidungsproblem the decision problem hilberts tenth question of 1900 93 alan turings amachine 94 1937–1970 the digital computer the birth of computer science 95 1970–present the turing machine as a model of computation 10 see also 11 notes 12 references 121 primary literature reprints and compilations 122 computability theory 123 churchs thesis 124 small turing machines 125 other 13 external links overviewedit a turing machine is a general example of a cpu that controls all data manipulation done by a computer with the canonical machine using sequential memory to store data more specifically it is a machine automaton capable of enumerating some arbitrary subset of valid strings of an alphabet these strings are part of a recursively enumerable set assuming a black box the turing machine cannot know whether it will eventually enumerate any one specific string of the subset with a given program this is due to the fact that the halting problem is unsolvable which has major implications for the theoretical limits of computing the turing machine is capable of processing an unrestricted grammar which further implies that it is capable of robustly evaluating firstorder logic in an infinite number of ways this is famously demonstrated through lambda calculus a turing machine that is able to simulate any other turing machine is called a universal turing machine utm or simply a universal machine a more mathematically oriented definition with a similar universal nature was introduced by alonzo church whose work on lambda calculus intertwined with turings in a formal theory of computation known as the church–turing thesis the thesis states that turing machines indeed capture the informal notion of effective methods in logic and mathematics and provide a precise definition of an algorithm or mechanical procedure studying their abstract properties yields many insights into computer science and complexity theory physical descriptionedit in his 1948 essay intelligent machinery turing wrote that his machine consisted of an unlimited memory capacity obtained in the form of an infinite tape marked out into squares on each of which a symbol could be printed at any moment there is one symbol in the machine it is called the scanned symbol the machine can alter the scanned symbol and its behavior is in part determined by that symbol but the symbols on the tape elsewhere do not affect the behavior of the machine however the tape can be moved back and forth through the machine this being one of the elementary operations of the machine any symbol on the tape may therefore eventually have an innings17 turing 1948 p 318 informal descriptionedit for visualizations of turing machines see turing machine gallery the turing machine mathematically models a machine that mechanically operates on a tape on this tape are symbols which the machine can read and write one at a time using a tape head operation is fully determined by a finite set of elementary instructions such as in state 42 if the symbol seen is 0 write a 1 if the symbol seen is 1 change into state 17 in state 17 if the symbol seen is 0 write a 1 and change to state 6 etc in the original article on computable numbers with an application to the entscheidungsproblem see also references below turing imagines not a mechanism but a person whom he calls the computer who executes these deterministic mechanical rules slavishly or as turing puts it in a desultory manner the head is always over a particular square of the tape only a finite stretch of squares is shown the instruction to be performed q4 is shown over the scanned square drawing after kleene 1952 p 375 here the internal state q1 is shown inside the head and the illustration describes the tape as being infinite and prefilled with 0 the symbol serving as blank the systems full state its complete configuration consists of the internal state any nonblank symbols on the tape in this illustration 11b and the position of the head relative to those symbols including blanks ie 011b drawing after minsky 1967 p 121 more precisely a turing machine consists of a tape divided into cells one next to the other each cell contains a symbol from some finite alphabet the alphabet contains a special blank symbol here written as 0 and one or more other symbols the tape is assumed to be arbitrarily extendable to the left and to the right ie the turing machine is always supplied with as much tape as it needs for its computation cells that have not been written before are assumed to be filled with the blank symbol in some models the tape has a left end marked with a special symbol the tape extends or is indefinitely extensible to the right a head that can read and write symbols on the tape and move the tape left and right one and only one cell at a time in some models the head moves and the tape is stationary a state register that stores the state of the turing machine one of finitely many among these is the special start state with which the state register is initialized these states writes turing replace the state of mind a person performing computations would ordinarily be in a finite table19 of instructions20 that given the stateqi the machine is currently in and the symbolaj it is reading on the tape symbol currently under the head tells the machine to do the following in sequence for the 5tuple models either erase or write a symbol replacing aj with aj1 move the head which is described by dk and can have values l for one step left or r for one step right or n for staying in the same place assume the same or a new state as prescribed go to state qi1 in the 4tuple models erasing or writing a symbol aj1 and moving the head left or right dk are specified as separate instructions specifically the table tells the machine to ia erase or write a symbol or ib move the head left or right and then ii assume the same or a new state as prescribed but not both actions ia and ib in the same instruction in some models if there is no entry in the table for the current combination of symbol and state then the machine will halt other models require all entries to be filled note that every part of the machine ie its state symbolcollections and used tape at any given time and its actions such as printing erasing and tape motion is finite discrete and distinguishable it is the unlimited amount of tape and runtime that gives it an unbounded amount of storage space formal definitionedit following hopcroft and ullman 1979 p 148 a onetape turing machine can be formally defined as a 7tuple m ⟨ q γ b σ δ q 0 f ⟩ displaystyle mlangle qgamma bsigma delta q0frangle where q displaystyle q is a finite nonempty set of states γ displaystyle gamma is a finite nonempty set of tape alphabet symbols b ∈ γ displaystyle bin gamma is the blank symbol the only symbol allowed to occur on the tape infinitely often at any step during the computation σ ⊆ γ ∖ b displaystyle sigma subseteq gamma setminus b is the set of input symbols that is the set of symbols allowed to appear in the initial tape contents δ q ∖ f × γ → q × γ × l r displaystyle delta qsetminus ftimes gamma rightarrow qtimes gamma times lr is a partial function called the transition function where l is left shift r is right shift a relatively uncommon variant allows no shift say n as a third element of the latter set if δ displaystyle delta is not defined on the current state and the current tape symbol then the machine halts21 q 0 ∈ q displaystyle q0in q is the initial state f ⊆ q displaystyle fsubseteq q is the set of final states or accepting states the initial tape contents is said to be accepted by m displaystyle m if it eventually halts in a state from f displaystyle f anything that operates according to these specifications is a turing machine the 7tuple for the 3state busy beaver looks like this see more about this busy beaver at turing machine examples q a b c halt displaystyle qmboxamboxbmboxcmboxhalt states γ 0 1 displaystyle gamma 01 tape alphabet symbols b 0 displaystyle b0 blank symbol σ 1 displaystyle sigma 1 input symbols q 0 a displaystyle q0mboxa initial state f halt displaystyle fmboxhalt final states δ displaystyle delta see statetable below transition function initially all tape cells are marked with 0 displaystyle 0 state table for 3 state 2 symbol busy beaver tape symbol current state a current state b current state c write symbol move tape next state write symbol move tape next state write symbol move tape next state 0 1 r b 1 l a 1 l b 1 1 l c 1 r b 1 r halt additional details required to visualize or implement turing machinesedit in the words of van emde boas 1990 p 6 the settheoretical object his formal seventuple description similar to the above provides only partial information on how the machine will behave and what its computations will look like for instance there will need to be many decisions on what the symbols actually look like and a failproof way of reading and writing symbols indefinitely the shift left and shift right operations may shift the tape head across the tape but when actually building a turing machine it is more practical to make the tape slide back and forth under the head instead the tape can be finite and automatically extended with blanks as needed which is closest to the mathematical definition but it is more common to think of it as stretching infinitely at both ends and being prefilled with blanks except on the explicitly given finite fragment the tape head is on this is of course not implementable in practice the tape cannot be fixed in length since that would not correspond to the given definition and would seriously limit the range of computations the machine can perform to those of a linear bounded automaton alternative definitionsedit definitions in literature sometimes differ slightly to make arguments or proofs easier or clearer but this is always done in such a way that the resulting machine has the same computational power for example changing the set l r displaystyle lr to l r n displaystyle lrn where n none or nooperation would allow the machine to stay on the same tape cell instead of moving left or right does not increase the machines computational power the most common convention represents each turing instruction in a turing table by one of nine 5tuples per the convention of turingdavis turing 1936 in the undecidable p 126127 and davis 2000 p 152 definition 1 qi sj sken lrn qm current state qi symbol scanned sj print symbol skerase enone n movetapeonesquare left lright rnone n new state qm other authors minsky 1967 p 119 hopcroft and ullman 1979 p 158 stone 1972 p 9 adopt a different convention with new state qm listed immediately after the scanned symbol sj definition 2 qi sj qm sken lrn current state qi symbol scanned sj new state qm print symbol skerase enone n movetapeonesquare left lright rnone n for the remainder of this article definition 1 the turingdavis convention will be used example state table for the 3state 2symbol busy beaver reduced to 5tuples current state scanned symbol print symbol move tape final ie next state 5tuples a 0 1 r b a 0 1 r b a 1 1 l c a 1 1 l c b 0 1 l a b 0 1 l a b 1 1 r b b 1 1 r b c 0 1 l b c 0 1 l b c 1 1 n h c 1 1 n h in the following table turings original model allowed only the first three lines that he called n1 n2 n3 cf turing in the undecidable p 126 he allowed for erasure of the scanned square by naming a 0th symbol s0 erase or blank etc however he did not allow for nonprinting so every instructionline includes print symbol sk or erase cf footnote 12 in post 1947 the undecidable p 300 the abbreviations are turings the undecidable p 119 subsequent to turings original paper in 1936–1937 machinemodels have allowed all nine possible types of fivetuples current mconfiguration turing state tape symbol printoperation tapemotion final mconfiguration turing state 5tuple 5tuple comments 4tuple n1 qi sj printsk left l qm qi sj sk l qm blank s0 1s1 etc n2 qi sj printsk right r qm qi sj sk r qm blank s0 1s1 etc n3 qi sj printsk none n qm qi sj sk n qm blank s0 1s1 etc qi sj sk qm 4 qi sj none n left l qm qi sj n l qm qi sj l qm 5 qi sj none n right r qm qi sj n r qm qi sj r qm 6 qi sj none n none n qm qi sj n n qm direct jump qi sj n qm 7 qi sj erase left l qm qi sj e l qm 8 qi sj erase right r qm qi sj e r qm 9 qi sj erase none n qm qi sj e n qm qi sj e qm any turing table list of instructions can be constructed from the above nine 5tuples for technical reasons the three nonprinting or n instructions 4 5 6 can usually be dispensed with for examples see turing machine examples less frequently the use of 4tuples are encountered these represent a further atomization of the turing instructions cf post 1947 boolos jeffrey 1974 1999 davissigalweyuker 1994 also see more at post–turing machine the stateedit the word state used in context of turing machines can be a source of confusion as it can mean two things most commentators after turing have used state to mean the namedesignator of the current instruction to be performed—ie the contents of the state register but turing 1936 made a strong distinction between a record of what he called the machines mconfiguration and the machines or persons state of progress through the computation the current state of the total system what turing called the state formula includes both the current instruction and all the symbols on the tape thus the state of progress of the computation at any stage is completely determined by the note of instructions and the symbols on the tape that is the state of the system may be described by a single expression sequence of symbols consisting of the symbols on the tape followed by δ which we suppose not to appear elsewhere and then by the note of instructions this expression is called the state formula — the undecidable pp 139–140 emphasis added earlier in his paper turing carried this even further he gives an example where he placed a symbol of the current mconfiguration—the instructions label—beneath the scanned square together with all the symbols on the tape the undecidable p 121 this he calls the complete configuration the undecidable p 118 to print the complete configuration on one line he places the statelabelmconfiguration to the left of the scanned symbol a variant of this is seen in kleene 1952 where kleene shows how to write the gödel number of a machines situation he places the mconfiguration symbol q4 over the scanned square in roughly the center of the 6 nonblank squares on the tape see the turingtape figure in this article and puts it to the right of the scanned square but kleene refers to q4 itself as the machine state kleene p 374375 hopcroft and ullman call this composite the instantaneous description and follow the turing convention of putting the current state instructionlabel mconfiguration to the left of the scanned symbol p 149 example total state of 3state 2symbol busy beaver after 3 moves taken from example run in the figure below 1a1 this means after three moves the tape has 000110000 on it the head is scanning the rightmost 1 and the state is a blanks in this case represented by 0s can be part of the total state as shown here b01 the tape has a single 1 on it but the head is scanning the 0 blank to its left and the state is b state in the context of turing machines should be clarified as to which is being described i the current instruction or ii the list of symbols on the tape together with the current instruction or iii the list of symbols on the tape together with the current instruction placed to the left of the scanned symbol or to the right of the scanned symbol turings biographer andrew hodges 1983 107 has noted and discussed this confusion turing machine state diagramsedit the table for the 3state busy beaver p printwrite a 1 tape symbol current state a current state b current state c write symbol move tape next state write symbol move tape next state write symbol move tape next state 0 p r b p l a p l b 1 p l c p r b p r halt the 3state busy beaver turing machine in a finite state representation each circle represents a state of the table—an mconfiguration or instruction direction of a state transition is shown by an arrow the label eg 0pr near the outgoing state at the tail of the arrow specifies the scanned symbol that causes a particular transition eg 0 followed by a slash followed by the subsequent behaviors of the machine eg p print then move tape r right no general accepted format exists the convention shown is after mcclusky 1965 booth 1967 hill and peterson 1974 to the right the above table as expressed as a state transition diagram usually large tables are better left as tables booth p 74 they are more readily simulated by computer in tabular form booth p 74 however certain concepts—eg machines with reset states and machines with repeating patterns cf hill and peterson p 244ff—can be more readily seen when viewed as a drawing whether a drawing represents an improvement on its table must be decided by the reader for the particular context see finite state machine for more the evolution of the busybeavers computation starts at the top and proceeds to the bottom the reader should again be cautioned that such diagrams represent a snapshot of their table frozen in time not the course trajectory of a computation through time and space while every time the busy beaver machine runs it will always follow the same statetrajectory this is not true for the copy machine that can be provided with variable input parameters the diagram progress of the computation shows the threestate busy beavers state instruction progress through its computation from start to finish on the far right is the turing complete configuration kleene situation hopcroft–ullman instantaneous description at each step if the machine were to be stopped and cleared to blank both the state register and entire tape these configurations could be used to rekindle a computation anywhere in its progress cf turing 1936 the undecidable pp 139–140 models equivalent to the turing machine modeledit see also turing machine equivalents register machine and post–turing machine many machines that might be thought to have more computational capability than a simple universal turing machine can be shown to have no more power hopcroft and ullman p 159 cf minsky 1967 they might compute faster perhaps or use less memory or their instruction set might be smaller but they cannot compute more powerfully ie more mathematical functions recall that the church–turing thesis hypothesizes this to be true for any kind of machine that anything that can be computed can be computed by some turing machine a turing machine is equivalent to a singlestack pushdown automaton pda that has been made more flexible and concise by relaxing the lastinfirstout requirement of its stack in addition a turing machine is also equivalent to a twostack pda with standard lastinfirstout semantics by using one stack to model the right side and the other stack to model the left side of the turing machine at the other extreme some very simple models turn out to be turingequivalent ie to have the same computational power as the turing machine model common equivalent models are the multitape turing machine multitrack turing machine machines with input and output and the nondeterministic turing machine ndtm as opposed to the deterministic turing machine dtm for which the action table has at most one entry for each combination of symbol and state readonly rightmoving turing machines are equivalent to ndfas as well as dfas by conversion using the ndfa to dfa conversion algorithm for practical and didactical intentions the equivalent register machine can be used as a usual assembly programming language an interesting question is whether the computation model represented by concrete programming languages is turing equivalent while the computation of a real computer is based on finite states and thus not capable to simulate a turing machine programming languages themselves do not necessarily have this limitation kirner et al 2009 have shown that among the generalpurpose programming languages some are turing complete while others are not for example ansi c is not turingequivalent as all instantiations of ansi c different instantiations are possible as the standard deliberately leaves certain behaviour undefined for legacy reasons imply a finitespace memory this is because the size of memory reference data types is accessible inside the language however other programming languages like pascal do not have this feature which allows them to be turing complete in principle it is just turing complete in principle as memory allocation in a programming language is allowed to fail which means the programming language can be turing complete when ignoring failed memory allocations but the compiled programs executable on a real computer cannot choice cmachines oracle omachinesedit early in his paper 1936 turing makes a distinction between an automatic machine—its motion completely determined by the configuration and a choice machine whose motion is only partially determined by the configuration when such a machine reaches one of these ambiguous configurations it cannot go on until some arbitrary choice has been made by an external operator this would be the case if we were using machines to deal with axiomatic systems — the undecidable p 118 turing 1936 does not elaborate further except in a footnote in which he describes how to use an amachine to find all the provable formulae of the hilbert calculus rather than use a choice machine he supposes that the choices are always between two possibilities 0 and 1 each proof will then be determined by a sequence of choices i1 i2 in i1 0 or 1 i2 0 or 1 in 0 or 1 and hence the number 2n i12n1 i22n2 in completely determines the proof the automatic machine carries out successively proof 1 proof 2 proof 3 footnote ‡ the undecidable p 138 this is indeed the technique by which a deterministic ie a turing machine can be used to mimic the action of a nondeterministic turing machine turing solved the matter in a footnote and appears to dismiss it from further consideration an oracle machine or omachine is a turing amachine that pauses its computation at state o while to complete its calculation it awaits the decision of the oracle—an unspecified entity apart from saying that it cannot be a machine turing 1939 the undecidable p 166–168 the concept is now actively used by mathematicians universal turing machinesedit main article universal turing machine an implementation of a turing machine as turing wrote in the undecidable p 128 italics added it is possible to invent a single machine which can be used to compute any computable sequence if this machine u is supplied with the tape on the beginning of which is written the string of quintuples separated by semicolons of some computing machine m then u will compute the same sequence as m this finding is now taken for granted but at the time 1936 it was considered astonishing the model of computation that turing called his universal machine—u for short—is considered by some cf davis 2000 to have been the fundamental theoretical breakthrough that led to the notion of the storedprogram computer turings paper contains in essence the invention of the modern computer and some of the programming techniques that accompanied it — minsky 1967 p 104 in terms of computational complexity a multitape universal turing machine need only be slower by logarithmic factor compared to the machines it simulates this result was obtained in 1966 by f c hennie and r e stearns arora and barak 2009 theorem 19 comparison with real machinesedit a turing machine realisation in lego it is often saidwho that turing machines unlike simpler automata are as powerful as real machines and are able to execute any operation that a real program can what is neglected in this statement is that because a real machine can only have a finite number of configurations this real machine is really nothing but a linear bounded automaton on the other hand turing machines are equivalent to machines that have an unlimited amount of storage space for their computations however turing machines are not intended to model computers but rather they are intended to model computation itself historically computers which compute only on their fixed internal storage were developed only later there are a number of ways to explain why turing machines are useful models of real computers anything a real computer can compute a turing machine can also compute for example a turing machine can simulate any type of subroutine found in programming languages including recursive procedures and any of the known parameterpassing mechanisms hopcroft and ullman p 157 a large enough fsa can also model any real computer disregarding io thus a statement about the limitations of turing machines will also apply to real computers the difference lies only with the ability of a turing machine to manipulate an unbounded amount of data however given a finite amount of time a turing machine like a real machine can only manipulate a finite amount of data like a turing machine a real machine can have its storage space enlarged as needed by acquiring more disks or other storage media if the supply of these runs short the turing machine may become less useful as a model but the fact is that neither turing machines nor real machines need astronomical amounts of storage space in order to perform useful computation the processing time required is usually much more of a problem descriptions of real machine programs using simpler abstract models are often much more complex than descriptions using turing machines for example a turing machine describing an algorithm may have a few hundred states while the equivalent deterministic finite automaton dfa on a given real machine has quadrillions this makes the dfa representation infeasible to analyze turing machines describe algorithms independent of how much memory they use there is a limit to the memory possessed by any current machine but this limit can rise arbitrarily in time turing machines allow us to make statements about algorithms which will theoretically hold forever regardless of advances in conventional computing machine architecture turing machines simplify the statement of algorithms algorithms running on turingequivalent abstract machines are usually more general than their counterparts running on real machines because they have arbitraryprecision data types available and never have to deal with unexpected conditions including but not limited to running out of memory one way in which turing machines are a poor model for programs is that many real programs such as operating systems and word processors are written to receive unbounded input over time and therefore do not halt turing machines do not model such ongoing computation well but can still model portions of it such as individual procedures an experimental prototype of a turing machine limitations of turing machinesedit computational complexity theoryedit further information computational complexity theory a limitation of turing machines is that they do not model the strengths of a particular arrangement well for instance modern storedprogram computers are actually instances of a more specific form of abstract machine known as the randomaccess storedprogram machine or rasp machine model like the universal turing machine the rasp stores its program in memory external to its finitestate machines instructions unlike the universal turing machine the rasp has an infinite number of distinguishable numbered but unbounded registers—memory cells that can contain any integer cf elgot and robinson 1964 hartmanis 1971 and in particular cookrechow 1973 references at random access machine the rasps finitestate machine is equipped with the capability for indirect addressing eg the contents of one register can be used as an address to specify another register thus the rasps program can address any register in the registersequence the upshot of this distinction is that there are computational optimizations that can be performed based on the memory indices which are not possible in a general turing machine thus when turing machines are used as the basis for bounding running times a false lower bound can be proven on certain algorithms running times due to the false simplifying assumption of a turing machine an example of this is binary search an algorithm that can be shown to perform more quickly when using the rasp model of computation rather than the turing machine model concurrencyedit this section does not cite any sources please help improve this section by adding citations to reliable sources unsourced material may be challenged and removed april 2015 learn how and when to remove this template message another limitation of turing machines is that they do not model concurrency well for example there is a bound on the size of integer that can be computed by an alwayshalting nondeterministic turing machine starting on a blank tape see article on unbounded nondeterminism by contrast there are alwayshalting concurrent systems with no inputs that can compute an integer of unbounded size a process can be created with local storage that is initialized with a count of 0 that concurrently sends itself both a stop and a go message when it receives a go message it increments its count by 1 and sends itself a go message when it receives a stop message it stops with an unbounded number in its local storage interactionedit noninteractive computing can be simulated by a turing machine in the early days of computing it was common to use the computer for batch processing ie for noninteractive tasks where a series of jobs is processed with given input data however external input and output communication of real computers which enable interactivity cannot be modeled by a turing machine this is because a turing machine requires all input available initially on its tape no further input or change of input during the course of computation is possible in practical terms a turing machine is capable to model any computation that happens inside a real computer but it is not capable to model the behaviour of the whole computer as a turing machine cannot model the real computers communication capability used for interaction for example it would be not possible to model a computer representing a web server as turing machine tm1 and another computer representing a web client as turing machine tm2 and then connecting tm1 and tm2 to simulate the web transactions between web server and client given above example one might argue that it is still possible to model the web server and the web client together as a single turing machine that is true however it misses the point that a turing machine cannot model the behaviour of an individual computer alone this composability of individual computers into a larger computing system is not possible with individual turing machines historyedit see also algorithm and church–turing thesis they were described in 1936 by alan turing historical background computational machineryedit robin gandy 1919–1995—a student of alan turing 1912–1954 and his lifelong friend—traces the lineage of the notion of calculating machine back to charles babbage circa 1834 and actually proposes babbages thesis that the whole of development and operations of analysis are now capable of being executed by machinery — italics in babbage as cited by gandy p 54 gandys analysis of babbages analytical engine describes the following five operations cf p 52–53 the arithmetic functions − × where − indicates proper subtraction x − y 0 if y ≥ x any sequence of operations is an operation iteration of an operation repeating n times an operation p conditional iteration repeating n times an operation p conditional on the success of test t conditional transfer ie conditional goto gandy states that the functions which can be calculated by 1 2 and 4 are precisely those which are turing computable p 53 he cites other proposals for universal calculating machines including those of percy ludgate 1909 leonardo torres y quevedo 1914 maurice docagne 1922 louis couffignal 1933 vannevar bush 1936 howard aiken 1937 however … the emphasis is on programming a fixed iterable sequence of arithmetical operations the fundamental importance of conditional iteration and conditional transfer for a general theory of calculating machines is not recognized… — gandy p 55 the entscheidungsproblem the decision problem hilberts tenth question of 1900edit with regard to hilberts problems posed by the famous mathematician david hilbert in 1900 an aspect of problem 10 had been floating about for almost 30 years before it was framed precisely hilberts original expression for 10 is as follows 10 determination of the solvability of a diophantine equation given a diophantine equation with any number of unknown quantities and with rational integral coefficients to devise a process according to which it can be determined in a finite number of operations whether the equation is solvable in rational integers the entscheidungsproblem decision problem for firstorder logic is solved when we know a procedure that allows for any given logical expression to decide by finitely many operations its validity or satisfiability the entscheidungsproblem must be considered the main problem of mathematical logic — quoted with this translation and the original german in dershowitz and gurevich 2008 by 1922 this notion of entscheidungsproblem had developed a bit and h behmann stated that  most general form of the entscheidungsproblem is as follows a quite definite generally applicable prescription is required which will allow one to decide in a finite number of steps the truth or falsity of a given purely logical assertion — gandy p 57 quoting behmann behmann remarks that the general problem is equivalent to the problem of deciding which mathematical propositions are true — ibid if one were able to solve the entscheidungsproblem then one would have a procedure for solving many or even all mathematical problems — ibid p 92 by the 1928 international congress of mathematicians hilbert made his questions quite precise first was mathematics complete second was mathematics consistent and thirdly was mathematics decidable hodges p 91 hawking p 1121 the first two questions were answered in 1930 by kurt gödel at the very same meeting where hilbert delivered his retirement speech much to the chagrin of hilbert the third—the entscheidungsproblem—had to wait until the mid1930s the problem was that an answer first required a precise definition of definite general applicable prescription which princeton professor alonzo church would come to call effective calculability and in 1928 no such definition existed but over the next 6–7 years emil post developed his definition of a worker moving from room to room writing and erasing marks per a list of instructions post 1936 as did church and his two students stephen kleene and j b rosser by use of churchs lambdacalculus and gödels recursion theory 1934 churchs paper published 15 april 1936 showed that the entscheidungsproblem was indeed undecidable and beat turing to the punch by almost a year turings paper submitted 28 may 1936 published january 1937 in the meantime emil post submitted a brief paper in the fall of 1936 so turing at least had priority over post while church refereed turings paper turing had time to study churchs paper and add an appendix where he sketched a proof that churchs lambdacalculus and his machines would compute the same functions but what church had done was something rather different and in a certain sense weaker the turing construction was more direct and provided an argument from first principles closing the gap in churchs demonstration — hodges p 112 and post had only proposed a definition of calculability and criticized churchs definition but had proved nothing alan turings amachineedit in the spring of 1935 turing as a young masters student at kings college cambridge uk took on the challenge he had been stimulated by the lectures of the logician m h a newman and learned from them of gödels work and the entscheidungsproblem newman used the word mechanical in his obituary of turing 1955 newman writes to the question what is a mechanical process turing returned the characteristic answer something that can be done by a machine and he embarked on the highly congenial task of analysing the general notion of a computing machine — gandy p 74 gandy states that i suppose but do not know that turing right from the start of his work had as his goal a proof of the undecidability of the entscheidungsproblem he told me that the main idea of the paper came to him when he was lying in grantchester meadows in the summer of 1935 the main idea might have either been his analysis of computation or his realization that there was a universal machine and so a diagonal argument to prove unsolvability — ibid p 76 while gandy believed that newmans statement above is misleading this opinion is not shared by all turing had a lifelong interest in machines alan had dreamt of inventing typewriters as a boy his mother mrs turing had a typewriter and he could well have begun by asking himself what was meant by calling a typewriter mechanical hodges p 96 while at princeton pursuing his phd turing built a booleanlogic multiplier see below his phd thesis titled systems of logic based on ordinals contains the following definition of a computable function it was stated above that a function is effectively calculable if its values can be found by some purely mechanical process we may take this statement literally understanding by a purely mechanical process one which could be carried out by a machine it is possible to give a mathematical description in a certain normal form of the structures of these machines the development of these ideas leads to the authors definition of a computable function and to an identification of computability with effective calculability it is not difficult though somewhat laborious to prove that these three definitions the 3rd is the λcalculus are equivalent — turing 1939 in the undecidable p 160 when turing returned to the uk he ultimately became jointly responsible for breaking the german secret codes created by encryption machines called the enigma he also became involved in the design of the ace automatic computing engine turings ace proposal was effectively selfcontained and its roots lay not in the edvac the usas initiative but in his own universal machine hodges p 318 arguments still continue concerning the origin and nature of what has been named by kleene 1952 turings thesis but what turing did prove with his computationalmachine model appears in his paper on computable numbers with an application to the entscheidungsproblem 1937 that the hilbert entscheidungsproblem can have no solution i propose therefore to show that there can be no general process for determining whether a given formula u of the functional calculus k is provable ie that there can be no machine which supplied with any one u of these formulae will eventually say whether u is provable — from turings paper as reprinted in the undecidable p 145 turings example his second proof if one is to ask for a general procedure to tell us does this machine ever print 0 the question is undecidable 1937–1970 the digital computer the birth of computer scienceedit in 1937 while at princeton working on his phd thesis turing built a digital booleanlogic multiplier from scratch making his own electromechanical relays hodges p 138 alans task was to embody the logical design of a turing machine in a network of relayoperated switches hodges p 138 while turing might have been just initially curious and experimenting quiteearnest work in the same direction was going in germany konrad zuse 1938 and in the united states howard aiken and george stibitz 1937 the fruits of their labors were used by the axis and allied military in world war ii cf hodges p 298–299 in the early to mid1950s hao wang and marvin minsky reduced the turing machine to a simpler form a precursor to the postturing machine of martin davis simultaneously european researchers were reducing the newfangled electronic computer to a computerlike theoretical object equivalent to what was now being called a turing machine in the late 1950s and early 1960s the coincidentally parallel developments of melzak and lambek 1961 minsky 1961 and shepherdson and sturgis 1961 carried the european work further and reduced the turing machine to a more friendly computerlike abstract model called the counter machine elgot and robinson 1964 hartmanis 1971 cook and reckhow 1973 carried this work even further with the register machine and random access machine models—but basically all are just multitape turing machines with an arithmeticlike instruction set 1970–present the turing machine as a model of computationedit today the counter register and randomaccess machines and their sire the turing machine continue to be the models of choice for theorists investigating questions in the theory of computation in particular computational complexity theory makes use of the turing machine depending on the objects one likes to manipulate in the computations numbers like nonnegative integers or alphanumeric strings two models have obtained a dominant position in machinebased complexity theory the offline multitape turing machine which represents the standard model for stringoriented computation and the random access machine ram as introduced by cook and reckhow which models the idealized von neumann style computer — van emde boas 19904 only in the related area of analysis of algorithms this role is taken over by the ram model — van emde boas 199016 see alsoedit algorithm for a brief history of some of the inventions and the mathematics leading to turings definition of what he called his amachine arithmetical hierarchy bekenstein bound showing the impossibility of infinitetape turing machines of finite size and bounded energy bloop and floop busy beaver chaitin constant or omega computer science for information relating to the halting problem church–turing thesis which says turing machines can perform any computation that can be performed claude shannon another leading thinker in information theory conways game of life a turingcomplete cellular automaton digital infinity enumerator in theoretical computer science gödel escher bach an eternal golden braid a famous book that discusses among other topics the church–turing thesis the emperors new mind halting problem for more references harvard architecture imperative programming langtons ant and turmites simple twodimensional analogues of the turing machine modified harvard architecture probabilistic turing machine unorganized machine for turings very early ideas on neural networks quantum turing machine turing completeness an attribute used in computability theory to describe computing systems with power equivalent to a universal turing machine turing machine examples turing switch turing tarpit any computing system or language that despite being turing complete is generally considered useless for practical computing von neumann architecture notesedit minsky 1967107 in his 1936 paper a m turing defined the class of abstract machines that now bear his name a turing machine is a finitestate machine associated with a special kind of environment its tape in which it can store and later recover sequences of symbols also stone 19728 where the word machine is in quotation marks stone 19728 states this machine is an abstract mathematical model also cf sipser 2006137ff that describes the turing machine model rogers 1987 196713 refers to turings characterization boolos burgess and jeffrey 200225 refers to a specific kind of idealized machine sipser 2006137 a turing machine can do everything that a real computer can do cf sipser 2002137 also rogers 1987 196713 describes a paper tape of infinite length in both directions minsky 1967118 states the tape is regarded as infinite in both directions boolos burgess and jeffrey 200225 include the possibility of there is someone stationed at each end to add extra blank squares as needed cf rogers 1987 196713 other authors use the word square eg boolos burgess jeffrey 200235 minsky 1967117 penrose 198937 the word used by eg davis 2000151 this table represents an algorithm or effective computational procedure which is necessarily finite see penrose 198930ff stone 19723ff boolos burgess and jeffrey 200225 boolos burgess jeffry 200225 illustrate the machine as moving along the tape penrose 19893637 describes himself as uncomfortable with an infinite tape observing that it might be hard to shift he prefers to think of the tape as representing some external environment through which our finite device can move and after observing that the movement is a convenient way of picturing things and then suggests that the device receives all its input from this environment also by convention one of the states is distinguished as the stopping state and is given the name halt stone 19729 turings original description did not include a halt instruction but he did allow for a circular condition a configuration from which there is no possible move see turing 1936 in the undecidable 1967119 this notion was added in the 1950s see more at halting problem hodges andrew 2012 alan turing the enigma the centenary edition princeton university press isbn 9780691155647  the idea came to him in mid1935 perhaps see more in the history section after a question posed by m h a newman in his lectures was there a definite method or as newman put it a mechanical process which could be applied to a mathematical statement and which would come up with the answer as to whether it was provable hodges 198393 turing submitted his paper on 31 may 1936 to the london mathematical society for its proceedings cf hodges 1983112 but it was published in early 1937 and offprints were available in february 1937 cf hodges 1983129 see footnote in davis 2000151 turing 1936 in the undecidable 1965132134 turings definition of circular is found on page 119 turing 1936 in the undecidable 1965145 sipser 2006137 observes that a turing machine can do everything that a real computer can do nevertheless even a turing machine cannot solve certain problems in a very real sense these problems are beyond the theoretical limits of computation see the definition of innings on wiktionary am turing 1948 intelligent machinery manuscript the turing archive p 3  occasionally called an action table or transition function usually quintuples 5tuples qiaj→qi1aj1dk but sometimes quadruples 4tuples p149 in particular hopcroft and ullman assume that δ displaystyle delta is undefined on all states from f displaystyle f referencesedit primary literature reprints and compilationsedit b jack copeland ed 2004 the essential turing seminal writings in computing logic philosophy artificial intelligence and artificial life plus the secrets of enigma clarendon press oxford university press oxford uk isbn 0198250797 contains the turing papers plus a draft letter to emil post re his criticism of turings convention and donald w davies corrections to turings universal computing machine martin davis ed 1965 the undecidable raven press hewlett ny emil post 1936 finite combinatory processes—formulation 1 journal of symbolic logic 1 103–105 1936 reprinted in the undecidable pp 289ff emil post 1947 recursive unsolvability of a problem of thue journal of symbolic logic vol 12 pp 1–11 reprinted in the undecidable pp 293ff in the appendix of this paper post comments on and gives corrections to turings paper of 1936–1937 in particular see the footnotes 11 with corrections to the universal computing machine coding and footnote 14 with comments on turings first and second proofs turing am 1936 on computable numbers with an application to the entscheidungs problem proceedings of the london mathematical society 2 published 1937 42 230–265 doi101112plmss2421230  and turing am 1938 on computable numbers with an application to the entscheidungsproblem a correction proceedings of the london mathematical society 2 published 1937 43 6 544–6 doi101112plmss2436544  reprinted in many collections eg in the undecidable pp 115–154 available on the web in many places alan turing 1948 intelligent machinery reprinted in cybernetics key papers ed cr evans and adj robertson baltimore university park press 1968 p 31 reprinted in turing a m 1996 intelligent machinery a heretical theory philosophia mathematica 4 3 256 doi101093philmat43256  f c hennie and r e stearns twotape simulation of multitape turing machines jacm 134533–546 1966 computability theoryedit boolos george richard jeffrey 1999 1989 computability and logic 3rd ed cambridge uk cambridge university press isbn 052120402x  boolos george john burgess richard jeffrey 2002 computability and logic 4th ed cambridge uk cambridge university press isbn 0521007585  some parts have been significantly rewritten by burgess presentation of turing machines in context of lambek abacus machines cf register machine and recursive functions showing their equivalence taylor l booth 1967 sequential machines and automata theory john wiley and sons inc new york graduate level engineering text ranges over a wide variety of topics chapter ix turing machines includes some recursion theory martin davis 1958 computability and unsolvability mcgrawhill book company inc new york  on pages 12–20 he gives examples of 5tuple tables for addition the successor function subtraction x ≥ y proper subtraction 0 if x y the identity function and various identity functions and multiplication davis martin ron sigal elaine j weyuker 1994 computability complexity and languages and logic fundamentals of theoretical computer science 2nd ed san diego academic press harcourt brace company isbn 0122063821  hennie fredrick 1977 introduction to computability addison–wesley reading mass qa2485h4 1977  on pages 90–103 hennie discusses the utm with examples and flowcharts but no actual code john hopcroft and jeffrey ullman 1979 introduction to automata theory languages and computation 1st ed addison–wesley reading mass isbn 020102988x  a difficult book centered around the issues of machineinterpretation of languages npcompleteness etc hopcroft john e rajeev motwani jeffrey d ullman 2001 introduction to automata theory languages and computation 2nd ed reading mass addison–wesley isbn 0201441241  distinctly different and less intimidating than the first edition stephen kleene 1952 introduction to metamathematics north–holland publishing company amsterdam netherlands 10th impression with corrections of 6th reprint 1971 graduate level text most of chapter xiii computable functions is on turing machine proofs of computability of recursive functions etc knuth donald e 1973 volume 1fundamental algorithms the art of computer programming 2nd ed reading mass addison–wesley publishing company  with reference to the role of turing machines in the development of computation both hardware and software see 145 history and bibliography pp 225ff and 26 history and bibliographypp 456ff zohar manna 1974 mathematical theory of computation reprinted dover 2003 isbn 9780486432380 marvin minsky computation finite and infinite machines prentice–hall inc nj 1967 see chapter 8 section 82 unsolvability of the halting problem excellent ie relatively readable sometimes funny christos papadimitriou 1993 computational complexity 1st ed addison wesley isbn 0201530821  chapter 2 turing machines pp 19–56 hartley rogers jr theory of recursive functions and effective computability the mit press cambridge ma paperback edition 1987 original mcgrawhill edition 1967 isbn 0262680521 pbk michael sipser 1997 introduction to the theory of computation pws publishing isbn 053494728x  chapter 3 the church–turing thesis pp 125–149 stone harold s 1972 introduction to computer organization and data structures 1st ed new york mcgraw–hill book company isbn 0070617260  peter van emde boas 1990 machine models and simulations pp 3–66 in jan van leeuwen ed handbook of theoretical computer science volume a algorithms and complexity the mit presselsevier place isbn 0444880712 volume a qa76h279 1990 valuable survey with 141 references churchs thesisedit nachum dershowitz yuri gurevich september 2008 a natural axiomatization of computability and proof of churchs thesis pdf bulletin of symbolic logic 14 3 retrieved 20081015  roger penrose 1990 1989 the emperors new mind 2nd ed oxford university press new york isbn 0198519737  small turing machinesedit rogozhin yurii 1998 a universal turing machine with 22 states and 2 symbols romanian journal of information science and technology 13 259–265 1998 surveys known results about small universal turing machines stephen wolfram 2002 a new kind of science wolfram media isbn 1579550088 brunfiel geoff student snags maths prize nature october 24 2007 jim giles 2007 simplest universal computer wins student 25000 new scientist october 24 2007 alex smith universality of wolfram’s 2 3 turing machine submission for the wolfram 2 3 turing machine research prize vaughan pratt 2007 simple turing machines universality encodings etc fom email list october 29 2007 martin davis 2007 smallest universal machine and definition of universal turing machine fom email list october 26–27 2007 alasdair urquhart 2007 smallest universal machine fom email list october 26 2007 hector zenil wolfram research 2007 smallest universal machine fom email list october 29 2007 todd rowland 2007 confusion on fom wolfram science message board october 30 2007 olivier and marc raynaud 2014 a programmable prototype to achieve turing machines limos laboratory of blaise pascal university clermontferrand in france otheredit martin davis 2000 engines of logic mathematicians and the origin of the computer 1st ed w w norton company new york isbn 0393322297  robin gandy the confluence of ideas in 1936 pp 51–102 in rolf herken see below stephen hawking editor 2005 god created the integers the mathematical breakthroughs that changed history running press philadelphia isbn 9780762419227 includes turings 1936–1937 paper with brief commentary and biography of turing as written by hawking rolf herken 1995 the universal turing machine—a halfcentury survey springer verlag isbn 3211826378  andrew hodges alan turing the enigma simon and schuster new york cf chapter the spirit of truth for a history leading to and a discussion of his proof ivars peterson 1988 the mathematical tourist snapshots of modern mathematics 1st ed w h freeman and company new york isbn 0716720647  roger penrose the emperors new mind concerning computers minds and the laws of physics oxford university press oxford and new york 1989 1990 corrections isbn 0198519737 paul strathern 1997 turing and the computer—the big idea anchor booksdoubleday isbn 038549243x  hao wang a variant to turings theory of computing machines journal of the association for computing machinery jacm 4 63–92 1957 charles petzold petzold charles the annotated turing john wiley sons inc isbn 0470229055 arora sanjeev barak boaz complexity theory a modern approach cambridge university press 2009 isbn 9780521424264 section 14 machines as strings and the universal turing machine and 17 proof of theorem 19 kantorovitz isaiah pinchas december 1 2005 a note on turing machine computability of rule driven systems sigact news acm 36 4 109–110 doi10114511075231107525 retrieved april 6 2014  kirner raimund zimmermann wolf richter dirk on undecidability results of real programming languages in 15 kolloquium programmiersprachen und grundlagen der programmierung kps09 maria taferl austria oct 2009 external linksedit wikimedia commons has media related to turing machines hazewinkel michiel ed 2001 1994 turing machine encyclopedia of mathematics springer sciencebusiness media bv kluwer academic publishers isbn 9781556080104  turing machine on stanford encyclopedia of philosophy detailed info on the church–turing hypothesis stanford encyclopedia of philosophy web turing machine web application to construct and execute turing machines javascript turing machinelike models in molecular biology to understand life mechanisms with a dnatape processor the turing machine—summary about the turing machine its functionality and historical facts the wolfram 23 turing machine research prize—stephen wolframs 25000 prize for the proof or disproof of the universality of the potentially smallest universal turing machine the contest has ended with the proof affirming the machines universality turing machine causal networks by enrique zeleny wolfram demonstrations project turing machines at dmoz purely mechanical turing machine jstmsimulator an open source turing machine simulator written in javascript source code on github how alan turing cracked the enigma code imperial war museums v t e automata theory formal languages and formal grammars chomsky hierarchy grammars languages abstract machines type0 — type1 — — — — — type2 — — type3 — — unrestricted no common name contextsensitive positive range concatenation indexed — linear contextfree rewriting systems treeadjoining contextfree deterministic contextfree visibly pushdown regular — nonrecursive recursively enumerable decidable contextsensitive positive range concatenation indexed — linear contextfree rewriting language treeadjoining contextfree deterministic contextfree visibly pushdown regular starfree finite turing machine decider linearbounded ptime turing machine nested stack thread automaton restricted tree stack automaton embedded pushdown nondeterministic pushdown deterministic pushdown visibly pushdown finite counterfree with aperiodic finite monoid acyclic finite each category of languages except those marked by a is a proper subset of the category directly above it any language in each category is generated by a grammar and by an automaton in the category in the same line authority control gnd 42035259 ndl 00573533 retrieved from httpsenwikipediaorgwindexphptitleturingmachineoldid807980227 categories 1936 in computer science 1937 in computer science turing machine educational abstract machines theoretical computer science alan turing models of computation formal methods computability theory english inventions automata computation formal languages hidden categories all articles with specifically marked weaselworded phrases articles with specifically marked weaselworded phrases from february 2016 articles needing additional references from april 2015 all articles needing additional references articles with dmoz links wikipedia articles with gnd identifiers navigation menu personal tools not logged in talk contributions create account log in namespaces article talk variants views read edit view history more search navigation main page contents featured content current events random article donate to wikipedia wikipedia store interaction help about wikipedia community portal recent changes contact page tools what links here related changes upload file special pages permanent link page information wikidata item cite this page printexport create a book download as pdf printable version in other projects wikimedia commons languages alemannisch العربية беларуская беларуская тарашкевіца‎ български bosanski català čeština dansk deutsch eesti ελληνικά español esperanto euskara فارسی français furlan gĩkũyũ 한국어 հայերեն hrvatski bahasa indonesia interlingua italiano עברית latina latviešu lëtzebuergesch lietuvių magyar македонски മലയാളം mirandés nederlands 日本語 norsk polski português română русский scots shqip simple english slovenčina slovenščina српски srpski srpskohrvatski српскохрватски suomi svenska ไทย türkçe українська tiếng việt 中文 edit links this page was last edited on 31 october 2017 at 0432 text is available under the creative commons attributionsharealike license additional terms may apply by using this site you agree to the terms of use and privacy policy wikipedia® is a registered trademark of the wikimedia foundation inc a nonprofit organization privacy policy about wikipedia disclaimers contact wikipedia developers cookie statement mobile view 
https://en.wikipedia.org/wiki/Turing_machine
https://en.wikipedia.org/wiki/Turing_machine
https://en.wikipedia.org/wiki/Turing_machine_(disambiguation)
https://en.wikipedia.org/wiki/Turing_machine_equivalents
https://en.wikipedia.org/wiki/Turing_machine_examples
https://en.wikipedia.org/wiki/Turing_machine_gallery
https://en.wikipedia.org/wiki/Alternating_Turing_machine
https://en.wikipedia.org/wiki/Differentiable_neural_computer
https://en.wikipedia.org/wiki/Non-deterministic_Turing_machine
https://en.wikipedia.org/wiki/Quantum_Turing_machine
https://en.wikipedia.org/wiki/Post–Turing_machine
https://en.wikipedia.org/wiki/Probabilistic_Turing_machine
https://en.wikipedia.org/wiki/Read-only_Turing_machine
https://en.wikipedia.org/wiki/Read-only_right_moving_Turing_machines
https://en.wikipedia.org/wiki/Multitape_Turing_machine
https://en.wikipedia.org/wiki/Multi-track_Turing_machine
https://en.wikipedia.org/wiki/Symmetric_Turing_machine
https://en.wikipedia.org/wiki/Total_Turing_machine
https://en.wikipedia.org/wiki/Unambiguous_Turing_machine
https://en.wikipedia.org/wiki/Universal_Turing_machine
https://en.wikipedia.org/wiki/Zeno_machine
https://en.wikipedia.org/wiki/Alan_Turing
https://en.wikipedia.org/wiki/Category:Turing_machine
https://en.wikipedia.org/wiki/Template:Turing
https://en.wikipedia.org/w/index.php?title=Template_talk:Turing&action=edit&redlink=1
https://en.wikipedia.org/w/index.php?title=Template:Turing&action=edit
https://en.wikipedia.org/wiki/File:Automata_theory.svg
https://en.wikipedia.org/wiki/Mathematical_model_of_computation
https://en.wikipedia.org/wiki/Abstract_machine
https://en.wikipedia.org/wiki/Turing_machine
https://en.wikipedia.org/wiki/Turing_machine
https://en.wikipedia.org/wiki/Computer_algorithm
https://en.wikipedia.org/wiki/Turing_machine
https://en.wikipedia.org/wiki/Turing_machine
https://en.wikipedia.org/wiki/Discrete_mathematics
https://en.wikipedia.org/wiki/Turing_machine
https://en.wikipedia.org/wiki/Turing_machine
https://en.wikipedia.org/wiki/Turing_machine
https://en.wikipedia.org/wiki/Turing_machine
https://en.wikipedia.org/wiki/Turing_machine
https://en.wikipedia.org/wiki/Turing_machine
https://en.wikipedia.org/wiki/Alan_Turing
https://en.wikipedia.org/wiki/Turing_machine
https://en.wikipedia.org/wiki/Turing_machine
https://en.wikipedia.org/wiki/Turing_machine
https://en.wikipedia.org/wiki/Turing_machine
https://en.wikipedia.org/wiki/Computability
https://en.wikipedia.org/wiki/Entscheidungsproblem
https://en.wikipedia.org/wiki/Turing_machine
https://en.wikipedia.org/wiki/Turing_machine
https://en.wikipedia.org/wiki/Computer
https://en.wikipedia.org/wiki/Random-access_memory
https://en.wikipedia.org/wiki/Turing_completeness
https://en.wikipedia.org/wiki/Turing_machine
https://en.wikipedia.org/wiki/Turing_machine
https://en.wikipedia.org/wiki/Turing_machine
https://en.wikipedia.org/wiki/Turing_machine
https://en.wikipedia.org/wiki/Turing_machine
https://en.wikipedia.org/wiki/Turing_machine
https://en.wikipedia.org/wiki/Turing_machine
https://en.wikipedia.org/wiki/Turing_machine
https://en.wikipedia.org/wiki/Turing_machine
https://en.wikipedia.org/wiki/Turing_machine
https://en.wikipedia.org/wiki/Turing_machine
https://en.wikipedia.org/wiki/Turing_machine
https://en.wikipedia.org/wiki/Turing_machine
https://en.wikipedia.org/wiki/Turing_machine
https://en.wikipedia.org/wiki/Turing_machine
https://en.wikipedia.org/wiki/Turing_machine
https://en.wikipedia.org/wiki/Turing_machine
https://en.wikipedia.org/wiki/Turing_machine
https://en.wikipedia.org/wiki/Turing_machine
https://en.wikipedia.org/wiki/Turing_machine
https://en.wikipedia.org/wiki/Turing_machine
https://en.wikipedia.org/wiki/Turing_machine
https://en.wikipedia.org/wiki/Turing_machine
https://en.wikipedia.org/wiki/Turing_machine
https://en.wikipedia.org/wiki/Turing_machine
https://en.wikipedia.org/wiki/Turing_machine
https://en.wikipedia.org/wiki/Turing_machine
https://en.wikipedia.org/wiki/Turing_machine
https://en.wikipedia.org/wiki/Turing_machine
https://en.wikipedia.org/wiki/Turing_machine
https://en.wikipedia.org/wiki/Turing_machine
https://en.wikipedia.org/w/index.php?title=Turing_machine&action=edit&section=1
https://en.wikipedia.org/wiki/CPU
https://en.wikipedia.org/wiki/Automaton
https://en.wikipedia.org/wiki/Enumeration
https://en.wikipedia.org/wiki/Alphabet_(formal_languages)
https://en.wikipedia.org/wiki/Recursively_enumerable_set
https://en.wikipedia.org/wiki/Black_box
https://en.wikipedia.org/wiki/Halting_problem
https://en.wikipedia.org/wiki/Unrestricted_grammar
https://en.wikipedia.org/wiki/Lambda_calculus
https://en.wikipedia.org/wiki/Universal_Turing_machine
https://en.wikipedia.org/wiki/Alonzo_Church
https://en.wikipedia.org/wiki/Lambda_calculus
https://en.wikipedia.org/wiki/Computation
https://en.wikipedia.org/wiki/Church–Turing_thesis
https://en.wikipedia.org/wiki/Effective_method
https://en.wikipedia.org/wiki/Logic
https://en.wikipedia.org/wiki/Mathematics
https://en.wikipedia.org/wiki/Algorithm
https://en.wikipedia.org/wiki/Abstract_machine
https://en.wikipedia.org/wiki/Computer_science
https://en.wikipedia.org/wiki/Computational_complexity_theory
https://en.wikipedia.org/w/index.php?title=Turing_machine&action=edit&section=2
https://en.wikipedia.org/wiki/Turing_machine
https://en.wikipedia.org/wiki/Turing_machine
https://en.wikipedia.org/w/index.php?title=Turing_machine&action=edit&section=3
https://en.wikipedia.org/wiki/Turing_machine_gallery
https://en.wikipedia.org/wiki/Entscheidungsproblem
https://en.wikipedia.org/wiki/Turing_machine
https://en.wikipedia.org/wiki/File:Turing_machine_2a.svg
https://en.wikipedia.org/wiki/File:Turing_machine_2a.svg
https://en.wikipedia.org/wiki/File:Turing_machine_2b.svg
https://en.wikipedia.org/wiki/File:Turing_machine_2b.svg
https://en.wikipedia.org/wiki/Turing_machine
https://en.wikipedia.org/wiki/Turing_machine
https://en.wikipedia.org/wiki/Computer_storage
https://en.wikipedia.org/w/index.php?title=Turing_machine&action=edit&section=4
https://en.wikipedia.org/wiki/Tuple
https://en.wikipedia.org/wiki/Partial_function
https://en.wikipedia.org/wiki/State_transition_system
https://en.wikipedia.org/wiki/Turing_machine
https://en.wikipedia.org/wiki/Busy_beaver
https://en.wikipedia.org/wiki/Turing_machine_examples
https://en.wikipedia.org/w/index.php?title=Turing_machine&action=edit&section=5
https://en.wikipedia.org/wiki/Linear_bounded_automaton
https://en.wikipedia.org/w/index.php?title=Turing_machine&action=edit&section=6
https://en.wikipedia.org/wiki/Turing_machine_examples
https://en.wikipedia.org/wiki/Post–Turing_machine
https://en.wikipedia.org/w/index.php?title=Turing_machine&action=edit&section=7
https://en.wikipedia.org/wiki/Stephen_Cole_Kleene
https://en.wikipedia.org/wiki/Gödel_number
https://en.wikipedia.org/w/index.php?title=Turing_machine&action=edit&section=8
https://en.wikipedia.org/wiki/File:State_diagram_3_state_busy_beaver_2B.svg
https://en.wikipedia.org/wiki/File:State_diagram_3_state_busy_beaver_2B.svg
https://en.wikipedia.org/wiki/Finite_State_Machine
https://en.wikipedia.org/wiki/Finite_state_machine
https://en.wikipedia.org/wiki/File:Moves_of_a_3-state_Busy_Beaver.jpg
https://en.wikipedia.org/wiki/File:Moves_of_a_3-state_Busy_Beaver.jpg
https://en.wikipedia.org/w/index.php?title=Turing_machine&action=edit&section=9
https://en.wikipedia.org/wiki/Turing_machine_equivalents
https://en.wikipedia.org/wiki/Register_machine
https://en.wikipedia.org/wiki/Post–Turing_machine
https://en.wikipedia.org/wiki/Church–Turing_thesis
https://en.wikipedia.org/wiki/Pushdown_automaton
https://en.wikipedia.org/wiki/LIFO_(computing)
https://en.wikipedia.org/wiki/LIFO_(computing)
https://en.wikipedia.org/wiki/Turing_completeness
https://en.wikipedia.org/wiki/Multi-tape_Turing_machine
https://en.wikipedia.org/wiki/Multi-track_Turing_machine
https://en.wikipedia.org/wiki/Non-deterministic_Turing_machine
https://en.wikipedia.org/wiki/Read-only_right_moving_Turing_machines
https://en.wikipedia.org/wiki/Nondeterministic_finite_automaton
https://en.wikipedia.org/wiki/Deterministic_finite_automaton
https://en.wikipedia.org/wiki/NDFA_to_DFA_conversion_algorithm
https://en.wikipedia.org/wiki/Register_machine
https://en.wikipedia.org/wiki/Assembly_language
https://en.wikipedia.org/wiki/Programming_language
https://en.wikipedia.org/wiki/Programming_languages
https://en.wikipedia.org/wiki/ANSI_C
https://en.wikipedia.org/wiki/Pascal_(programming_language)
https://en.wikipedia.org/wiki/Memory_allocation
https://en.wikipedia.org/w/index.php?title=Turing_machine&action=edit&section=10
https://en.wikipedia.org/wiki/Nondeterministic_Turing_machine
https://en.wikipedia.org/wiki/Oracle_machine
https://en.wikipedia.org/w/index.php?title=Turing_machine&action=edit&section=11
https://en.wikipedia.org/wiki/Universal_Turing_machine
https://en.wikipedia.org/wiki/File:Model_of_a_Turing_machine.jpg
https://en.wikipedia.org/wiki/File:Model_of_a_Turing_machine.jpg
https://en.wikipedia.org/wiki/Stored-program_computer
https://en.wikipedia.org/wiki/Computational_complexity_theory
https://en.wikipedia.org/wiki/Logarithm
https://en.wikipedia.org/wiki/R._E._Stearns
https://en.wikipedia.org/w/index.php?title=Turing_machine&action=edit&section=12
https://en.wikipedia.org/wiki/File:Lego_Turing_Machine.jpg
https://en.wikipedia.org/wiki/File:Lego_Turing_Machine.jpg
https://en.wikipedia.org/wiki/Lego
https://en.wikipedia.org/wiki/Wikipedia:Manual_of_Style/Words_to_watch
https://en.wikipedia.org/wiki/Linear_bounded_automaton
https://en.wikipedia.org/wiki/Out_of_memory
https://en.wikipedia.org/wiki/Operating_system
https://en.wikipedia.org/wiki/Word_processor
https://en.wikipedia.org/wiki/File:Turingmachine.jpg
https://en.wikipedia.org/wiki/File:Turingmachine.jpg
https://en.wikipedia.org/w/index.php?title=Turing_machine&action=edit&section=13
https://en.wikipedia.org/w/index.php?title=Turing_machine&action=edit&section=14
https://en.wikipedia.org/wiki/Computational_complexity_theory
https://en.wikipedia.org/wiki/Abstract_machine
https://en.wikipedia.org/wiki/Random-access_stored-program_machine
https://en.wikipedia.org/wiki/Universal_Turing_machine
https://en.wikipedia.org/wiki/Random_access_machine
https://en.wikipedia.org/wiki/Binary_search
https://en.wikipedia.org/w/index.php?title=Turing_machine&action=edit&section=15
https://en.wikipedia.org/wiki/File:Question_book-new.svg
https://en.wikipedia.org/wiki/Wikipedia:Citing_sources
https://en.wikipedia.org/wiki/Wikipedia:Verifiability
https://en.wikipedia.org/w/index.php?title=Turing_machine&action=edit
https://en.wikipedia.org/wiki/Help:Introduction_to_referencing_with_Wiki_Markup/1
https://en.wikipedia.org/wiki/Wikipedia:Verifiability
https://en.wikipedia.org/wiki/Help:Maintenance_template_removal
https://en.wikipedia.org/wiki/Unbounded_nondeterminism
https://en.wikipedia.org/w/index.php?title=Turing_machine&action=edit&section=16
https://en.wikipedia.org/wiki/Non-interactive
https://en.wikipedia.org/wiki/Batch_processing
https://en.wikipedia.org/wiki/Interactivity
https://en.wikipedia.org/wiki/Composability
https://en.wikipedia.org/w/index.php?title=Turing_machine&action=edit&section=17
https://en.wikipedia.org/wiki/Algorithm
https://en.wikipedia.org/wiki/Church–Turing_thesis
https://en.wikipedia.org/wiki/Alan_Turing
https://en.wikipedia.org/w/index.php?title=Turing_machine&action=edit&section=18
https://en.wikipedia.org/wiki/Robin_Gandy
https://en.wikipedia.org/wiki/Alan_Turing
https://en.wikipedia.org/wiki/Charles_Babbage
https://en.wikipedia.org/wiki/Analytical_Engine
https://en.wikipedia.org/wiki/Goto
https://en.wikipedia.org/wiki/Turing_computable
https://en.wikipedia.org/wiki/Percy_Ludgate
https://en.wikipedia.org/wiki/Leonardo_Torres_y_Quevedo
https://en.wikipedia.org/wiki/Maurice_d'Ocagne
https://en.wikipedia.org/wiki/Louis_Couffignal
https://en.wikipedia.org/wiki/Vannevar_Bush
https://en.wikipedia.org/wiki/Howard_Aiken
https://en.wikipedia.org/w/index.php?title=Turing_machine&action=edit&section=19
https://en.wikipedia.org/wiki/Hilbert's_problems
https://en.wikipedia.org/wiki/David_Hilbert
https://en.wikipedia.org/wiki/Diophantine_equation
https://en.wikipedia.org/wiki/First-order_logic
https://en.wikipedia.org/wiki/Entscheidungsproblem
https://en.wikipedia.org/wiki/Heinrich_Behmann
https://en.wikipedia.org/wiki/Completeness_(logic)
https://en.wikipedia.org/wiki/Consistency_proof
https://en.wikipedia.org/wiki/Decidability_(logic)
https://en.wikipedia.org/wiki/Kurt_Gödel
https://en.wikipedia.org/wiki/Alonzo_Church
https://en.wikipedia.org/wiki/Effective_calculability
https://en.wikipedia.org/wiki/Emil_Post
https://en.wikipedia.org/wiki/Stephen_Kleene
https://en.wikipedia.org/wiki/J._B._Rosser
https://en.wikipedia.org/wiki/Lambda-calculus
https://en.wikipedia.org/wiki/Recursion_theory
https://en.wikipedia.org/wiki/Church–Turing_thesis
https://en.wikipedia.org/w/index.php?title=Turing_machine&action=edit&section=20
https://en.wikipedia.org/wiki/King's_College_Cambridge
https://en.wikipedia.org/wiki/UK
https://en.wikipedia.org/wiki/M._H._A._Newman
https://en.wikipedia.org/wiki/Cantor's_diagonal_argument
https://en.wikipedia.org/wiki/Automatic_Computing_Engine
https://en.wikipedia.org/wiki/EDVAC
https://en.wikipedia.org/wiki/Turing's_Thesis
https://en.wikipedia.org/w/index.php?title=Turing_machine&action=edit&section=21
https://en.wikipedia.org/wiki/Konrad_Zuse
https://en.wikipedia.org/wiki/Howard_Aiken
https://en.wikipedia.org/wiki/George_Stibitz
https://en.wikipedia.org/wiki/World_War_II
https://en.wikipedia.org/wiki/Hao_Wang_(academic)
https://en.wikipedia.org/wiki/Marvin_Minsky
https://en.wikipedia.org/wiki/Post-Turing_machine
https://en.wikipedia.org/wiki/Martin_Davis
https://en.wikipedia.org/wiki/Electronic_computer
https://en.wikipedia.org/wiki/Counter_machine
https://en.wikipedia.org/wiki/Register_machine
https://en.wikipedia.org/wiki/Random_access_machine
https://en.wikipedia.org/w/index.php?title=Turing_machine&action=edit&section=22
https://en.wikipedia.org/wiki/Theory_of_computation
https://en.wikipedia.org/wiki/Computational_complexity_theory
https://en.wikipedia.org/w/index.php?title=Turing_machine&action=edit&section=23
https://en.wikipedia.org/wiki/Algorithm
https://en.wikipedia.org/wiki/Arithmetical_hierarchy
https://en.wikipedia.org/wiki/Bekenstein_bound
https://en.wikipedia.org/wiki/BlooP_and_FlooP
https://en.wikipedia.org/wiki/Busy_beaver
https://en.wikipedia.org/wiki/Chaitin_constant
https://en.wikipedia.org/wiki/Omega_(computer_science)
https://en.wikipedia.org/wiki/Church–Turing_thesis
https://en.wikipedia.org/wiki/Claude_Shannon
https://en.wikipedia.org/wiki/Conway's_Game_of_Life
https://en.wikipedia.org/wiki/Digital_infinity
https://en.wikipedia.org/wiki/Enumerator_(in_theoretical_computer_science)
https://en.wikipedia.org/wiki/Gödel,_Escher,_Bach:_An_Eternal_Golden_Braid
https://en.wikipedia.org/wiki/The_Emperor's_New_Mind
https://en.wikipedia.org/wiki/Halting_problem
https://en.wikipedia.org/wiki/Harvard_architecture
https://en.wikipedia.org/wiki/Imperative_programming
https://en.wikipedia.org/wiki/Langton's_ant
https://en.wikipedia.org/wiki/Turmite
https://en.wikipedia.org/wiki/Modified_Harvard_architecture
https://en.wikipedia.org/wiki/Probabilistic_Turing_machine
https://en.wikipedia.org/wiki/Unorganized_machine
https://en.wikipedia.org/wiki/Quantum_Turing_machine
https://en.wikipedia.org/wiki/Turing_completeness
https://en.wikipedia.org/wiki/Computability_theory_(computation)
https://en.wikipedia.org/wiki/Turing_machine_examples
https://en.wikipedia.org/wiki/Turing_switch
https://en.wikipedia.org/wiki/Turing_tarpit
https://en.wikipedia.org/wiki/Von_Neumann_architecture
https://en.wikipedia.org/w/index.php?title=Turing_machine&action=edit&section=24
https://en.wikipedia.org/wiki/Turing_machine
https://en.wikipedia.org/wiki/Turing_machine
https://en.wikipedia.org/wiki/Turing_machine
https://en.wikipedia.org/wiki/Turing_machine
https://en.wikipedia.org/wiki/Turing_machine
https://en.wikipedia.org/wiki/Turing_machine
https://en.wikipedia.org/wiki/Turing_machine
https://en.wikipedia.org/wiki/Algorithm
https://en.wikipedia.org/wiki/Turing_machine
https://en.wikipedia.org/wiki/Turing_machine
https://en.wikipedia.org/wiki/Turing_machine
https://en.wikipedia.org/wiki/Halting_problem
https://en.wikipedia.org/wiki/Turing_machine
https://en.wikipedia.org/wiki/Andrew_Hodges
https://en.wikipedia.org/wiki/Alan_Turing:_The_Enigma
https://en.wikipedia.org/wiki/Princeton_University_Press
https://en.wikipedia.org/wiki/International_Standard_Book_Number
https://en.wikipedia.org/wiki/Special:BookSources/978-0-691-15564-7
https://en.wikipedia.org/wiki/Turing_machine
https://en.wikipedia.org/wiki/M._H._A._Newman
https://en.wikipedia.org/wiki/Turing_machine
https://en.wikipedia.org/wiki/Turing_machine
https://en.wikipedia.org/wiki/Turing_machine
https://en.wikipedia.org/wiki/Turing_machine
https://en.wikipedia.org/wiki/Turing_machine
https://en.wiktionary.org/wiki/innings
https://en.wikipedia.org/wiki/Wiktionary
https://en.wikipedia.org/wiki/Turing_machine
http://www.alanturing.net/turing_archive/archive/l/l32/L32-004.html
https://en.wikipedia.org/wiki/Turing_machine
https://en.wikipedia.org/wiki/Turing_machine
https://en.wikipedia.org/wiki/Turing_machine
https://en.wikipedia.org/w/index.php?title=Turing_machine&action=edit&section=25
https://en.wikipedia.org/w/index.php?title=Turing_machine&action=edit&section=26
https://en.wikipedia.org/wiki/Jack_Copeland
https://en.wikipedia.org/wiki/International_Standard_Book_Number
https://en.wikipedia.org/wiki/Special:BookSources/0-19-825079-7
https://en.wikipedia.org/wiki/Emil_Post
https://en.wikipedia.org/wiki/Martin_Davis
https://en.wikipedia.org/wiki/Turing's_proof
https://en.wikipedia.org/wiki/Digital_object_identifier
https://doi.org/10.1112/plms/s2-42.1.230
https://en.wikipedia.org/wiki/Digital_object_identifier
https://doi.org/10.1112/plms/s2-43.6.544
https://en.wikipedia.org/wiki/Digital_object_identifier
https://doi.org/10.1093/philmat/4.3.256
https://en.wikipedia.org/wiki/R._E._Stearns
https://en.wikipedia.org/wiki/JACM
https://en.wikipedia.org/w/index.php?title=Turing_machine&action=edit&section=27
https://en.wikipedia.org/wiki/International_Standard_Book_Number
https://en.wikipedia.org/wiki/Special:BookSources/0-521-20402-X
https://en.wikipedia.org/wiki/International_Standard_Book_Number
https://en.wikipedia.org/wiki/Special:BookSources/0-521-00758-5
https://en.wikipedia.org/wiki/Register_machine
https://en.wikipedia.org/wiki/Computable_function
https://en.wikipedia.org/wiki/Taylor_L._Booth
https://en.wikipedia.org/wiki/Martin_Davis
https://en.wikipedia.org/wiki/International_Standard_Book_Number
https://en.wikipedia.org/wiki/Special:BookSources/0-12-206382-1
https://en.wikipedia.org/wiki/John_Hopcroft
https://en.wikipedia.org/wiki/Jeffrey_Ullman
https://en.wikipedia.org/wiki/Introduction_to_Automata_Theory,_Languages,_and_Computation
https://en.wikipedia.org/wiki/International_Standard_Book_Number
https://en.wikipedia.org/wiki/Special:BookSources/0-201-02988-X
https://en.wikipedia.org/wiki/International_Standard_Book_Number
https://en.wikipedia.org/wiki/Special:BookSources/0-201-44124-1
https://en.wikipedia.org/wiki/Stephen_Kleene
https://en.wikipedia.org/wiki/Donald_Knuth
https://en.wikipedia.org/wiki/Zohar_Manna
https://en.wikipedia.org/w/index.php?title=Mathematical_Theory_of_Computation&action=edit&redlink=1
https://en.wikipedia.org/wiki/International_Standard_Book_Number
https://en.wikipedia.org/wiki/Special:BookSources/978-0-486-43238-0
https://en.wikipedia.org/wiki/Marvin_Minsky
https://en.wikipedia.org/wiki/Christos_Papadimitriou
https://en.wikipedia.org/wiki/International_Standard_Book_Number
https://en.wikipedia.org/wiki/Special:BookSources/0-201-53082-1
https://en.wikipedia.org/wiki/Hartley_Rogers,_Jr.
https://en.wikipedia.org/wiki/International_Standard_Book_Number
https://en.wikipedia.org/wiki/Special:BookSources/0-262-68052-1
https://en.wikipedia.org/wiki/Michael_Sipser
https://en.wikipedia.org/wiki/International_Standard_Book_Number
https://en.wikipedia.org/wiki/Special:BookSources/0-534-94728-X
https://en.wikipedia.org/wiki/International_Standard_Book_Number
https://en.wikipedia.org/wiki/Special:BookSources/0-07-061726-0
https://en.wikipedia.org/wiki/Peter_van_Emde_Boas
https://en.wikipedia.org/wiki/Jan_van_Leeuwen
https://en.wikipedia.org/wiki/International_Standard_Book_Number
https://en.wikipedia.org/wiki/Special:BookSources/0-444-88071-2
https://en.wikipedia.org/w/index.php?title=Turing_machine&action=edit&section=28
http://research.microsoft.com/en-us/um/people/gurevich/Opera/188.pdf
https://en.wikipedia.org/wiki/Roger_Penrose
https://en.wikipedia.org/wiki/International_Standard_Book_Number
https://en.wikipedia.org/wiki/Special:BookSources/0-19-851973-7
https://en.wikipedia.org/w/index.php?title=Turing_machine&action=edit&section=29
https://web.archive.org/web/20050308141040/http:/www.imt.ro/Romjist/Volum1/Vol1_3/turing.htm
https://en.wikipedia.org/wiki/Stephen_Wolfram
http://www.wolframscience.com/nksonline/page-707
https://en.wikipedia.org/wiki/International_Standard_Book_Number
https://en.wikipedia.org/wiki/Special:BookSources/1-57955-008-8
http://www.nature.com/news/2007/071024/full/news.2007.190.html
https://www.newscientist.com/article/dn12826-simplest-universal-computer-wins-student-25000.html
http://www.wolframscience.com/prizes/tm23/TM23Proof.pdf
http://cs.nyu.edu/pipermail/fom/2007-October/012156.html
http://cs.nyu.edu/pipermail/fom/2007-October/012132.html
http://cs.nyu.edu/pipermail/fom/2007-October/012145.html
http://cs.nyu.edu/pipermail/fom/2007-October/012140.html
http://cs.nyu.edu/pipermail/fom/2007-October/012163.html
http://forum.wolframscience.com/showthread.php?s=&threadid=1472
http://www.machinedeturing.com/ang_default.asp
https://en.wikipedia.org/w/index.php?title=Turing_machine&action=edit&section=30
https://en.wikipedia.org/wiki/Martin_Davis
https://en.wikipedia.org/wiki/International_Standard_Book_Number
https://en.wikipedia.org/wiki/Special:BookSources/0-393-32229-7
https://en.wikipedia.org/wiki/Robin_Gandy
https://en.wikipedia.org/w/index.php?title=Rolf_Herken&action=edit&redlink=1
https://en.wikipedia.org/wiki/Stephen_Hawking
https://en.wikipedia.org/wiki/International_Standard_Book_Number
https://en.wikipedia.org/wiki/Special:BookSources/978-0-7624-1922-7
https://en.wikipedia.org/wiki/International_Standard_Book_Number
https://en.wikipedia.org/wiki/Special:BookSources/3-211-82637-8
https://en.wikipedia.org/wiki/Andrew_Hodges
https://en.wikipedia.org/wiki/Alan_Turing:_The_Enigma
https://en.wikipedia.org/wiki/Simon_and_Schuster
https://en.wikipedia.org/wiki/Ivars_Peterson
https://en.wikipedia.org/wiki/International_Standard_Book_Number
https://en.wikipedia.org/wiki/Special:BookSources/0-7167-2064-7
https://en.wikipedia.org/wiki/Roger_Penrose
https://en.wikipedia.org/wiki/Oxford_University_Press
https://en.wikipedia.org/wiki/International_Standard_Book_Number
https://en.wikipedia.org/wiki/Special:BookSources/0-19-851973-7
https://en.wikipedia.org/wiki/Paul_Strathern
https://en.wikipedia.org/wiki/International_Standard_Book_Number
https://en.wikipedia.org/wiki/Special:BookSources/0-385-49243-X
https://en.wikipedia.org/wiki/Hao_Wang_(academic)
https://en.wikipedia.org/wiki/Charles_Petzold
http://www.theannotatedturing.com/
https://en.wikipedia.org/wiki/International_Standard_Book_Number
https://en.wikipedia.org/wiki/Special:BookSources/0-470-22905-5
http://www.cs.princeton.edu/theory/complexity/
https://en.wikipedia.org/wiki/International_Standard_Book_Number
https://en.wikipedia.org/wiki/Special:BookSources/978-0-521-42426-4
https://dx.doi.org/10.1145/1107523.1107525
https://en.wikipedia.org/wiki/SIGACT_News
https://en.wikipedia.org/wiki/Digital_object_identifier
https://doi.org/10.1145/1107523.1107525
http://researchprofiles.herts.ac.uk/portal/en/publications/on-undecidability-results-of-real-programming-languages(d3f3aac0-d9da-4756-a421-b4f9ae0cf95f).html
https://en.wikipedia.org/w/index.php?title=Turing_machine&action=edit&section=31
https://commons.wikimedia.org/wiki/Category:Turing_machines
https://en.wikipedia.org/wiki/Michiel_Hazewinkel
https://www.encyclopediaofmath.org/index.php?title=p/t094460
https://en.wikipedia.org/wiki/Encyclopedia_of_Mathematics
https://en.wikipedia.org/wiki/International_Standard_Book_Number
https://en.wikipedia.org/wiki/Special:BookSources/978-1-55608-010-4
http://plato.stanford.edu/entries/turing-machine/
http://plato.stanford.edu/entries/church-turing/
http://webturingmachine.appspot.com/
http://www.weizmann.ac.il/mathusers/lbn/new_pages/Research_Turing.html
http://www.SaschaSeidel.de/html/programmierung/download_The_Turing_machine.php
http://www.wolframscience.com/prizes/tm23/
http://demonstrations.wolfram.com/TuringMachineCausalNetworks/
https://en.wikipedia.org/wiki/Wolfram_Demonstrations_Project
https://dmoztools.net/Computers/Computer_Science/Theoretical/Automata_Theory/Turing_Machines
https://en.wikipedia.org/wiki/DMOZ
http://www.turing2012.fr/?p=530&lang=en
http://www.turingsimulator.net/
http://www.turingsimulator.net/github
http://www.iwm.org.uk/history/how-alan-turing-cracked-the-enigma-code
https://en.wikipedia.org/wiki/Template:Formal_languages_and_grammars
https://en.wikipedia.org/wiki/Template_talk:Formal_languages_and_grammars
https://en.wikipedia.org/w/index.php?title=Template:Formal_languages_and_grammars&action=edit
https://en.wikipedia.org/wiki/Automata_theory
https://en.wikipedia.org/wiki/Formal_language
https://en.wikipedia.org/wiki/Formal_grammar
https://en.wikipedia.org/wiki/Chomsky_hierarchy
https://en.wikipedia.org/wiki/Formal_grammar
https://en.wikipedia.org/wiki/Formal_language
https://en.wikipedia.org/wiki/Abstract_machine
https://en.wikipedia.org/wiki/Unrestricted_grammar
https://en.wikipedia.org/wiki/Context-sensitive_grammar
https://en.wikipedia.org/wiki/Range_concatenation_grammars
https://en.wikipedia.org/wiki/Indexed_grammar
https://en.wikipedia.org/wiki/Linear_context-free_rewriting_system
https://en.wikipedia.org/wiki/Tree-adjoining_grammar
https://en.wikipedia.org/wiki/Context-free_grammar
https://en.wikipedia.org/wiki/Deterministic_context-free_grammar
https://en.wikipedia.org/wiki/Nested_word
https://en.wikipedia.org/wiki/Regular_grammar
https://en.wikipedia.org/wiki/Non-recursive_grammar
https://en.wikipedia.org/wiki/Recursively_enumerable_language
https://en.wikipedia.org/wiki/Recursive_language
https://en.wikipedia.org/wiki/Context-sensitive_language
https://en.wikipedia.org/wiki/Range_concatenation_language
https://en.wikipedia.org/wiki/Indexed_language
https://en.wikipedia.org/wiki/Linear_context-free_rewriting_language
https://en.wikipedia.org/wiki/Tree-adjoining_grammar
https://en.wikipedia.org/wiki/Context-free_language
https://en.wikipedia.org/wiki/Deterministic_context-free_language
https://en.wikipedia.org/wiki/Nested_word
https://en.wikipedia.org/wiki/Regular_language
https://en.wikipedia.org/wiki/Star-free_language
https://en.wikipedia.org/wiki/Finite_language
https://en.wikipedia.org/wiki/Machine_that_always_halts
https://en.wikipedia.org/wiki/Linear_bounded_automaton
https://en.wikipedia.org/wiki/PTIME
https://en.wikipedia.org/wiki/Nested_stack_automaton
https://en.wikipedia.org/wiki/Thread_automaton
https://en.wikipedia.org/wiki/Tree_stack_automaton
https://en.wikipedia.org/wiki/Embedded_pushdown_automaton
https://en.wikipedia.org/wiki/Pushdown_automaton
https://en.wikipedia.org/wiki/Deterministic_pushdown_automaton
https://en.wikipedia.org/wiki/Nested_word
https://en.wikipedia.org/wiki/Finite-state_machine
https://en.wikipedia.org/wiki/Aperiodic_finite_state_automaton
https://en.wikipedia.org/wiki/Deterministic_acyclic_finite_state_automaton
https://en.wikipedia.org/wiki/Proper_subset
https://en.wikipedia.org/wiki/Help:Authority_control
https://en.wikipedia.org/wiki/Integrated_Authority_File
https://d-nb.info/gnd/4203525-9
https://en.wikipedia.org/wiki/National_Diet_Library
https://id.ndl.go.jp/auth/ndlna/00573533
https://en.wikipedia.org/w/index.php?title=Turing_machine&oldid=807980227
https://en.wikipedia.org/wiki/Help:Category
https://en.wikipedia.org/wiki/Category:1936_in_computer_science
https://en.wikipedia.org/wiki/Category:1937_in_computer_science
https://en.wikipedia.org/wiki/Category:Turing_machine
https://en.wikipedia.org/wiki/Category:Educational_abstract_machines
https://en.wikipedia.org/wiki/Category:Theoretical_computer_science
https://en.wikipedia.org/wiki/Category:Alan_Turing
https://en.wikipedia.org/wiki/Category:Models_of_computation
https://en.wikipedia.org/wiki/Category:Formal_methods
https://en.wikipedia.org/wiki/Category:Computability_theory
https://en.wikipedia.org/wiki/Category:English_inventions
https://en.wikipedia.org/wiki/Category:Automata_(computation)
https://en.wikipedia.org/wiki/Category:Formal_languages
https://en.wikipedia.org/wiki/Category:All_articles_with_specifically_marked_weasel-worded_phrases
https://en.wikipedia.org/wiki/Category:Articles_with_specifically_marked_weasel-worded_phrases_from_February_2016
https://en.wikipedia.org/wiki/Category:Articles_needing_additional_references_from_April_2015
https://en.wikipedia.org/wiki/Category:All_articles_needing_additional_references
https://en.wikipedia.org/wiki/Category:Articles_with_DMOZ_links
https://en.wikipedia.org/wiki/Category:Wikipedia_articles_with_GND_identifiers
https://en.wikipedia.org/wiki/Special:MyTalk
https://en.wikipedia.org/wiki/Special:MyContributions
https://en.wikipedia.org/w/index.php?title=Special:CreateAccount&returnto=Turing+machine
https://en.wikipedia.org/w/index.php?title=Special:UserLogin&returnto=Turing+machine
https://en.wikipedia.org/wiki/Turing_machine
https://en.wikipedia.org/wiki/Talk:Turing_machine
https://en.wikipedia.org/wiki/Turing_machine
https://en.wikipedia.org/w/index.php?title=Turing_machine&action=edit
https://en.wikipedia.org/w/index.php?title=Turing_machine&action=history
https://en.wikipedia.org/wiki/Main_Page
https://en.wikipedia.org/wiki/Main_Page
https://en.wikipedia.org/wiki/Portal:Contents
https://en.wikipedia.org/wiki/Portal:Featured_content
https://en.wikipedia.org/wiki/Portal:Current_events
https://en.wikipedia.org/wiki/Special:Random
https://donate.wikimedia.org/wiki/Special:FundraiserRedirector?utm_source=donate&utm_medium=sidebar&utm_campaign=C13_en.wikipedia.org&uselang=en
https://shop.wikimedia.org
https://en.wikipedia.org/wiki/Help:Contents
https://en.wikipedia.org/wiki/Wikipedia:About
https://en.wikipedia.org/wiki/Wikipedia:Community_portal
https://en.wikipedia.org/wiki/Special:RecentChanges
https://en.wikipedia.org/wiki/Wikipedia:Contact_us
https://en.wikipedia.org/wiki/Special:WhatLinksHere/Turing_machine
https://en.wikipedia.org/wiki/Special:RecentChangesLinked/Turing_machine
https://en.wikipedia.org/wiki/Wikipedia:File_Upload_Wizard
https://en.wikipedia.org/wiki/Special:SpecialPages
https://en.wikipedia.org/w/index.php?title=Turing_machine&oldid=807980227
https://en.wikipedia.org/w/index.php?title=Turing_machine&action=info
https://www.wikidata.org/wiki/Special:EntityPage/Q163310
https://en.wikipedia.org/w/index.php?title=Special:CiteThisPage&page=Turing_machine&id=807980227
https://en.wikipedia.org/w/index.php?title=Special:Book&bookcmd=book_creator&referer=Turing+machine
https://en.wikipedia.org/w/index.php?title=Special:ElectronPdf&page=Turing+machine&action=show-download-screen
https://en.wikipedia.org/w/index.php?title=Turing_machine&printable=yes
https://commons.wikimedia.org/wiki/Category:Turing_machines
https://als.wikipedia.org/wiki/Turingmaschine
https://ar.wikipedia.org/wiki/آلة_تورنغ
https://be.wikipedia.org/wiki/Машына_Цьюрынга
https://be-x-old.wikipedia.org/wiki/Машына_Т’юрынга
https://bg.wikipedia.org/wiki/Машина_на_Тюринг
https://bs.wikipedia.org/wiki/Turingova_mašina
https://ca.wikipedia.org/wiki/Màquina_de_Turing
https://cs.wikipedia.org/wiki/Turingův_stroj
https://da.wikipedia.org/wiki/Turingmaskine
https://de.wikipedia.org/wiki/Turingmaschine
https://et.wikipedia.org/wiki/Turingi_masin
https://el.wikipedia.org/wiki/Μηχανή_Τούρινγκ
https://es.wikipedia.org/wiki/Máquina_de_Turing
https://eo.wikipedia.org/wiki/Maŝino_de_Turing
https://eu.wikipedia.org/wiki/Turingen_makina
https://fa.wikipedia.org/wiki/ماشین_تورینگ
https://fr.wikipedia.org/wiki/Machine_de_Turing
https://fur.wikipedia.org/wiki/Machine_di_Turing
https://ki.wikipedia.org/wiki/Macini_ya_Turing
https://ko.wikipedia.org/wiki/튜링_기계
https://hy.wikipedia.org/wiki/Թյուրինգի_մեքենա
https://hr.wikipedia.org/wiki/Turingov_stroj
https://id.wikipedia.org/wiki/Mesin_Turing
https://ia.wikipedia.org/wiki/Machina_de_Turing
https://it.wikipedia.org/wiki/Macchina_di_Turing
https://he.wikipedia.org/wiki/מכונת_טיורינג
https://la.wikipedia.org/wiki/Machina_Turing
https://lv.wikipedia.org/wiki/Tjūringa_mašīna
https://lb.wikipedia.org/wiki/Turingmaschinn
https://lt.wikipedia.org/wiki/Tiuringo_mašina
https://hu.wikipedia.org/wiki/Turing-gép
https://mk.wikipedia.org/wiki/Тјурингова_машина
https://ml.wikipedia.org/wiki/ടൂറിങ്_മെഷീൻ
https://mwl.wikipedia.org/wiki/Máquina_de_Turing
https://nl.wikipedia.org/wiki/Turingmachine
https://ja.wikipedia.org/wiki/チューリングマシン
https://no.wikipedia.org/wiki/Turingmaskin
https://pl.wikipedia.org/wiki/Maszyna_Turinga
https://pt.wikipedia.org/wiki/Máquina_de_Turing
https://ro.wikipedia.org/wiki/Mașină_Turing
https://ru.wikipedia.org/wiki/Машина_Тьюринга
https://sco.wikipedia.org/wiki/Turing_machine
https://sq.wikipedia.org/wiki/Makina_Turing
https://simple.wikipedia.org/wiki/Turing_machine
https://sk.wikipedia.org/wiki/Turingov_stroj
https://sl.wikipedia.org/wiki/Turingov_stroj
https://sr.wikipedia.org/wiki/Тјурингова_машина
https://sh.wikipedia.org/wiki/Turingov_stroj
https://fi.wikipedia.org/wiki/Turingin_kone
https://sv.wikipedia.org/wiki/Turingmaskin
https://th.wikipedia.org/wiki/เครื่องทัวริง
https://tr.wikipedia.org/wiki/Turing_makinesi
https://uk.wikipedia.org/wiki/Машина_Тюрінга
https://vi.wikipedia.org/wiki/Máy_Turing
https://zh.wikipedia.org/wiki/图灵机
https://www.wikidata.org/wiki/Special:EntityPage/Q163310
https://en.wikipedia.org/wiki/Wikipedia:Text_of_Creative_Commons_Attribution-ShareAlike_3.0_Unported_License
https://creativecommons.org/licenses/by-sa/3.0/
https://wikimediafoundation.org/wiki/Terms_of_Use
https://wikimediafoundation.org/wiki/Privacy_policy
https://www.wikimediafoundation.org/
https://wikimediafoundation.org/wiki/Privacy_policy
https://en.wikipedia.org/wiki/Wikipedia:About
https://en.wikipedia.org/wiki/Wikipedia:General_disclaimer
https://en.wikipedia.org/wiki/Wikipedia:Contact_us
https://www.mediawiki.org/wiki/Special:MyLanguage/How_to_contribute
https://wikimediafoundation.org/wiki/Cookie_statement
https://en.m.wikipedia.org/w/index.php?title=Turing_machine&mobileaction=toggle_view_mobile
https://wikimediafoundation.org/
https://www.mediawiki.org/
