https://en.wikipedia.org/wiki/Software_testing
Software testing - Wikipedia
Software testing is an investigation conducted to provide stakeholders with information about the quality of the software product or service under test. Software testing can also provide an objective,...
software testing from wikipedia the free encyclopedia jump to navigation search software development core activities processes requirements design engineering construction testing debugging deployment maintenance paradigms and models agile cleanroom incremental prototyping spiral waterfall methodologies and frameworks devops dsdm fdd iid kanban lean sd mdd msf psp rad safe scrum semat tsp up vmodel xp supporting disciplines configuration management documentation software quality assurance sqa project management user experience practices atdd bdd cco ci cd ddd pp standup tdd tools compiler debugger profiler gui designer modeling ide build automation release automation infrastructure as code testing standards and boks cmmi ieee standards iso 9001 isoiec standards swebok pmbok babok v t e software testing is an investigation conducted to provide stakeholders with information about the quality of the software product or service under test1 software testing can also provide an objective independent view of the software to allow the business to appreciate and understand the risks of software implementation test techniques include the process of executing a program or application with the intent of finding software bugs errors or other defects and verifying that the software product is fit for use software testing involves the execution of a software component or system component to evaluate one or more properties of interest in general these properties indicate the extent to which the component or system under test meets the requirements that guided its design and development responds correctly to all kinds of inputs performs its functions within an acceptable time is sufficiently usable can be installed and run in its intended environments and achieves the general result its stakeholders desire as the number of possible tests for even simple software components is practically infinite all software testing uses some strategy to select tests that are feasible for the available time and resources as a result software testing typically but not exclusively attempts to execute a program or application with the intent of finding software bugs errors or other defects the job of testing is an iterative process as when one bug is fixed it can illuminate other deeper bugs or can even create new ones software testing can provide objective independent information about the quality of software and risk of its failure to users or sponsors1 software testing can be conducted as soon as executable software even if partially complete exists the overall approach to software development often determines when and how testing is conducted for example in a phased process most testing occurs after system requirements have been defined and then implemented in testable programs in contrast under an agile approach requirements programming and testing are often done concurrently contents 1 overview 11 defects and failures 12 input combinations and preconditions 13 economics 14 roles 2 history 3 testing methods 31 static vs dynamic testing 32 the box approach 321 whitebox testing 322 blackbox testing 3221 visual testing 323 greybox testing 4 testing levels 41 unit testing 42 integration testing 43 component interface testing 44 system testing 45 operational acceptance testing 5 testing types 51 installation testing 52 compatibility testing 53 smoke and sanity testing 54 regression testing 55 acceptance testing 56 alpha testing 57 beta testing 58 functional vs nonfunctional testing 59 continuous testing 510 destructive testing 511 software performance testing 512 usability testing 513 accessibility testing 514 security testing 515 internationalization and localization 516 development testing 517 ab testing 518 concurrent testing 519 conformance testing or type testing 6 testing process 61 traditional waterfall development model 62 agile or extreme development model 63 a sample testing cycle 7 automated testing 71 testing tools 8 measurement in software testing 81 hierarchy of testing difficulty 9 testing artifacts 10 certifications 11 controversy 12 related processes 121 software verification and validation 122 software quality assurance sqa 13 references 14 further reading 15 see also 16 external links overviewedit although testing can determine the correctness of software under the assumption of some specific hypotheses see hierarchy of testing difficulty below testing cannot identify all the defects within software2 instead it furnishes a criticism or comparison that compares the state and behavior of the product against oracles—principles or mechanisms by which someone might recognize a problem these oracles may include but are not limited to specifications contracts3 comparable products past versions of the same product inferences about intended or expected purpose user or customer expectations relevant standards applicable laws or other criteria a primary purpose of testing is to detect software failures so that defects may be discovered and corrected testing cannot establish that a product functions properly under all conditions but can establish only that it does not function properly under specific conditions4 the scope of software testing often includes examination of code as well as execution of that code in various environments and conditions as well as examining the aspects of code does it do what it is supposed to do and do what it needs to do in the current culture of software development a testing organization may be separate from the development team there are various roles for testing team members information derived from software testing may be used to correct the process by which software is developed5 every software product has a target audience for example the audience for video game software is completely different from banking software therefore when an organization develops or otherwise invests in a software product it can assess whether the software product will be acceptable to its end users its target audience its purchasers and other stakeholders software testing is the process of attempting to make this assessment defects and failuresedit not all software defects are caused by coding errors one common source of expensive defects is requirement gaps eg unrecognized requirements which result in errors of omission by the program designer6 requirement gaps can often be nonfunctional requirements such as testability scalability maintainability usability performance and security software faults occur through the following processes a programmer makes an error mistake which results in a defect fault bug in the software source code if this defect is executed in certain situations the system will produce wrong results causing a failure7 not all defects will necessarily result in failures for example defects in dead code will never result in failures a defect can turn into a failure when the environment is changed examples of these changes in environment include the software being run on a new computer hardware platform alterations in source data or interacting with different software7 a single defect may result in a wide range of failure symptoms input combinations and preconditionsedit a fundamental problem with software testing is that testing under all combinations of inputs and preconditions initial state is not feasible even with a simple product417–188 this means that the number of defects in a software product can be very large and defects that occur infrequently are difficult to find in testing more significantly nonfunctional dimensions of quality how it is supposed to be versus what it is supposed to do—usability scalability performance compatibility reliability—can be highly subjective something that constitutes sufficient value to one person may be intolerable to another software developers cant test everything but they can use combinatorial test design to identify the minimum number of tests needed to get the coverage they want combinatorial test design enables users to get greater test coverage with fewer tests whether they are looking for speed or test depth they can use combinatorial test design methods to build structured variation into their test cases9 economicsedit a study conducted by nist in 2002 reports that software bugs cost the us economy 595 billion annually more than a third of this cost could be avoided if better software testing was performed10dubious – discuss outsourcing software testing because of costs is very common with china the philippines and india being preferred destinations11 it is commonly believed that the earlier a defect is found the cheaper it is to fix it the following table shows the cost of fixing the defect depending on the stage it was found12 for example if a problem in the requirements is found only postrelease then it would cost 10–100 times more to fix than if it had already been found by the requirements review with the advent of modern continuous deployment practices and cloudbased services the cost of redeployment and maintenance may lessen over time cost to fix a defect time detected requirements architecture construction system test postrelease time introduced requirements 1× 3× 5–10× 10× 10–100× architecture – 1× 10× 15× 25–100× construction – – 1× 10× 10–25× the data from which this table is extrapolated is scant laurent bossavit says in his analysis the smaller projects curve turns out to be from only two teams of firstyear students a sample size so small that extrapolating to smaller projects in general is totally indefensible the gte study does not explain its data other than to say it came from two projects one large and one small the paper cited for the bell labs safeguard project specifically disclaims having collected the finegrained data that boehms data points suggest the ibm study fagans paper contains claims which seem to contradict boehms graph and no numerical results which clearly correspond to his data points boehm doesnt even cite a paper for the trw data except when writing for making software in 2010 and there he cited the original 1976 article there exists a large study conducted at trw at the right time for boehm to cite it but that paper doesnt contain the sort of data that would support boehms claims13 rolesedit software testing can be done by software testers until the 1980s the term software tester was used generally but later it was also seen as a separate profession regarding the periods and the different goals in software testing14 different roles have been established such as test manager test lead test analyst test designer tester automation developer and test administrator historyedit the separation of debugging from testing was initially introduced by glenford j myers in 197915 although his attention was on breakage testing a successful test is one that finds a bug1516 it illustrated the desire of the software engineering community to separate fundamental development activities such as debugging from that of verification testing methodsedit this scientific article needs additional citations to secondary or tertiary sources such as review articles monographs or textbooks please add such references to provide context and establish the relevance of any primary research articles cited unsourced material may be challenged and removed march 2015 static vs dynamic testingedit there are many approaches available in software testing reviews walkthroughs or inspections are referred to as static testing whereas actually executing programmed code with a given set of test cases is referred to as dynamic testing static testing is often implicit as proofreading plus when programming toolstext editors check source code structure or compilers precompilers check syntax and data flow as static program analysis dynamic testing takes place when the program itself is run dynamic testing may begin before the program is 100 complete in order to test particular sections of code and are applied to discrete functions or modules typical techniques for this are either using stubsdrivers or execution from a debugger environment static testing involves verification whereas dynamic testing involves validation together they help improve software quality among the techniques for static analysis mutation testing can be used to ensure the test cases will detect errors which are introduced by mutating the source code the box approachedit software testing methods are traditionally divided into white and blackbox testing these two approaches are used to describe the point of view that a test engineer takes when designing test cases whitebox testingedit main article whitebox testing whitebox testing also known as clear box testing glass box testing transparent box testing and structural testing by seeing the source code tests internal structures or workings of a program as opposed to the functionality exposed to the enduser in whitebox testing an internal perspective of the system as well as programming skills are used to design test cases the tester chooses inputs to exercise paths through the code and determine the appropriate outputs this is analogous to testing nodes in a circuit eg incircuit testing ict while whitebox testing can be applied at the unit integration and system levels of the software testing process it is usually done at the unit level it can test paths within a unit paths between units during integration and between subsystems during a system–level test though this method of test design can uncover many errors or problems it might not detect unimplemented parts of the specification or missing requirements techniques used in whitebox testing include api testing – testing of the application using public and private apis application programming interfaces code coverage – creating tests to satisfy some criteria of code coverage eg the test designer can create tests to cause all statements in the program to be executed at least once fault injection methods – intentionally introducing faults to gauge the efficacy of testing strategies mutation testing methods static testing methods code coverage tools can evaluate the completeness of a test suite that was created with any method including blackbox testing this allows the software team to examine parts of a system that are rarely tested and ensures that the most important function points have been tested17 code coverage as a software metric can be reported as a percentage for function coverage which reports on functions executed statement coverage which reports on the number of lines executed to complete the test decision coverage which reports on whether both the true and the false branch of a given test has been executed 100 statement coverage ensures that all code paths or branches in terms of control flow are executed at least once this is helpful in ensuring correct functionality but not sufficient since the same code may process different inputs correctly or incorrectly blackbox testingedit main article blackbox testing black box diagram blackbox testing treats the software as a black box examining functionality without any knowledge of internal implementation without seeing the source code the testers are only aware of what the software is supposed to do not how it does it18 blackbox testing methods include equivalence partitioning boundary value analysis allpairs testing state transition tables decision table testing fuzz testing modelbased testing use case testing exploratory testing and specificationbased testing specificationbased testing aims to test the functionality of software according to the applicable requirements19 this level of testing usually requires thorough test cases to be provided to the tester who then can simply verify that for a given input the output value or behavior either is or is not the same as the expected value specified in the test case test cases are built around specifications and requirements ie what the application is supposed to do it uses external descriptions of the software including specifications requirements and designs to derive test cases these tests can be functional or nonfunctional though usually functional specificationbased testing may be necessary to assure correct functionality but it is insufficient to guard against complex or highrisk situations20 one advantage of the black box technique is that no programming knowledge is required whatever biases the programmers may have had the tester likely has a different set and may emphasize different areas of functionality on the other hand blackbox testing has been said to be like a walk in a dark labyrinth without a flashlight21 because they do not examine the source code there are situations when a tester writes many test cases to check something that could have been tested by only one test case or leaves some parts of the program untested this method of test can be applied to all levels of software testing unit integration system and acceptance it typically comprises most if not all testing at higher levels but can also dominate unit testing as well visual testingedit the aim of visual testing is to provide developers with the ability to examine what was happening at the point of software failure by presenting the data in such a way that the developer can easily ﬁnd the information she or he requires and the information is expressed clearly2223 at the core of visual testing is the idea that showing someone a problem or a test failure rather than just describing it greatly increases clarity and understanding visual testing therefore requires the recording of the entire test process – capturing everything that occurs on the test system in video format output videos are supplemented by realtime tester input via pictureinapicture webcam and audio commentary from microphones visual testing provides a number of advantages the quality of communication is increased drastically because testers can show the problem and the events leading up to it to the developer as opposed to just describing it and the need to replicate test failures will cease to exist in many cases the developer will have all the evidence he or she requires of a test failure and can instead focus on the cause of the fault and how it should be fixed visual testing is particularly wellsuited for environments that deploy agile methods in their development of software since agile methods require greater communication between testers and developers and collaboration within small teamscitation needed ad hoc testing and exploratory testing are important methodologies for checking software integrity because they require less preparation time to implement while the important bugs can be found quickly in ad hoc testing where testing takes place in an improvised impromptu way the ability of a test tool to visually record everything that occurs on a system becomes very important in order to document the steps taken to uncover the bugclarification neededcitation needed visual testing is gathering recognition in customer acceptance and usability testing because the test can be used by many individuals involved in the development processcitation needed for the customer it becomes easy to provide detailed bug reports and feedback and for program users visual testing can record user actions on screen as well as their voice and image to provide a complete picture at the time of software failure for the developers further information graphical user interface testing greybox testingedit main article gray box testing greybox testing american spelling graybox testing involves having knowledge of internal data structures and algorithms for purposes of designing tests while executing those tests at the user or blackbox level the tester is not required to have full access to the softwares source code24not in citation given manipulating input data and formatting output do not qualify as greybox because the input and output are clearly outside of the black box that we are calling the system under test this distinction is particularly important when conducting integration testing between two modules of code written by two different developers where only the interfaces are exposed for test however tests that require modifying a backend data repository such as a database or a log file does qualify as greybox as the user would not normally be able to change the data repository in normal production operationscitation needed greybox testing may also include reverse engineering to determine for instance boundary values or error messages by knowing the underlying concepts of how the software works the tester makes betterinformed testing choices while testing the software from outside typically a greybox tester will be permitted to set up an isolated testing environment with activities such as seeding a database the tester can observe the state of the product being tested after performing certain actions such as executing sql statements against the database and then executing queries to ensure that the expected changes have been reflected greybox testing implements intelligent test scenarios based on limited information this will particularly apply to data type handling exception handling and so on25 testing levelsedit there are generally four recognized levels of tests unit testing integration testing component interface testing and system testing tests are frequently grouped by where they are added in the software development process or by the level of specificity of the test the main levels during the development process as defined by the swebok guide are unit integration and system testing that are distinguished by the test target without implying a specific process model26 other test levels are classified by the testing objective26 there are two different levels of tests from the perspective of customers lowlevel testing llt and highlevel testing hlt llt is a group of tests for different level components of software application or product hlt is a group of tests for the whole software application or productcitation needed unit testingedit main article unit testing unit testing refers to tests that verify the functionality of a specific section of code usually at the function level in an objectoriented environment this is usually at the class level and the minimal unit tests include the constructors and destructors27 these types of tests are usually written by developers as they work on code whitebox style to ensure that the specific function is working as expected one function might have multiple tests to catch corner cases or other branches in the code unit testing alone cannot verify the functionality of a piece of software but rather is used to ensure that the building blocks of the software work independently from each other unit testing is a software development process that involves synchronized application of a broad spectrum of defect prevention and detection strategies in order to reduce software development risks time and costs it is performed by the software developer or engineer during the construction phase of the software development lifecycle rather than replace traditional qa focuses it augments it unit testing aims to eliminate construction errors before code is promoted to qa this strategy is intended to increase the quality of the resulting software as well as the efficiency of the overall development and qa process depending on the organizations expectations for software development unit testing might include static code analysis dataflow analysis metrics analysis peer code reviews code coverage analysis and other software verification practices integration testingedit main article integration testing integration testing is any type of software testing that seeks to verify the interfaces between components against a software design software components may be integrated in an iterative way or all together big bang normally the former is considered a better practice since it allows interface issues to be located more quickly and fixed integration testing works to expose defects in the interfaces and interaction between integrated components modules progressively larger groups of tested software components corresponding to elements of the architectural design are integrated and tested until the software works as a system28 component interface testingedit the practice of component interface testing can be used to check the handling of data passed between various units or subsystem components beyond full integration testing between those units2930 the data being passed can be considered as message packets and the range or data types can be checked for data generated from one unit and tested for validity before being passed into another unit one option for interface testing is to keep a separate log file of data items being passed often with a timestamp logged to allow analysis of thousands of cases of data passed between units for days or weeks tests can include checking the handling of some extreme data values while other interface variables are passed as normal values29 unusual data values in an interface can help explain unexpected performance in the next unit component interface testing is a variation of blackbox testing30 with the focus on the data values beyond just the related actions of a subsystem component system testingedit main article system testing system testing tests a completely integrated system to verify that the system meets its requirements31 for example a system test might involve testing a logon interface then creating and editing an entry plus sending or printing results followed by summary processing or deletion or archiving of entries then logoff operational acceptance testingedit main article operational acceptance testing operational acceptance is used to conduct operational readiness prerelease of a product service or system as part of a quality management system oat is a common type of nonfunctional software testing used mainly in software development and software maintenance projects this type of testing focuses on the operational readiness of the system to be supported or to become part of the production environment hence it is also known as operational readiness testing ort or operations readiness and assurance ora testing functional testing within oat is limited to those tests which are required to verify the nonfunctional aspects of the system in addition the software testing should ensure that the portability of the system as well as working as expected does not also damage or partially corrupt its operating environment or cause other processes within that environment to become inoperative32 testing typesedit testingcup polish championship in software testing katowice may 2016 installation testingedit main article installation testing an installation test assures that the system is installed correctly and working at actual customers hardware compatibility testingedit main article compatibility testing a common cause of software failure real or perceived is a lack of its compatibility with other application software operating systems or operating system versions old or new or target environments that differ greatly from the original such as a terminal or gui application intended to be run on the desktop now being required to become a web application which must render in a web browser for example in the case of a lack of backward compatibility this can occur because the programmers develop and test software only on the latest version of the target environment which not all users may be running this results in the unintended consequence that the latest work may not function on earlier versions of the target environment or on older hardware that earlier versions of the target environment was capable of using sometimes such issues can be fixed by proactively abstracting operating system functionality into a separate program module or library smoke and sanity testingedit sanity testing determines whether it is reasonable to proceed with further testing smoke testing consists of minimal attempts to operate the software designed to determine whether there are any basic problems that will prevent it from working at all such tests can be used as build verification test regression testingedit main article regression testing regression testing focuses on finding defects after a major code change has occurred specifically it seeks to uncover software regressions as degraded or lost features including old bugs that have come back such regressions occur whenever software functionality that was previously working correctly stops working as intended typically regressions occur as an unintended consequence of program changes when the newly developed part of the software collides with the previously existing code common methods of regression testing include rerunning previous sets of test cases and checking whether previously fixed faults have reemerged the depth of testing depends on the phase in the release process and the risk of the added features they can either be complete for changes added late in the release or deemed to be risky or be very shallow consisting of positive tests on each feature if the changes are early in the release or deemed to be of low risk regression testing is typically the largest test effort in commercial software development33 due to checking numerous details in prior software features and even new software can be developed while using some old test cases to test parts of the new design to ensure prior functionality is still supported acceptance testingedit main article acceptance testing acceptance testing can mean one of two things a smoke test is used as an acceptance test prior to introducing a new build to the main testing process ie before integration or regression acceptance testing performed by the customer often in their lab environment on their own hardware is known as user acceptance testing uat acceptance testing may be performed as part of the handoff process between any two phases of developmentcitation needed alpha testingedit alpha testing is simulated or actual operational testing by potential userscustomers or an independent test team at the developers site alpha testing is often employed for offtheshelf software as a form of internal acceptance testing before the software goes to beta testing34 beta testingedit beta testing comes after alpha testing and can be considered a form of external user acceptance testing versions of the software known as beta versions are released to a limited audience outside of the programming team known as beta testers the software is released to groups of people so that further testing can ensure the product has few faults or bugs beta versions can be made available to the open public to increase the feedback field to a maximal number of future users and to deliver value earlier for an extended or even indefinite period of time perpetual betacitation needed functional vs nonfunctional testingedit functional testing refers to activities that verify a specific action or function of the code these are usually found in the code requirements documentation although some development methodologies work from use cases or user stories functional tests tend to answer the question of can the user do this or does this particular feature work nonfunctional testing refers to aspects of the software that may not be related to a specific function or user action such as scalability or other performance behavior under certain constraints or security testing will determine the breaking point the point at which extremes of scalability or performance leads to unstable execution nonfunctional requirements tend to be those that reflect the quality of the product particularly in the context of the suitability perspective of its users continuous testingedit main article continuous testing continuous testing is the process of executing automated tests as part of the software delivery pipeline to obtain immediate feedback on the business risks associated with a software release candidate3536 continuous testing includes the validation of both functional requirements and nonfunctional requirements the scope of testing extends from validating bottomup requirements or user stories to assessing the system requirements associated with overarching business goals37373839 destructive testingedit main article destructive testing destructive testing attempts to cause the software or a subsystem to fail it verifies that the software functions properly even when it receives invalid or unexpected inputs thereby establishing the robustness of input validation and errormanagement routinescitation needed software fault injection in the form of fuzzing is an example of failure testing various commercial nonfunctional testing tools are linked from the software fault injection page there are also numerous opensource and free software tools available that perform destructive testing further information exception handling and recovery testing software performance testingedit main article software performance testing performance testing is generally executed to determine how a system or subsystem performs in terms of responsiveness and stability under a particular workload it can also serve to investigate measure validate or verify other quality attributes of the system such as scalability reliability and resource usage load testing is primarily concerned with testing that the system can continue to operate under a specific load whether that be large quantities of data or a large number of users this is generally referred to as software scalability the related load testing activity of when performed as a nonfunctional activity is often referred to as endurance testing volume testing is a way to test software functions even when certain components for example a file or database increase radically in size stress testing is a way to test reliability under unexpected or rare workloads stability testing often referred to as load or endurance testing checks to see if the software can continuously function well in or above an acceptable period there is little agreement on what the specific goals of performance testing are the terms load testing performance testing scalability testing and volume testing are often used interchangeably realtime software systems have strict timing constraints to test if timing constraints are met realtime testing is used usability testingedit usability testing is to check if the user interface is easy to use and understand it is concerned mainly with the use of the application accessibility testingedit accessibility testing may include compliance with standards such as americans with disabilities act of 1990 section 508 amendment to the rehabilitation act of 1973 web accessibility initiative wai of the world wide web consortium w3c security testingedit security testing is essential for software that processes confidential data to prevent system intrusion by hackers the international organization for standardization iso defines this as a type of testing conducted to evaluate the degree to which a test item and associated data and information are protected so that unauthorised persons or systems cannot use read or modify them and authorized persons or systems are not denied access to them40 internationalization and localizationedit the general ability of software to be internationalized and localized can be automatically tested without actual translation by using pseudolocalization it will verify that the application still works even after it has been translated into a new language or adapted for a new culture such as different currencies or time zones41 actual translation to human languages must be tested too possible localization failures include software is often localized by translating a list of strings out of context and the translator may choose the wrong translation for an ambiguous source string technical terminology may become inconsistent if the project is translated by several people without proper coordination or if the translator is imprudent literal wordforword translations may sound inappropriate artificial or too technical in the target language untranslated messages in the original language may be left hard coded in the source code some messages may be created automatically at run time and the resulting string may be ungrammatical functionally incorrect misleading or confusing software may use a keyboard shortcut which has no function on the source languages keyboard layout but is used for typing characters in the layout of the target language software may lack support for the character encoding of the target language fonts and font sizes which are appropriate in the source language may be inappropriate in the target language for example cjk characters may become unreadable if the font is too small a string in the target language may be longer than the software can handle this may make the string partly invisible to the user or cause the software to crash or malfunction software may lack proper support for reading or writing bidirectional text software may display images with text that was not localized localized operating systems may have differently named system configuration files and environment variables and different formats for date and currency development testingedit main article development testing development testing is a software development process that involves synchronized application of a broad spectrum of defect prevention and detection strategies in order to reduce software development risks time and costs it is performed by the software developer or engineer during the construction phase of the software development lifecycle rather than replace traditional qa focuses it augments it development testing aims to eliminate construction errors before code is promoted to qa this strategy is intended to increase the quality of the resulting software as well as the efficiency of the overall development and qa process depending on the organizations expectations for software development development testing might include static code analysis data flow analysis metrics analysis peer code reviews unit testing code coverage analysis traceability and other software verification practices ab testingedit main article ab testing ab testing is basically a comparison of two outputs generally when only one variable has changed run a test change one thing run the test again compare the results this is more useful with more smallscale situations but very useful in finetuning any program with more complex projects multivariant testing can be done concurrent testingedit main article concurrent testing in concurrent testing the focus is on the performance while continuously running with normal input and under normal operational conditions as opposed to stress testing or fuzz testing memory leak as well as basic faults are easier to find with this method conformance testing or type testingedit main article conformance testing in software testing conformance testing verifies that a product performs according to its specified standards compilers for instance are extensively tested to determine whether they meet the recognized standard for that language testing processedit traditional waterfall development modeledit a common practice of software testing is that testing is performed by an independent group of testers after the functionality is developed before it is shipped to the customer42 this practice often results in the testing phase being used as a project buffer to compensate for project delays thereby compromising the time devoted to testing43 another practice is to start software testing at the same moment the project starts and it is a continuous process until the project finishes44 further information capability maturity model integration and waterfall model agile or extreme development modeledit in contrast some emerging software disciplines such as extreme programming and the agile software development movement adhere to a testdriven software development model in this process unit tests are written first by the software engineers often with pair programming in the extreme programming methodology the tests are expected to fail initially as code is written the tests pass incrementally larger portions of the test suites the test suites are continuously updated as new failure conditions and corner cases are discovered and they are integrated with any regression tests that are developed unit tests are maintained along with the rest of the software source code and generally integrated into the build process with inherently interactive tests being relegated to a partially manual build acceptance process the ultimate goal of this test process is to achieve continuous integration where software updates can be published to the public frequently 45 46 this methodology increases the testing effort done by development before reaching any formal testing team in some other development models most of the test execution occurs after the requirements have been defined and the coding process has been completed a sample testing cycleedit although variations exist between organizations there is a typical cycle for testing47 the sample below is common among organizations employing the waterfall development model the same practices are commonly found in other development models but might not be as clear or explicit requirements analysis testing should begin in the requirements phase of the software development life cycle during the design phase testers work to determine what aspects of a design are testable and with what parameters those tests work test planning test strategy test plan testbed creation since many activities will be carried out during testing a plan is needed test development test procedures test scenarios test cases test datasets test scripts to use in testing software test execution testers execute the software based on the plans and test documents then report any errors found to the development team test reporting once testing is completed testers generate metrics and make final reports on their test effort and whether or not the software tested is ready for release test result analysis or defect analysis is done by the development team usually along with the client in order to decide what defects should be assigned fixed rejected ie found software working properly or deferred to be dealt with later defect retesting once a defect has been dealt with by the development team it is retested by the testing team aka resolution testing regression testing it is common to have a small test program built of a subset of tests for each integration of new modified or fixed software in order to ensure that the latest delivery has not ruined anything and that the software product as a whole is still working correctly test closure once the test meets the exit criteria the activities such as capturing the key outputs lessons learned results logs documents related to the project are archived and used as a reference for future projects automated testingedit main article test automation many programming groups are relying more and more on automated testing especially groups that use testdriven development there are many frameworks to write tests in and continuous integration software will run tests automatically every time code is checked into a version control system while automation cannot reproduce everything that a human can do and all the ways they think of doing it it can be very useful for regression testing however it does require a welldeveloped test suite of testing scripts in order to be truly useful testing toolsedit program testing and fault detection can be aided significantly by testing tools and debuggers testingdebug tools include features such as program monitors permitting full or partial monitoring of program code including instruction set simulator permitting complete instruction level monitoring and trace facilities hypervisor permitting complete control of the execution of program code including program animation permitting stepbystep execution and conditional breakpoint at source level or in machine code code coverage reports formatted dump or symbolic debugging tools allowing inspection of program variables on error or at chosen points automated functional graphical user interface gui testing tools are used to repeat systemlevel tests through the gui benchmarks allowing runtime performance comparisons to be made performance analysis or profiling tools that can help to highlight hot spots and resource usage some of these features may be incorporated into a single composite tool or an integrated development environment ide measurement in software testingedit main article software quality quality measures include such topics as correctness completeness security and isoiec 9126 requirements such as capability reliability efficiency portability maintainability compatibility and usability there are a number of frequently used software metrics or measures which are used to assist in determining the state of the software or the adequacy of the testing hierarchy of testing difficultyedit based on the amount of test cases required to construct a complete test suite in each context ie a test suite such that if it is applied to the implementation under test then we collect enough information to precisely determine whether the system is correct or incorrect according to some specification a hierarchy of testing difficulty has been proposed48 49 it includes the following testability classes class i there exists a finite complete test suite class ii any partial distinguishing rate ie any incomplete capability to distinguish correct systems from incorrect systems can be reached with a finite test suite class iii there exists a countable complete test suite class iv there exists a complete test suite class v all cases it has been proved that each class is strictly included into the next for instance testing when we assume that the behavior of the implementation under test can be denoted by a deterministic finitestate machine for some known finite sets of inputs and outputs and with some known number of states belongs to class i and all subsequent classes however if the number of states is not known then it only belongs to all classes from class ii on if the implementation under test must be a deterministic finitestate machine failing the specification for a single trace and its continuations and its number of states is unknown then it only belongs to classes from class iii on testing temporal machines where transitions are triggered if inputs are produced within some realbounded interval only belongs to classes from class iv on whereas testing many nondeterministic systems only belongs to class v but not all and some even belong to class i the inclusion into class i does not require the simplicity of the assumed computation model as some testing cases involving implementations written in any programming language and testing implementations defined as machines depending on continuous magnitudes have been proved to be in class i other elaborated cases such as the testing framework by matthew hennessy under must semantics and temporal machines with rational timeouts belong to class ii testing artifactsedit the software testing process can produce several artifacts test plan a test plan is a document detailing the objectives target market internal beta team and processes for a specific beta test the developers are well aware what test plans will be executed and this information is made available to management and the developers the idea is to make them more cautious when developing their code or making additional changes some companies have a higherlevel document called a test strategy traceability matrix a traceability matrix is a table that correlates requirements or design documents to test documents it is used to change tests when related source documents are changed to select test cases for execution when planning for regression tests by considering requirement coverage test case a test case normally consists of a unique identifier requirement references from a design specification preconditions events a series of steps also known as actions to follow input output expected result and actual result clinically defined a test case is an input and an expected result50 this can be as terse as for condition x your derived result is y although normally test cases describe in more detail the input scenario and what results might be expected it can occasionally be a series of steps but often steps are contained in a separate test procedure that can be exercised against multiple test cases as a matter of economy but with one expected result or expected outcome the optional fields are a test case id test step or order of execution number related requirements depth test category author and check boxes for whether the test is automatable and has been automated larger test cases may also contain prerequisite states or steps and descriptions a test case should also contain a place for the actual result these steps can be stored in a word processor document spreadsheet database or other common repository in a database system you may also be able to see past test results who generated the results and what system configuration was used to generate those results these past results would usually be stored in a separate table test script a test script is a procedure or programing code that replicates user actions initially the term was derived from the product of work created by automated regression test tools test case will be a baseline to create test scripts using a tool or a program test suite the most common term for a collection of test cases is a test suite the test suite often also contains more detailed instructions or goals for each collection of test cases it definitely contains a section where the tester identifies the system configuration used during testing a group of test cases may also contain prerequisite states or steps and descriptions of the following tests test fixture or test data in most cases multiple sets of values or data are used to test the same functionality of a particular feature all the test values and changeable environmental components are collected in separate files and stored as test data it is also useful to provide this data to the client and with the product or a project test harness the software tools samples of data input and output and configurations are all referred to collectively as a test harness certificationsedit several certification programs exist to support the professional aspirations of software testers and quality assurance specialists no certification now offered actually requires the applicant to show their ability to test software no certification is based on a widely accepted body of knowledge this has led some to declare that the testing field is not ready for certification51 certification itself cannot measure an individuals productivity their skill or practical knowledge and cannot guarantee their competence or professionalism as a tester52 software testing certification types exambased formalized exams which need to be passed can also be learned by selfstudy eg for istqb or qai53 educationbased instructorled sessions where each course has to be passed eg international institute for software testing iistcitation needed testing certifications iseb offered by the information systems examinations boardcitation needed istqb certified tester foundation level ctfl offered by the international software testing qualification board5455 istqb certified tester advanced level ctal offered by the international software testing qualification board5455 isqi certified agile tester cat offered by the international software quality institute56 quality assurance certifications csqe offered by the american society for quality asq57 cqia offered by the american society for quality asq57 controversyedit some of the major software testing controversies include what constitutes responsible software testing  members of the contextdriven school of testing58 believe that there are no best practices of testing but rather that testing is a set of skills that allow the tester to select or invent testing practices to suit each unique situation59 agile vs traditional  should testers learn to work under conditions of uncertainty and constant change or should they aim at process maturity the agile testing movement has received growing popularity since 2006 mainly in commercial circles6061 whereas government and military62 software providers use this methodology but also the traditional testlast models eg in the waterfall modelcitation needed exploratory test vs scripted 63 manual testing vs automated  some writers believe that test automation is so expensive relative to its value that it should be used sparingly64 more in particular testdriven development states that developers should write unittests as those of xunit before coding the functionality the tests then can be considered as a way to capture and implement the requirements as a general rule the larger the system and the greater the complexity the greater the roi in test automation also the investment in tools and expertise can be amortized over multiple projects with the right level of knowledge sharing within an organization software design vs software implementation should testing be carried out only at the end or throughout the whole process who watches the watchmen  the idea is that any form of observation is also an interaction — the act of testing can also affect that which is being tested65 is the existence of the iso 29119 software testing standard justified significant opposition has formed out of the ranks of the contextdriven school of software testing about the iso 29119 standard professional testing associations such as the international society for software testing are driving the efforts to have the standard withdrawn6667 related processesedit software verification and validationedit main articles verification and validation software and software quality control software testing is used in association with verification and validation68 verification have we built the software right ie does it implement the requirements validation have we built the right software ie do the deliverables satisfy the customer the terms verification and validation are commonly used interchangeably in the industry it is also common to see these two terms defined with contradictory definitions according to the ieee standard glossary of software engineering terminology verification is the process of evaluating a system or component to determine whether the products of a given development phase satisfy the conditions imposed at the start of that phase validation is the process of evaluating a system or component during or at the end of the development process to determine whether it satisfies specified requirements and according to the iso 9000 standard verification is confirmation by examination and through provision of objective evidence that specified requirements have been fulfilled validation is confirmation by examination and through provision of objective evidence that the requirements for a specific intended use or application have been fulfilled the contradiction is caused by the use of the concepts of requirements and specified requirements but with different meanings in the case of ieee standards the specified requirements mentioned in the definition of validation are the set of problems needs and wants of the stakeholders that the software must solve and satisfy such requirements are documented in a software requirements specification srs and the products mentioned in the definition of verification are the output artifacts of every phase of the software development process these products are in fact specifications such as architectural design specification detailed design specification etc the srs is also a specification but it cannot be verified at least not in the sense used here more on this subject below but for the iso 9000 the specified requirements are the set of specifications as just mentioned above that must be verified a specification as previously explained is the product of a software development process phase which receives another specification as input a specification is verified successfully when it correctly implements its input specification all the specifications can be verified except the srs because it is the first one it can be validated though examples the design specification must implement the srs and the construction phase artifacts must implement the design specification so when these words are defined in common terms the apparent contradiction disappears both the srs and the software must be validated the srs can be validated statically by consulting with the stakeholders nevertheless running some partial implementation of the software or a prototype of any kind dynamic testing and obtaining positive feedback from them can further increase the certainty that the srs is correctly formulated on the other hand the software as a final and running product not its artifacts and documents including the source code must be validated dynamically with the stakeholders by executing the software and having them to try it some might argue that for srs the input is the words of stakeholders and therefore srs validation is the same as srs verification thinking this way is not advisable as it only causes more confusion it is better to think of verification as a process involving a formal and technical input document software quality assurance sqaedit software testing is a part of the software quality assurance sqa process4347 in sqa software process specialists and auditors are concerned for the software development process rather than just the artifacts such as documentation code and systems they examine and change the software engineering process itself to reduce the number of faults that end up in the delivered software the socalled defect rate what constitutes an acceptable defect rate depends on the nature of the software a flight simulator video game would have much higher defect tolerance than software for an actual airplane although there are close links with sqa testing departments often exist independently and there may be no sqa function in some companiescitation needed software testing is a task intended to detect defects in software by contrasting a computer programs expected results with its actual results for a given set of inputs by contrast qa quality assurance is the implementation of policies and procedures intended to prevent defects from occurring in the first place referencesedit a b kaner cem november 17 2006 exploratory testing pdf florida institute of technology quality assurance institute worldwide annual software testing conference orlando fl retrieved november 22 2014  software testing by jiantao pan carnegie mellon university leitner a ciupa i oriol m meyer b fiva a contract driven development test driven development – writing test cases proceedings of esecfse07 european software engineering conference and the acm sigsoft symposium on the foundations of software engineering 2007 dubrovnik croatia september 2007 a b c kaner cem falk jack nguyen hung quoc 1999 testing computer software 2nd ed new york et al john wiley and sons inc p 480 isbn 0471358460  kolawa adam huizinga dorota 2007 automated defect prevention best practices in software management wileyieee computer society press pp 41–43 isbn 0470042125  kolawa adam huizinga dorota 2007 automated defect prevention best practices in software management wileyieee computer society press p 426 isbn 0470042125  a b section 112 certified tester foundation level syllabus international software testing qualifications board principle 2 section 13 certified tester foundation level syllabus international software testing qualifications board proceedings from the 5th international conference on software testing and validation icst software competence center hagenberg test design lessons learned and practical implications  software errors cost us economy 595 billion annually nist report ardentia technologies providing cutting edge software solutions and comprehensive testing services published by cio review april 2016 mcconnell steve 2004 code complete 2nd ed microsoft press p 29 isbn 0735619670  bossavit laurent 20131120 the leprechauns of software engineeringhow folklore turns into fact and what to do about it chapter 10 leanpub  see d gelperin and wc hetzel a b myers glenford j 1979 the art of software testing john wiley and sons isbn 0471043281  company peoples computer 1987 dr dobbs journal of software tools for the professional programmer dr dobbs journal of software tools for the professional programmer mt pub 12 1–6 116  introduction code coverage analysis steve cornett ron patton software testing  laycock g t 1993 the theory and practice of specification based software testing postscript dept of computer science sheffield university uk retrieved 20080213  bach james june 1999 risk and requirementsbased testing pdf computer 32 6 113–114 retrieved 20080819  savenkov roman 2008 how to become a software tester roman savenkov consulting p 159 isbn 9780615233727  visual testing of software – helsinki university of technology pdf retrieved 20120113  article on visual testing in test magazine testmagazinecouk retrieved 20120113  patton ron software testing  soa testing tools for black white and gray box soa testing techniques crosschecknetcom retrieved 20121210  a b swebok guide – chapter 5 computerorg retrieved 20120113  binder robert v 1999 testing objectoriented systems objects patterns and tools addisonwesley professional p 45 isbn 0201809389  beizer boris 1990 software testing techniques second ed new york van nostrand reinhold pp 21430 isbn 0442206720  a b clapp judith a 1995 software quality control error analysis and testing p 313 isbn 0815513631  a b mathur aditya p 2008 foundations of software testing purdue university p 18 isbn 9788131716601  ieee 1990 ieee standard computer dictionary a compilation of ieee standard computer glossaries new york ieee isbn 1559370793  whitepaper operational acceptance – an application of the iso 29119 software testing standard may 2015 anthony woods capgemini paul ammann jeff offutt 2008 introduction to software testing p 215 of 322 pages van veenendaal erik standard glossary of terms used in software testing retrieved 4 january 2013  part of the pipeline why continuous testing is essential by adam auerbach techwell insights august 2015 the relationship between risk and continuous testing an interview with wayne ariola by cameron philippedmonds stickyminds december 2015 a b devops are you pushing bugs to clients faster by wayne ariola and cynthia dunlop pnsqc october 2015 devops and qa what’s the real cost of quality by ericka chickowski devopscom june 2015 shift left and put quality first by adam auerbach techwell insights october 2014 isoiecieee 2911912013 – software and systems engineering – software testing – part 1 – concepts and definitions section 438 globalization stepbystep the worldready approach to testing microsoft developer network msdnmicrosoftcom retrieved 20120113  etestinghubonline free software testing tutorial etesting phase in software testing etestinghubcom retrieved 20120113  myers glenford j 1979 the art of software testing john wiley and sons pp 145–146 isbn 0471043281  dustin elfriede 2002 effective software testing addison wesley p 3 isbn 0201794292  marchenko artem november 16 2007 xp practice continuous integration retrieved 20091116  gurses levent february 19 2007 agile 101 what is continuous integration retrieved 20091116  pan jiantao spring 1999 software testing 18849b dependable embedded systems topics in dependable embedded systems electrical and computer engineering department carnegie mellon university  rodríguez ismael llana luis rabanal pablo 2014 a general testability theory classes properties complexity and testing reductions ieee transactions on software engineering 40 9 862–894 issn 00985589 doi101109tse20142331690  rodríguez ismael 2009 a general testability theory concur 2009 concurrency theory 20th international conference concur 2009 bologna italy september 1–4 2009 proceedings pp 572–586 isbn 9783642040801 doi101007978364204081838  ieee 1998 ieee standard for software test documentation new york ieee isbn 073811443x  kaner cem 2001 nsf grant proposal to lay a foundation for significant improvements in the quality of academic and commercial courses in software testing pdf  kaner cem 2003 measuring the effectiveness of software testers pdf  black rex december 2008 advanced software testing vol 2 guide to the istqb advanced certification as an advanced test manager santa barbara rocky nook publisher isbn 1933952369  a b istqb  a b istqb in the us  cat certified agile tester  a b american society for quality asqorg retrieved 20120113  contextdriventestingcom contextdriventestingcom retrieved 20120113  article on taking agile traits without the agile method technicatcom retrieved 20120113  were all part of the story by david strom july 1 2009 ieee xplore sign in pdf ieeeorg  willison john s april 2004 agile software development for an agile force crosstalk stsc april 2004 archived from the original on october 29 2005  should tests be designed at the same time as they are executed or should they be designed beforehandieee article on exploratory vs non exploratory testing pdf ieeexploreieeeorg retrieved 20120113  an example is mark fewster dorothy graham software test automation addison wesley 1999 isbn 0201331403 microsoft development network discussion on exactly this topic archived february 15 2010 at the wayback machine stop29119 commonsensetestingorg  paul krill 22 august 2014 software testers balk at iso 29119 standards proposal infoworld  tran eushiuan 1999 verificationvalidationcertification in koopman p topics in dependable embedded systems usa carnegie mellon university retrieved 20080113  further readingedit bertrand meyer seven principles of software testing computer vol 41 no 8 pp 99–101 aug 2008 doi101109mc2008306 available online see alsoedit book software testing software testing tactics dynamic program analysis formal verification independent test organization manual testing orthogonal array testing pair testing reverse semantic traceability test management tools web testing data validation external linksedit wikimedia commons has media related to software testing at wikiversity you can learn more and teach others about software testing at the department of software testing software testing tools and products at dmoz software that makes software better economistcom v t e major fields of computer science note this template roughly follows the 2012 acm computing classification system hardware printed circuit board peripheral integrated circuit verylargescale integration energy consumption electronic design automation computer systems organization computer architecture embedded system realtime computing dependability networks network architecture network protocol network components network scheduler network performance evaluation network service software organization interpreter middleware virtual machine operating system software quality software notations and tools programming paradigm programming language compiler domainspecific language modeling language software framework integrated development environment software configuration management software library software repository software development software development process requirements analysis software design software construction software deployment software maintenance programming team opensource model theory of computation model of computation formal language automata theory computational complexity theory logic semantics algorithms algorithm design analysis of algorithms randomized algorithm computational geometry mathematics of computing discrete mathematics probability statistics mathematical software information theory mathematical analysis numerical analysis information systems database management system information storage systems enterprise information system social information systems geographic information system decision support system process control system multimedia information system data mining digital library computing platform digital marketing world wide web information retrieval security cryptography formal methods security services intrusion detection system hardware security network security information security application security human–computer interaction interaction design social computing ubiquitous computing visualization accessibility concurrency concurrent computing parallel computing distributed computing multithreading multiprocessing artificial intelligence natural language processing knowledge representation and reasoning computer vision automated planning and scheduling search methodology control method philosophy of artificial intelligence distributed artificial intelligence machine learning supervised learning unsupervised learning reinforcement learning multitask learning crossvalidation graphics animation rendering image manipulation graphics processing unit mixed reality virtual reality image compression solid modeling applied computing ecommerce enterprise software computational mathematics computational physics computational chemistry computational biology computational social science computational engineering computational healthcare digital art electronic publishing cyberwarfare electronic voting video game word processing operations research educational technology document management book category portal wikiproject commons v t e software engineering fields computer programming requirements engineering software deployment software design software maintenance software testing systems analysis formal methods concepts data modeling enterprise architecture functional specification modeling language orthogonality programming paradigm software software archaeology software architecture software configuration management software development methodology software development process software quality software quality assurance software verification and validation structured analysis orientations agile aspectoriented object orientation ontology service orientation sdlc models developmental agile eup executable uml incremental model iterative model prototype model rad up scrum spiral model vmodel waterfall model xp other spice cmmi data model er model function model information model metamodeling object model systems model view model languages idef uml usl sysml software engineers victor basili kent beck grady booch fred brooks barry boehm peter chen danese cooper ward cunningham tom demarco edsger w dijkstra delores m etter martin fowler adele goldstine margaret hamilton c a r hoare lois haibt mary jean harrold grace hopper watts humphrey michael a jackson ivar jacobson alan kay nancy leveson stephen j mellor bertrand meyer david parnas trygve reenskaug winston w royce james rumbaugh mary shaw peri tarr elaine weyuker niklaus wirth edward yourdon related fields computer science computer engineering project management risk management systems engineering category commons software testing portal authority control ndl 01179782 retrieved from httpsenwikipediaorgwindexphptitlesoftwaretestingoldid807366470 categories software testing computer occupations hidden categories webarchive template wayback links all accuracy disputes articles with disputed statements from september 2014 articles lacking reliable references from march 2015 all articles lacking reliable references all articles with unsourced statements articles with unsourced statements from november 2011 wikipedia articles needing clarification from november 2011 all articles with failed verification articles with failed verification from september 2011 articles with unsourced statements from march 2013 articles with unsourced statements from may 2016 articles with unsourced statements from january 2008 articles with unsourced statements from march 2008 articles with unsourced statements from july 2012 articles with unsourced statements from july 2014 articles with unsourced statements from february 2011 articles with dmoz links navigation menu personal tools not logged in talk contributions create account log in namespaces article talk variants views read edit view history more search navigation main page contents featured content current events random article donate to wikipedia wikipedia store interaction help about wikipedia community portal recent changes contact page tools what links here related changes upload file special pages permanent link page information wikidata item cite this page printexport create a book download as pdf printable version in other projects wikimedia commons wikibooks languages العربية беларуская тарашкевіца‎ български català čeština deutsch eesti español فارسی français 한국어 हिन्दी bahasa indonesia italiano עברית ಕನ್ನಡ ქართული қазақша magyar македонски bahasa melayu nederlands 日本語 norsk polski português română русский shqip simple english slovenčina suomi svenska தமிழ் ไทย türkçe українська tiếng việt 中文 edit links this page was last edited on 27 october 2017 at 1413 text is available under the creative commons attributionsharealike license additional terms may apply by using this site you agree to the terms of use and privacy policy wikipedia® is a registered trademark of the wikimedia foundation inc a nonprofit organization privacy policy about wikipedia disclaimers contact wikipedia developers cookie statement mobile view 
https://en.wikipedia.org/wiki/Software_testing
https://en.wikipedia.org/wiki/Software_testing
https://en.wikipedia.org/wiki/Software_development
https://en.wikipedia.org/wiki/Software_development_process
https://en.wikipedia.org/wiki/Requirements_analysis
https://en.wikipedia.org/wiki/Software_design
https://en.wikipedia.org/wiki/Software_engineering
https://en.wikipedia.org/wiki/Software_construction
https://en.wikipedia.org/wiki/Debugging
https://en.wikipedia.org/wiki/Software_deployment
https://en.wikipedia.org/wiki/Software_maintenance
https://en.wikipedia.org/wiki/Agile_software_development
https://en.wikipedia.org/wiki/Cleanroom_software_engineering
https://en.wikipedia.org/wiki/Incremental_build_model
https://en.wikipedia.org/wiki/Software_prototyping
https://en.wikipedia.org/wiki/Spiral_model
https://en.wikipedia.org/wiki/Waterfall_model
https://en.wikipedia.org/wiki/Software_development_methodology
https://en.wikipedia.org/wiki/DevOps
https://en.wikipedia.org/wiki/Dynamic_systems_development_method
https://en.wikipedia.org/wiki/Feature-driven_development
https://en.wikipedia.org/wiki/Iterative_and_incremental_development
https://en.wikipedia.org/wiki/Kanban_(development)
https://en.wikipedia.org/wiki/Lean_software_development
https://en.wikipedia.org/wiki/Model-driven_development
https://en.wikipedia.org/wiki/Microsoft_Solutions_Framework
https://en.wikipedia.org/wiki/Personal_software_process
https://en.wikipedia.org/wiki/Rapid_application_development
https://en.wikipedia.org/wiki/Scaled_Agile_Framework
https://en.wikipedia.org/wiki/Scrum_(software_development)
https://en.wikipedia.org/wiki/SEMAT
https://en.wikipedia.org/wiki/Team_software_process
https://en.wikipedia.org/wiki/Unified_Process
https://en.wikipedia.org/wiki/V-Model_(software_development)
https://en.wikipedia.org/wiki/Extreme_programming
https://en.wikipedia.org/wiki/Software_configuration_management
https://en.wikipedia.org/wiki/Software_documentation
https://en.wikipedia.org/wiki/Software_quality_assurance
https://en.wikipedia.org/wiki/Software_project_management
https://en.wikipedia.org/wiki/User_experience
https://en.wikipedia.org/wiki/Acceptance_test–driven_development
https://en.wikipedia.org/wiki/Behavior-driven_development
https://en.wikipedia.org/wiki/Extreme_programming_practices
https://en.wikipedia.org/wiki/Continuous_Integration
https://en.wikipedia.org/wiki/Continuous_Delivery
https://en.wikipedia.org/wiki/Domain-driven_design
https://en.wikipedia.org/wiki/Pair_Programming
https://en.wikipedia.org/wiki/Stand-up_meeting
https://en.wikipedia.org/wiki/Test-driven_development
https://en.wikipedia.org/wiki/Programming_tool
https://en.wikipedia.org/wiki/Compiler
https://en.wikipedia.org/wiki/Debugger
https://en.wikipedia.org/wiki/Profiling_(computer_programming)
https://en.wikipedia.org/wiki/Graphical_user_interface_builder
https://en.wikipedia.org/wiki/UML_tools
https://en.wikipedia.org/wiki/Integrated_development_environment
https://en.wikipedia.org/wiki/Build_automation
https://en.wikipedia.org/wiki/Application_release_automation
https://en.wikipedia.org/wiki/Infrastructure_as_Code
https://en.wikipedia.org/wiki/Category:Software_testing_tools
https://en.wikipedia.org/wiki/CMMI
https://en.wikipedia.org/wiki/IEEE_Standards_Association
https://en.wikipedia.org/wiki/ISO_9001
https://en.wikipedia.org/wiki/ISO/IEC_JTC_1/SC_7
https://en.wikipedia.org/wiki/SWEBOK
https://en.wikipedia.org/wiki/PMBOK
https://en.wikipedia.org/wiki/BABOK
https://en.wikipedia.org/wiki/Template:Software_development_process
https://en.wikipedia.org/wiki/Template_talk:Software_development_process
https://en.wikipedia.org/w/index.php?title=Template:Software_development_process&action=edit
https://en.wikipedia.org/wiki/Software
https://en.wikipedia.org/wiki/Software_testing
https://en.wikipedia.org/wiki/Software_bug
https://en.wikipedia.org/wiki/Operating_environment
https://en.wikipedia.org/wiki/Software_bug
https://en.wikipedia.org/wiki/Software_testing
https://en.wikipedia.org/wiki/Software_development_process
https://en.wikipedia.org/wiki/Agile_software_development
https://en.wikipedia.org/wiki/Software_testing
https://en.wikipedia.org/wiki/Software_testing
https://en.wikipedia.org/wiki/Software_testing
https://en.wikipedia.org/wiki/Software_testing
https://en.wikipedia.org/wiki/Software_testing
https://en.wikipedia.org/wiki/Software_testing
https://en.wikipedia.org/wiki/Software_testing
https://en.wikipedia.org/wiki/Software_testing
https://en.wikipedia.org/wiki/Software_testing
https://en.wikipedia.org/wiki/Software_testing
https://en.wikipedia.org/wiki/Software_testing
https://en.wikipedia.org/wiki/Software_testing
https://en.wikipedia.org/wiki/Software_testing
https://en.wikipedia.org/wiki/Software_testing
https://en.wikipedia.org/wiki/Software_testing
https://en.wikipedia.org/wiki/Software_testing
https://en.wikipedia.org/wiki/Software_testing
https://en.wikipedia.org/wiki/Software_testing
https://en.wikipedia.org/wiki/Software_testing
https://en.wikipedia.org/wiki/Software_testing
https://en.wikipedia.org/wiki/Software_testing
https://en.wikipedia.org/wiki/Software_testing
https://en.wikipedia.org/wiki/Software_testing
https://en.wikipedia.org/wiki/Software_testing
https://en.wikipedia.org/wiki/Software_testing
https://en.wikipedia.org/wiki/Software_testing
https://en.wikipedia.org/wiki/Software_testing
https://en.wikipedia.org/wiki/Software_testing
https://en.wikipedia.org/wiki/Software_testing
https://en.wikipedia.org/wiki/Software_testing
https://en.wikipedia.org/wiki/Software_testing
https://en.wikipedia.org/wiki/Software_testing
https://en.wikipedia.org/wiki/Software_testing
https://en.wikipedia.org/wiki/Software_testing
https://en.wikipedia.org/wiki/Software_testing
https://en.wikipedia.org/wiki/Software_testing
https://en.wikipedia.org/wiki/Software_testing
https://en.wikipedia.org/wiki/Software_testing
https://en.wikipedia.org/wiki/Software_testing
https://en.wikipedia.org/wiki/Software_testing
https://en.wikipedia.org/wiki/Software_testing
https://en.wikipedia.org/wiki/Software_testing
https://en.wikipedia.org/wiki/Software_testing
https://en.wikipedia.org/wiki/Software_testing
https://en.wikipedia.org/wiki/Software_testing
https://en.wikipedia.org/wiki/Software_testing
https://en.wikipedia.org/wiki/Software_testing
https://en.wikipedia.org/wiki/Software_testing
https://en.wikipedia.org/wiki/Software_testing
https://en.wikipedia.org/wiki/Software_testing
https://en.wikipedia.org/wiki/Software_testing
https://en.wikipedia.org/wiki/Software_testing
https://en.wikipedia.org/wiki/Software_testing
https://en.wikipedia.org/wiki/Software_testing
https://en.wikipedia.org/wiki/Software_testing
https://en.wikipedia.org/wiki/Software_testing
https://en.wikipedia.org/wiki/Software_testing
https://en.wikipedia.org/w/index.php?title=Software_testing&action=edit&section=1
https://en.wikipedia.org/wiki/Software_testing
https://en.wikipedia.org/wiki/Software_testing
https://en.wikipedia.org/wiki/Oracle_(software_testing)
https://en.wikipedia.org/wiki/Design_by_Contract
https://en.wikipedia.org/wiki/Software_testing
https://en.wikipedia.org/wiki/Software_testing
https://en.wikipedia.org/wiki/Software_testing
https://en.wikipedia.org/w/index.php?title=Software_testing&action=edit&section=2
https://en.wikipedia.org/wiki/Software_testing
https://en.wikipedia.org/wiki/Non-functional_requirements
https://en.wikipedia.org/wiki/Software_testability
https://en.wikipedia.org/wiki/Scalability
https://en.wikipedia.org/wiki/Maintainability
https://en.wikipedia.org/wiki/Usability
https://en.wikipedia.org/wiki/Computer_performance
https://en.wikipedia.org/wiki/Computer_security
https://en.wikipedia.org/wiki/Human_error
https://en.wikipedia.org/wiki/Fault_(technology)
https://en.wikipedia.org/wiki/Source_code
https://en.wikipedia.org/wiki/Failure
https://en.wikipedia.org/wiki/Software_testing
https://en.wikipedia.org/wiki/Dead_code
https://en.wikipedia.org/wiki/Computer_hardware
https://en.wikipedia.org/wiki/Source_data
https://en.wikipedia.org/wiki/Software_testing
https://en.wikipedia.org/w/index.php?title=Software_testing&action=edit&section=3
https://en.wikipedia.org/wiki/Software_testing
https://en.wikipedia.org/wiki/Software_testing
https://en.wikipedia.org/wiki/Software_bug
https://en.wikipedia.org/wiki/Non-functional_requirements
https://en.wikipedia.org/wiki/Usability
https://en.wikipedia.org/wiki/Scalability
https://en.wikipedia.org/wiki/Computer_performance
https://en.wikipedia.org/wiki/Backward_compatibility
https://en.wikipedia.org/wiki/Reliability_(engineering)
https://en.wikipedia.org/wiki/Software_testing
https://en.wikipedia.org/w/index.php?title=Software_testing&action=edit&section=4
https://en.wikipedia.org/wiki/NIST
https://en.wikipedia.org/wiki/Software_testing
https://en.wikipedia.org/wiki/Wikipedia:Accuracy_dispute
https://en.wikipedia.org/wiki/Talk:Software_testing
https://en.wikipedia.org/wiki/Outsourcing
https://en.wikipedia.org/wiki/Software_testing
https://en.wikipedia.org/wiki/Software_testing
https://en.wikipedia.org/wiki/Continuous_deployment
https://en.wikipedia.org/wiki/Software_testing
https://en.wikipedia.org/w/index.php?title=Software_testing&action=edit&section=5
https://en.wikipedia.org/wiki/Software_testing
https://en.wikipedia.org/w/index.php?title=Software_testing&action=edit&section=6
https://en.wikipedia.org/wiki/Debugging
https://en.wikipedia.org/wiki/Glenford_J._Myers
https://en.wikipedia.org/wiki/Software_testing
https://en.wikipedia.org/wiki/Software_testing
https://en.wikipedia.org/wiki/Software_testing
https://en.wikipedia.org/w/index.php?title=Software_testing&action=edit&section=7
https://en.wikipedia.org/wiki/File:Question_book-new.svg
https://en.wikipedia.org/wiki/Wikipedia:Scientific_citation_guidelines
https://en.wikipedia.org/wiki/Wikipedia:Reliable_sources
https://en.wikipedia.org/wiki/Wikipedia:No_original_research
https://en.wikipedia.org/w/index.php?title=Software_testing&action=edit&section=8
https://en.wikipedia.org/wiki/Code_review
https://en.wikipedia.org/wiki/Software_walkthrough
https://en.wikipedia.org/wiki/Software_inspection
https://en.wikipedia.org/wiki/Static_testing
https://en.wikipedia.org/wiki/Test_case
https://en.wikipedia.org/wiki/Dynamic_testing
https://en.wikipedia.org/wiki/Static_program_analysis
https://en.wikipedia.org/wiki/Function_(computer_science)
https://en.wikipedia.org/wiki/Method_stub
https://en.wikipedia.org/wiki/Debugger
https://en.wikipedia.org/wiki/Software_verification
https://en.wikipedia.org/wiki/Software_validation
https://en.wikipedia.org/wiki/Software_quality
https://en.wikipedia.org/wiki/Mutation_testing
https://en.wikipedia.org/w/index.php?title=Software_testing&action=edit&section=9
https://en.wikipedia.org/w/index.php?title=Software_testing&action=edit&section=10
https://en.wikipedia.org/wiki/White-box_testing
https://en.wikipedia.org/wiki/In-circuit_test
https://en.wikipedia.org/wiki/Unit_testing
https://en.wikipedia.org/wiki/Integration_testing
https://en.wikipedia.org/wiki/System_testing
https://en.wikipedia.org/wiki/Api_testing
https://en.wikipedia.org/wiki/Application_programming_interfaces
https://en.wikipedia.org/wiki/Code_coverage
https://en.wikipedia.org/wiki/Fault_injection
https://en.wikipedia.org/wiki/Mutation_testing
https://en.wikipedia.org/wiki/Static_testing
https://en.wikipedia.org/wiki/Function_points
https://en.wikipedia.org/wiki/Software_testing
https://en.wikipedia.org/wiki/Software_metric
https://en.wikipedia.org/wiki/Control_flow
https://en.wikipedia.org/w/index.php?title=Software_testing&action=edit&section=11
https://en.wikipedia.org/wiki/Black-box_testing
https://en.wikipedia.org/wiki/File:Blackbox.svg
https://en.wikipedia.org/wiki/File:Blackbox.svg
https://en.wikipedia.org/wiki/Software_testing
https://en.wikipedia.org/wiki/Equivalence_partitioning
https://en.wikipedia.org/wiki/Boundary_value_analysis
https://en.wikipedia.org/wiki/All-pairs_testing
https://en.wikipedia.org/wiki/State_transition_table
https://en.wikipedia.org/wiki/Decision_table
https://en.wikipedia.org/wiki/Fuzz_testing
https://en.wikipedia.org/wiki/Model-based_testing
https://en.wikipedia.org/wiki/Use_case
https://en.wikipedia.org/wiki/Exploratory_testing
https://en.wikipedia.org/wiki/Software_testing
https://en.wikipedia.org/wiki/Test_case
https://en.wikipedia.org/wiki/Functional_testing
https://en.wikipedia.org/wiki/Non-functional_testing
https://en.wikipedia.org/wiki/Software_testing
https://en.wikipedia.org/wiki/Software_testing
https://en.wikipedia.org/wiki/Unit_test
https://en.wikipedia.org/wiki/Integration_testing
https://en.wikipedia.org/wiki/System_testing
https://en.wikipedia.org/wiki/Acceptance_test
https://en.wikipedia.org/w/index.php?title=Software_testing&action=edit&section=12
https://en.wikipedia.org/wiki/Software_testing
https://en.wikipedia.org/wiki/Software_testing
https://en.wikipedia.org/wiki/Agile_testing
https://en.wikipedia.org/wiki/Wikipedia:Citation_needed
https://en.wikipedia.org/wiki/Ad_hoc_testing
https://en.wikipedia.org/wiki/Exploratory_testing
https://en.wikipedia.org/wiki/Wikipedia:Please_clarify
https://en.wikipedia.org/wiki/Wikipedia:Citation_needed
https://en.wikipedia.org/wiki/Acceptance_testing
https://en.wikipedia.org/wiki/Usability_testing
https://en.wikipedia.org/wiki/Wikipedia:Citation_needed
https://en.wikipedia.org/wiki/Graphical_user_interface_testing
https://en.wikipedia.org/w/index.php?title=Software_testing&action=edit&section=13
https://en.wikipedia.org/wiki/Gray_box_testing
https://en.wikipedia.org/wiki/Software_testing
https://en.wikipedia.org/wiki/Wikipedia:Verifiability
https://en.wikipedia.org/wiki/Integration_testing
https://en.wikipedia.org/wiki/Wikipedia:Citation_needed
https://en.wikipedia.org/wiki/Reverse_coding
https://en.wikipedia.org/wiki/Database
https://en.wikipedia.org/wiki/SQL
https://en.wikipedia.org/wiki/Exception_handling
https://en.wikipedia.org/wiki/Software_testing
https://en.wikipedia.org/w/index.php?title=Software_testing&action=edit&section=14
https://en.wikipedia.org/wiki/SWEBOK
https://en.wikipedia.org/wiki/Software_testing
https://en.wikipedia.org/wiki/Software_testing
https://en.wikipedia.org/wiki/Wikipedia:Citation_needed
https://en.wikipedia.org/w/index.php?title=Software_testing&action=edit&section=15
https://en.wikipedia.org/wiki/Unit_testing
https://en.wikipedia.org/wiki/Software_testing
https://en.wikipedia.org/wiki/Corner_case
https://en.wikipedia.org/wiki/Static_code_analysis
https://en.wikipedia.org/wiki/Data-flow_analysis
https://en.wikipedia.org/wiki/Code_coverage
https://en.wikipedia.org/w/index.php?title=Software_testing&action=edit&section=16
https://en.wikipedia.org/wiki/Integration_testing
https://en.wikipedia.org/wiki/Software_testing
https://en.wikipedia.org/w/index.php?title=Software_testing&action=edit&section=17
https://en.wikipedia.org/wiki/Software_testing
https://en.wikipedia.org/wiki/Software_testing
https://en.wikipedia.org/wiki/Software_testing
https://en.wikipedia.org/wiki/Black-box_testing
https://en.wikipedia.org/wiki/Software_testing
https://en.wikipedia.org/w/index.php?title=Software_testing&action=edit&section=18
https://en.wikipedia.org/wiki/System_testing
https://en.wikipedia.org/wiki/Software_testing
https://en.wikipedia.org/w/index.php?title=Software_testing&action=edit&section=19
https://en.wikipedia.org/wiki/Operational_acceptance_testing
https://en.wikipedia.org/wiki/Quality_management_system
https://en.wikipedia.org/wiki/Software_development
https://en.wikipedia.org/wiki/Software_maintenance
https://en.wikipedia.org/w/index.php?title=Operational_readiness&action=edit&redlink=1
https://en.wikipedia.org/wiki/Operations_readiness_and_assurance
https://en.wikipedia.org/wiki/Functional_testing
https://en.wikipedia.org/wiki/Software_testing
https://en.wikipedia.org/w/index.php?title=Software_testing&action=edit&section=20
https://en.wikipedia.org/wiki/File:TestingCup-Polish-Championship-in-Software-Testing-Katowice-2016.jpg
https://en.wikipedia.org/wiki/File:TestingCup-Polish-Championship-in-Software-Testing-Katowice-2016.jpg
https://en.wikipedia.org/wiki/Katowice
https://en.wikipedia.org/w/index.php?title=Software_testing&action=edit&section=21
https://en.wikipedia.org/wiki/Installation_testing
https://en.wikipedia.org/w/index.php?title=Software_testing&action=edit&section=22
https://en.wikipedia.org/wiki/Compatibility_testing
https://en.wikipedia.org/wiki/Computer_compatibility
https://en.wikipedia.org/wiki/Application_software
https://en.wikipedia.org/wiki/Operating_system
https://en.wikipedia.org/wiki/Software_versioning
https://en.wikipedia.org/wiki/Computer_terminal
https://en.wikipedia.org/wiki/GUI
https://en.wikipedia.org/wiki/Desktop_metaphor
https://en.wikipedia.org/wiki/Web_application
https://en.wikipedia.org/wiki/Web_browser
https://en.wikipedia.org/wiki/Backward_compatibility
https://en.wikipedia.org/wiki/Abstraction_(computer_science)
https://en.wikipedia.org/wiki/Modular_programming
https://en.wikipedia.org/wiki/Library_(computing)
https://en.wikipedia.org/w/index.php?title=Software_testing&action=edit&section=23
https://en.wikipedia.org/wiki/Sanity_testing
https://en.wikipedia.org/wiki/Smoke_testing_(software)
https://en.wikipedia.org/wiki/Build_verification_test
https://en.wikipedia.org/w/index.php?title=Software_testing&action=edit&section=24
https://en.wikipedia.org/wiki/Regression_testing
https://en.wikipedia.org/wiki/Software_regression
https://en.wikipedia.org/wiki/Unintended_consequence
https://en.wikipedia.org/wiki/Risk_management
https://en.wikipedia.org/wiki/Software_testing
https://en.wikipedia.org/w/index.php?title=Software_testing&action=edit&section=25
https://en.wikipedia.org/wiki/Acceptance_testing
https://en.wikipedia.org/wiki/Smoke_testing_(software)
https://en.wikipedia.org/wiki/Integration_testing
https://en.wikipedia.org/wiki/Regression_testing
https://en.wikipedia.org/wiki/User_acceptance_testing
https://en.wikipedia.org/wiki/Wikipedia:Citation_needed
https://en.wikipedia.org/w/index.php?title=Software_testing&action=edit&section=26
https://en.wikipedia.org/wiki/Software_testing
https://en.wikipedia.org/w/index.php?title=Software_testing&action=edit&section=27
https://en.wikipedia.org/wiki/User_acceptance_testing
https://en.wikipedia.org/wiki/Beta_version
https://en.wikipedia.org/wiki/Computer_bug
https://en.wikipedia.org/wiki/Feedback
https://en.wikipedia.org/wiki/Perpetual_beta
https://en.wikipedia.org/wiki/Wikipedia:Citation_needed
https://en.wikipedia.org/w/index.php?title=Software_testing&action=edit&section=28
https://en.wikipedia.org/wiki/Functional_testing
https://en.wikipedia.org/wiki/Non-functional_testing
https://en.wikipedia.org/wiki/Scalability
https://en.wikipedia.org/wiki/Performance
https://en.wikipedia.org/wiki/Constraint_(mathematics)
https://en.wikipedia.org/wiki/Computer_security
https://en.wikipedia.org/w/index.php?title=Software_testing&action=edit&section=29
https://en.wikipedia.org/wiki/Continuous_testing
https://en.wikipedia.org/wiki/Test_automation
https://en.wikipedia.org/wiki/Software_testing
https://en.wikipedia.org/wiki/Software_testing
https://en.wikipedia.org/wiki/Functional_requirements
https://en.wikipedia.org/wiki/Non-functional_requirements
https://en.wikipedia.org/wiki/Software_testing
https://en.wikipedia.org/wiki/Software_testing
https://en.wikipedia.org/wiki/Software_testing
https://en.wikipedia.org/wiki/Software_testing
https://en.wikipedia.org/w/index.php?title=Software_testing&action=edit&section=30
https://en.wikipedia.org/wiki/Destructive_testing
https://en.wikipedia.org/wiki/Robustness_(computer_science)
https://en.wikipedia.org/wiki/Wikipedia:Citation_needed
https://en.wikipedia.org/wiki/Fault_injection
https://en.wikipedia.org/wiki/Fuzz_testing
https://en.wikipedia.org/wiki/Fault_injection
https://en.wikipedia.org/wiki/Exception_handling
https://en.wikipedia.org/wiki/Recovery_testing
https://en.wikipedia.org/w/index.php?title=Software_testing&action=edit&section=31
https://en.wikipedia.org/wiki/Software_performance_testing
https://en.wikipedia.org/wiki/Load_testing
https://en.wikipedia.org/wiki/Load_testing
https://en.wikipedia.org/wiki/Scalability
https://en.wikipedia.org/wiki/Volume_testing
https://en.wikipedia.org/wiki/Stress_testing
https://en.wikipedia.org/wiki/Scalability_testing
https://en.wikipedia.org/wiki/Real-time_computing
https://en.wikipedia.org/wiki/Real-time_testing
https://en.wikipedia.org/w/index.php?title=Software_testing&action=edit&section=32
https://en.wikipedia.org/wiki/Usability_testing
https://en.wikipedia.org/w/index.php?title=Software_testing&action=edit&section=33
https://en.wikipedia.org/wiki/Accessibility
https://en.wikipedia.org/wiki/Americans_with_Disabilities_Act_of_1990
https://en.wikipedia.org/wiki/Section_508_Amendment_to_the_Rehabilitation_Act_of_1973
https://en.wikipedia.org/wiki/Web_Accessibility_Initiative
https://en.wikipedia.org/wiki/World_Wide_Web_Consortium
https://en.wikipedia.org/w/index.php?title=Software_testing&action=edit&section=34
https://en.wikipedia.org/wiki/Security_testing
https://en.wikipedia.org/wiki/Backdoor_(computing)
https://en.wikipedia.org/wiki/Hacker_(computer_security)
https://en.wikipedia.org/wiki/Software_testing
https://en.wikipedia.org/w/index.php?title=Software_testing&action=edit&section=35
https://en.wikipedia.org/wiki/Internationalization_and_localization
https://en.wikipedia.org/wiki/Pseudolocalization
https://en.wikipedia.org/wiki/Software_testing
https://en.wikipedia.org/wiki/String_(computer_science)
https://en.wikipedia.org/wiki/Hard_coding
https://en.wikipedia.org/wiki/Run_time_(program_lifecycle_phase)
https://en.wikipedia.org/wiki/Keyboard_shortcut
https://en.wikipedia.org/wiki/Keyboard_layout
https://en.wikipedia.org/wiki/Character_encoding
https://en.wikipedia.org/wiki/CJK_characters
https://en.wikipedia.org/wiki/Bi-directional_text
https://en.wikipedia.org/wiki/Configuration_file
https://en.wikipedia.org/wiki/Environment_variable
https://en.wikipedia.org/wiki/Date_and_time_notation_by_country
https://en.wikipedia.org/wiki/Currency
https://en.wikipedia.org/w/index.php?title=Software_testing&action=edit&section=36
https://en.wikipedia.org/wiki/Development_testing
https://en.wikipedia.org/wiki/Static_code_analysis
https://en.wikipedia.org/w/index.php?title=Software_testing&action=edit&section=37
https://en.wikipedia.org/wiki/A/B_testing
https://en.wikipedia.org/w/index.php?title=Software_testing&action=edit&section=38
https://en.wikipedia.org/wiki/Concurrent_testing
https://en.wikipedia.org/w/index.php?title=Software_testing&action=edit&section=39
https://en.wikipedia.org/wiki/Conformance_testing
https://en.wikipedia.org/w/index.php?title=Software_testing&action=edit&section=40
https://en.wikipedia.org/w/index.php?title=Software_testing&action=edit&section=41
https://en.wikipedia.org/wiki/Software_testing
https://en.wikipedia.org/wiki/Project_management
https://en.wikipedia.org/wiki/Software_testing
https://en.wikipedia.org/wiki/Software_testing
https://en.wikipedia.org/wiki/Capability_Maturity_Model_Integration
https://en.wikipedia.org/wiki/Waterfall_model
https://en.wikipedia.org/w/index.php?title=Software_testing&action=edit&section=42
https://en.wikipedia.org/wiki/Extreme_programming
https://en.wikipedia.org/wiki/Agile_software_development
https://en.wikipedia.org/wiki/Test-driven_development
https://en.wikipedia.org/wiki/Unit_tests
https://en.wikipedia.org/wiki/Software_engineering
https://en.wikipedia.org/wiki/Pair_programming
https://en.wikipedia.org/wiki/Continuous_integration
https://en.wikipedia.org/wiki/Software_testing
https://en.wikipedia.org/wiki/Software_testing
https://en.wikipedia.org/w/index.php?title=Software_testing&action=edit&section=43
https://en.wikipedia.org/wiki/Software_testing
https://en.wikipedia.org/wiki/Waterfall_development
https://en.wikipedia.org/wiki/Requirements_analysis
https://en.wikipedia.org/wiki/Software_development_life_cycle
https://en.wikipedia.org/wiki/Test_strategy
https://en.wikipedia.org/wiki/Test_plan
https://en.wikipedia.org/wiki/Testbed
https://en.wikipedia.org/wiki/Scenario_test
https://en.wikipedia.org/wiki/Test_case
https://en.wikipedia.org/wiki/Test_effort
https://en.wikipedia.org/w/index.php?title=Resolution_testing&action=edit&redlink=1
https://en.wikipedia.org/w/index.php?title=Software_testing&action=edit&section=44
https://en.wikipedia.org/wiki/Test_automation
https://en.wikipedia.org/wiki/Test_automation
https://en.wikipedia.org/wiki/Test-driven_development
https://en.wikipedia.org/wiki/Continuous_integration
https://en.wikipedia.org/wiki/Version_control
https://en.wikipedia.org/wiki/Test_suite
https://en.wikipedia.org/w/index.php?title=Software_testing&action=edit&section=45
https://en.wikipedia.org/wiki/Debugger
https://en.wikipedia.org/wiki/Instruction_set_simulator
https://en.wikipedia.org/wiki/Hypervisor
https://en.wikipedia.org/wiki/Program_animation
https://en.wikipedia.org/wiki/Breakpoint
https://en.wikipedia.org/wiki/Machine_code
https://en.wikipedia.org/wiki/Code_coverage
https://en.wikipedia.org/wiki/Symbolic_debugging
https://en.wikipedia.org/wiki/Graphical_User_Interface
https://en.wikipedia.org/wiki/Benchmark_(computing)
https://en.wikipedia.org/wiki/Profiling_(computer_programming)
https://en.wikipedia.org/wiki/Hot_spot_(computer_science)
https://en.wikipedia.org/wiki/Integrated_Development_Environment
https://en.wikipedia.org/w/index.php?title=Software_testing&action=edit&section=46
https://en.wikipedia.org/wiki/Software_quality
https://en.wikipedia.org/wiki/Correctness_(computer_science)
https://en.wikipedia.org/wiki/Computer_security_audit
https://en.wikipedia.org/wiki/ISO/IEC_9126
https://en.wikipedia.org/wiki/Reliability_engineering
https://en.wikipedia.org/wiki/Algorithmic_efficiency
https://en.wikipedia.org/wiki/Porting
https://en.wikipedia.org/wiki/Maintainability
https://en.wikipedia.org/wiki/Usability
https://en.wikipedia.org/wiki/Software_metric
https://en.wikipedia.org/w/index.php?title=Software_testing&action=edit&section=47
https://en.wikipedia.org/wiki/Software_testing
https://en.wikipedia.org/wiki/Software_testing
https://en.wikipedia.org/wiki/Software_testability
https://en.wikipedia.org/wiki/Finite-state_machine
https://en.wikipedia.org/wiki/Matthew_Hennessy
https://en.wikipedia.org/w/index.php?title=Software_testing&action=edit&section=48
https://en.wikipedia.org/wiki/Artifact_(software_development)
https://en.wikipedia.org/wiki/Test_plan
https://en.wikipedia.org/wiki/Test_strategy
https://en.wikipedia.org/wiki/Traceability_matrix
https://en.wikipedia.org/wiki/Test_case
https://en.wikipedia.org/wiki/Software_testing
https://en.wikipedia.org/wiki/Test_script
https://en.wikipedia.org/wiki/Test_suite
https://en.wikipedia.org/wiki/Test_fixture
https://en.wikipedia.org/wiki/Test_harness
https://en.wikipedia.org/w/index.php?title=Software_testing&action=edit&section=49
https://en.wikipedia.org/wiki/Software_testing
https://en.wikipedia.org/wiki/Software_testing
https://en.wikipedia.org/wiki/ISTQB
https://en.wikipedia.org/wiki/QAI
https://en.wikipedia.org/wiki/Software_testing
https://en.wikipedia.org/wiki/Wikipedia:Citation_needed
https://en.wikipedia.org/wiki/ISEB
https://en.wikipedia.org/wiki/Wikipedia:Citation_needed
https://en.wikipedia.org/wiki/ISTQB
https://en.wikipedia.org/wiki/Software_testing
https://en.wikipedia.org/wiki/Software_testing
https://en.wikipedia.org/wiki/Software_testing
https://en.wikipedia.org/wiki/Software_testing
https://en.wikipedia.org/wiki/Software_testing
https://en.wikipedia.org/wiki/American_Society_for_Quality
https://en.wikipedia.org/wiki/Software_testing
https://en.wikipedia.org/wiki/Software_testing
https://en.wikipedia.org/w/index.php?title=Software_testing&action=edit&section=50
https://en.wikipedia.org/wiki/Software_testing_controversies
https://en.wikipedia.org/wiki/Software_testing
https://en.wikipedia.org/wiki/Software_testing
https://en.wikipedia.org/wiki/Capability_Maturity_Model
https://en.wikipedia.org/wiki/Agile_testing
https://en.wikipedia.org/wiki/Software_testing
https://en.wikipedia.org/wiki/Software_testing
https://en.wikipedia.org/wiki/Software_testing
https://en.wikipedia.org/wiki/Waterfall_model
https://en.wikipedia.org/wiki/Wikipedia:Citation_needed
https://en.wikipedia.org/wiki/Software_testing
https://en.wikipedia.org/wiki/Test_automation
https://en.wikipedia.org/wiki/Software_testing
https://en.wikipedia.org/wiki/Test-driven_development
https://en.wikipedia.org/wiki/XUnit
https://en.wikipedia.org/wiki/Software_testing
https://en.wikipedia.org/wiki/ISO/IEC_29119
https://en.wikipedia.org/wiki/Software_testing
https://en.wikipedia.org/wiki/Software_testing
https://en.wikipedia.org/w/index.php?title=Software_testing&action=edit&section=51
https://en.wikipedia.org/w/index.php?title=Software_testing&action=edit&section=52
https://en.wikipedia.org/wiki/Verification_and_validation_(software)
https://en.wikipedia.org/wiki/Software_quality_control
https://en.wikipedia.org/wiki/Verification_and_validation_(software)
https://en.wikipedia.org/wiki/Software_testing
https://en.wikipedia.org/w/index.php?title=Software_testing&action=edit&section=53
https://en.wikipedia.org/wiki/Software_quality_assurance
https://en.wikipedia.org/wiki/Software_testing
https://en.wikipedia.org/wiki/Wikipedia:Citation_needed
https://en.wikipedia.org/wiki/Quality_assurance
https://en.wikipedia.org/w/index.php?title=Software_testing&action=edit&section=54
https://en.wikipedia.org/wiki/Software_testing
https://en.wikipedia.org/wiki/Software_testing
https://en.wikipedia.org/wiki/Cem_Kaner
http://www.kaner.com/pdfs/ETatQAI.pdf
https://en.wikipedia.org/wiki/Software_testing
http://www.ece.cmu.edu/~koopman/des_s99/sw_testing/
https://en.wikipedia.org/wiki/Software_testing
http://se.inf.ethz.ch/people/leitner/publications/cdd_leitner_esec_fse_2007.pdf
https://en.wikipedia.org/wiki/Software_testing
https://en.wikipedia.org/wiki/Software_testing
https://en.wikipedia.org/wiki/Software_testing
https://en.wikipedia.org/wiki/Cem_Kaner
https://en.wikipedia.org/wiki/International_Standard_Book_Number
https://en.wikipedia.org/wiki/Special:BookSources/0-471-35846-0
https://en.wikipedia.org/wiki/Software_testing
http://www.wiley.com/WileyCDA/WileyTitle/productCd-0470042125.html
https://en.wikipedia.org/wiki/International_Standard_Book_Number
https://en.wikipedia.org/wiki/Special:BookSources/0-470-04212-5
https://en.wikipedia.org/wiki/Software_testing
http://www.wiley.com/WileyCDA/WileyTitle/productCd-0470042125.html
https://en.wikipedia.org/wiki/International_Standard_Book_Number
https://en.wikipedia.org/wiki/Special:BookSources/0-470-04212-5
https://en.wikipedia.org/wiki/Software_testing
https://en.wikipedia.org/wiki/Software_testing
http://www.istqb.org/downloads/syllabi/SyllabusFoundation.pdf
https://en.wikipedia.org/wiki/International_Software_Testing_Qualifications_Board
https://en.wikipedia.org/wiki/Software_testing
http://www.bcs.org/upload/pdf/istqbsyll.pdf
https://en.wikipedia.org/wiki/International_Software_Testing_Qualifications_Board
https://en.wikipedia.org/wiki/Software_testing
http://ieeexplore.ieee.org/xpl/freeabs_all.jsp?arnumber=4578383
https://en.wikipedia.org/wiki/Software_testing
https://www.nist.gov/director/planning/upload/report02-3.pdf
https://en.wikipedia.org/wiki/Software_testing
http://www.cioreviewindia.com/magazine/Ardentia-Technologies-Providing-Cutting-Edge-Software-Solutions-and-Comprehensive-Testing-Services---JSAH430576969.html
https://en.wikipedia.org/wiki/Software_testing
https://en.wikipedia.org/wiki/International_Standard_Book_Number
https://en.wikipedia.org/wiki/Special:BookSources/0735619670
https://en.wikipedia.org/wiki/Software_testing
https://leanpub.com/leprechauns
https://en.wikipedia.org/wiki/Software_testing
https://en.wikipedia.org/wiki/Software_testing
https://en.wikipedia.org/wiki/Software_testing
https://en.wikipedia.org/wiki/International_Standard_Book_Number
https://en.wikipedia.org/wiki/Special:BookSources/0-471-04328-1
https://en.wikipedia.org/wiki/Software_testing
https://books.google.com/?id=7RoIAAAAIAAJ
https://en.wikipedia.org/wiki/Software_testing
http://www.bullseye.com/coverage.html
https://en.wikipedia.org/wiki/Software_testing
https://en.wikipedia.org/wiki/Software_testing
http://www.mcs.le.ac.uk/people/gtl1/thesis.ps.gz
https://en.wikipedia.org/wiki/PostScript
https://en.wikipedia.org/wiki/Software_testing
https://en.wikipedia.org/wiki/James_Bach
http://www.satisfice.com/articles/requirements_based_testing.pdf
https://en.wikipedia.org/wiki/Software_testing
https://en.wikipedia.org/wiki/International_Standard_Book_Number
https://en.wikipedia.org/wiki/Special:BookSources/978-0-615-23372-7
https://en.wikipedia.org/wiki/Software_testing
http://www.cs.hut.fi/~jlonnber/VisualTesting.pdf
https://en.wikipedia.org/wiki/Software_testing
http://www.testmagazine.co.uk/2011/04/visual-testing
https://en.wikipedia.org/wiki/Software_testing
https://en.wikipedia.org/wiki/Software_testing
http://www.crosschecknet.com/soa_testing_black_white_gray_box.php
https://en.wikipedia.org/wiki/Software_testing
https://en.wikipedia.org/wiki/Software_testing
http://www.computer.org/portal/web/swebok/html/ch5
https://en.wikipedia.org/wiki/Software_testing
https://en.wikipedia.org/wiki/International_Standard_Book_Number
https://en.wikipedia.org/wiki/Special:BookSources/0-201-80938-9
https://en.wikipedia.org/wiki/Software_testing
https://en.wikipedia.org/wiki/International_Standard_Book_Number
https://en.wikipedia.org/wiki/Special:BookSources/0-442-20672-0
https://en.wikipedia.org/wiki/Software_testing
https://en.wikipedia.org/wiki/Software_testing
https://books.google.com/books?id=wAq0rnyiGMEC&pg=PA313
https://en.wikipedia.org/wiki/International_Standard_Book_Number
https://en.wikipedia.org/wiki/Special:BookSources/0815513631
https://en.wikipedia.org/wiki/Software_testing
https://en.wikipedia.org/wiki/Software_testing
https://books.google.com/books?id=yU-rTcurys8C&pg=PA18
https://en.wikipedia.org/wiki/International_Standard_Book_Number
https://en.wikipedia.org/wiki/Special:BookSources/978-8131716601
https://en.wikipedia.org/wiki/Software_testing
https://en.wikipedia.org/wiki/International_Standard_Book_Number
https://en.wikipedia.org/wiki/Special:BookSources/1-55937-079-3
https://en.wikipedia.org/wiki/Software_testing
https://en.wikipedia.org/wiki/Software_testing
https://books.google.com/books?id=leokXF8pLY0C&pg=PA215
https://en.wikipedia.org/wiki/Software_testing
http://www.astqb.org/get-certified/istqb-syllabi-the-istqb-software-tester-certification-body-of-knowledge/
https://en.wikipedia.org/wiki/Software_testing
https://www.techwell.com/techwell-insights/2015/08/part-pipeline-why-continuous-testing-essential
https://en.wikipedia.org/wiki/Software_testing
http://www.stickyminds.com/interview/relationship-between-risk-and-continuous-testing-interview-wayne-ariola
https://en.wikipedia.org/wiki/Software_testing
https://en.wikipedia.org/wiki/Software_testing
http://uploads.pnsqc.org/2015/papers/t-007_Ariola_paper.pdf
https://en.wikipedia.org/wiki/Software_testing
http://devops.com/2015/06/11/devops-and-qa-whats-the-real-cost-of-quality/
https://en.wikipedia.org/wiki/Software_testing
https://www.techwell.com/techwell-insights/2014/10/shift-left-and-put-quality-first
https://en.wikipedia.org/wiki/Software_testing
https://en.wikipedia.org/wiki/Software_testing
http://msdn.microsoft.com/en-us/goglobal/bb688148
https://en.wikipedia.org/wiki/Software_testing
http://www.etestinghub.com/testing_lifecycles.php
https://en.wikipedia.org/wiki/Software_testing
https://en.wikipedia.org/wiki/International_Standard_Book_Number
https://en.wikipedia.org/wiki/Special:BookSources/0-471-04328-1
https://en.wikipedia.org/wiki/Software_testing
https://en.wikipedia.org/wiki/International_Standard_Book_Number
https://en.wikipedia.org/wiki/Special:BookSources/0-201-79429-2
https://en.wikipedia.org/wiki/Software_testing
http://agilesoftwaredevelopment.com/xp/practices/continuous-integration
https://en.wikipedia.org/wiki/Software_testing
https://web.archive.org/web/20090131233716/http:/www.jacoozi.com/blog/?p=18
https://en.wikipedia.org/wiki/Software_testing
http://www.ece.cmu.edu/~koopman/des_s99/sw_testing/
https://en.wikipedia.org/wiki/Software_testing
https://en.wikipedia.org/wiki/International_Standard_Serial_Number
https://www.worldcat.org/issn/0098-5589
https://en.wikipedia.org/wiki/Digital_object_identifier
https://doi.org/10.1109/TSE.2014.2331690
https://en.wikipedia.org/wiki/Software_testing
https://en.wikipedia.org/wiki/International_Standard_Book_Number
https://en.wikipedia.org/wiki/Special:BookSources/978-3-642-04080-1
https://en.wikipedia.org/wiki/Digital_object_identifier
https://doi.org/10.1007/978-3-642-04081-8_38
https://en.wikipedia.org/wiki/Software_testing
https://en.wikipedia.org/wiki/IEEE_829
https://en.wikipedia.org/wiki/International_Standard_Book_Number
https://en.wikipedia.org/wiki/Special:BookSources/0-7381-1443-X
https://en.wikipedia.org/wiki/Software_testing
http://www.testingeducation.org/general/nsf_grant.pdf
https://en.wikipedia.org/wiki/Software_testing
http://www.testingeducation.org/a/mest.pdf
https://en.wikipedia.org/wiki/Software_testing
https://en.wikipedia.org/wiki/International_Standard_Book_Number
https://en.wikipedia.org/wiki/Special:BookSources/1-933952-36-9
https://en.wikipedia.org/wiki/Software_testing
https://en.wikipedia.org/wiki/Software_testing
http://www.istqb.org/
https://en.wikipedia.org/wiki/Software_testing
https://en.wikipedia.org/wiki/Software_testing
http://www.astqb.org/
https://en.wikipedia.org/wiki/Software_testing
https://www.isqi.org/de/certview.html?CertificateID=1
https://en.wikipedia.org/wiki/Software_testing
https://en.wikipedia.org/wiki/Software_testing
http://www.asq.org/
https://en.wikipedia.org/wiki/Software_testing
http://www.context-driven-testing.com
https://en.wikipedia.org/wiki/Software_testing
http://www.technicat.com/writing/process.html
https://en.wikipedia.org/wiki/Software_testing
http://stpcollaborative.com/knowledge/272-were-all-part-of-the-story
https://en.wikipedia.org/wiki/Software_testing
http://ieeexplore.ieee.org/Xplore/login.jsp?url=/iel5/10705/33795/01609838.pdf?temp=x
https://en.wikipedia.org/wiki/Software_testing
https://web.archive.org/web/20051029135922/http:/www.stsc.hill.af.mil/crosstalk/2004/04/0404willison.html
http://www.stsc.hill.af.mil/crosstalk/2004/04/0404willison.htm
https://en.wikipedia.org/wiki/Software_testing
http://ieeexplore.ieee.org/iel5/10351/32923/01541817.pdf?arnumber=1541817
https://en.wikipedia.org/wiki/Software_testing
https://en.wikipedia.org/wiki/International_Standard_Book_Number
https://en.wikipedia.org/wiki/Special:BookSources/0-201-33140-3
https://en.wikipedia.org/wiki/Software_testing
http://channel9.msdn.com/forums/Coffeehouse/402611-Are-you-a-Test-Driven-Developer/
https://web.archive.org/web/20100215082531/http:/channel9.msdn.com/forums/Coffeehouse/402611-Are-you-a-Test-Driven-Developer/
https://en.wikipedia.org/wiki/Wayback_Machine
https://en.wikipedia.org/wiki/Software_testing
http://commonsensetesting.org/stop29119
https://en.wikipedia.org/wiki/Software_testing
http://www.infoworld.com/t/application-development/software-testers-balk-iso-29119-standards-proposal-249031
https://en.wikipedia.org/wiki/Software_testing
http://www.ece.cmu.edu/~koopman/des_s99/verification/index.html
https://en.wikipedia.org/w/index.php?title=Software_testing&action=edit&section=55
http://se.ethz.ch/~meyer/publications/testing/principles.pdf
https://en.wikipedia.org/w/index.php?title=Software_testing&action=edit&section=56
https://en.wikipedia.org/wiki/Book:Software_testing
https://en.wikipedia.org/wiki/Software_testing_tactics
https://en.wikipedia.org/wiki/Dynamic_program_analysis
https://en.wikipedia.org/wiki/Formal_verification
https://en.wikipedia.org/wiki/Independent_test_organization
https://en.wikipedia.org/wiki/Manual_testing
https://en.wikipedia.org/wiki/Orthogonal_array_testing
https://en.wikipedia.org/wiki/Pair_testing
https://en.wikipedia.org/wiki/Reverse_semantic_traceability
https://en.wikipedia.org/wiki/Test_management_tools
https://en.wikipedia.org/wiki/Web_testing
https://en.wikipedia.org/wiki/Data_validation
https://en.wikipedia.org/w/index.php?title=Software_testing&action=edit&section=57
https://commons.wikimedia.org/wiki/Category:Software_testing
https://en.wikipedia.org/wiki/Wikiversity
https://en.wikiversity.org/wiki/Topic:Software_testing
https://dmoztools.net/Computers/Programming/Software_Testing/Products_and_Tools
https://en.wikipedia.org/wiki/DMOZ
http://www.economist.com/science/tq/displaystory.cfm?story_id=10789417
https://en.wikipedia.org/wiki/Template:Computer_science
https://en.wikipedia.org/wiki/Template_talk:Computer_science
https://en.wikipedia.org/w/index.php?title=Template:Computer_science&action=edit
https://en.wikipedia.org/wiki/Computer_science
https://en.wikipedia.org/wiki/ACM_Computing_Classification_System
https://en.wikipedia.org/wiki/Computer_hardware
https://en.wikipedia.org/wiki/Printed_circuit_board
https://en.wikipedia.org/wiki/Peripheral
https://en.wikipedia.org/wiki/Integrated_circuit
https://en.wikipedia.org/wiki/Very-large-scale_integration
https://en.wikipedia.org/wiki/Green_computing
https://en.wikipedia.org/wiki/Electronic_design_automation
https://en.wikipedia.org/wiki/Computer_architecture
https://en.wikipedia.org/wiki/Embedded_system
https://en.wikipedia.org/wiki/Real-time_computing
https://en.wikipedia.org/wiki/Dependability
https://en.wikipedia.org/wiki/Computer_network
https://en.wikipedia.org/wiki/Network_architecture
https://en.wikipedia.org/wiki/Network_protocol
https://en.wikipedia.org/wiki/Networking_hardware
https://en.wikipedia.org/wiki/Network_scheduler
https://en.wikipedia.org/wiki/Network_performance
https://en.wikipedia.org/wiki/Network_service
https://en.wikipedia.org/wiki/Interpreter_(computing)
https://en.wikipedia.org/wiki/Middleware
https://en.wikipedia.org/wiki/Virtual_machine
https://en.wikipedia.org/wiki/Operating_system
https://en.wikipedia.org/wiki/Software_quality
https://en.wikipedia.org/wiki/Programming_language_theory
https://en.wikipedia.org/wiki/Programming_tool
https://en.wikipedia.org/wiki/Programming_paradigm
https://en.wikipedia.org/wiki/Programming_language
https://en.wikipedia.org/wiki/Compiler_construction
https://en.wikipedia.org/wiki/Domain-specific_language
https://en.wikipedia.org/wiki/Modeling_language
https://en.wikipedia.org/wiki/Software_framework
https://en.wikipedia.org/wiki/Integrated_development_environment
https://en.wikipedia.org/wiki/Software_configuration_management
https://en.wikipedia.org/wiki/Library_(computing)
https://en.wikipedia.org/wiki/Software_repository
https://en.wikipedia.org/wiki/Software_development
https://en.wikipedia.org/wiki/Software_development_process
https://en.wikipedia.org/wiki/Requirements_analysis
https://en.wikipedia.org/wiki/Software_design
https://en.wikipedia.org/wiki/Software_construction
https://en.wikipedia.org/wiki/Software_deployment
https://en.wikipedia.org/wiki/Software_maintenance
https://en.wikipedia.org/wiki/Programming_team
https://en.wikipedia.org/wiki/Open-source_software
https://en.wikipedia.org/wiki/Theory_of_computation
https://en.wikipedia.org/wiki/Model_of_computation
https://en.wikipedia.org/wiki/Formal_language
https://en.wikipedia.org/wiki/Automata_theory
https://en.wikipedia.org/wiki/Computational_complexity_theory
https://en.wikipedia.org/wiki/Logic_in_computer_science
https://en.wikipedia.org/wiki/Semantics_(computer_science)
https://en.wikipedia.org/wiki/Algorithm
https://en.wikipedia.org/wiki/Algorithm_design
https://en.wikipedia.org/wiki/Analysis_of_algorithms
https://en.wikipedia.org/wiki/Randomized_algorithm
https://en.wikipedia.org/wiki/Computational_geometry
https://en.wikipedia.org/wiki/Discrete_mathematics
https://en.wikipedia.org/wiki/Probability
https://en.wikipedia.org/wiki/Statistics
https://en.wikipedia.org/wiki/Mathematical_software
https://en.wikipedia.org/wiki/Information_theory
https://en.wikipedia.org/wiki/Mathematical_analysis
https://en.wikipedia.org/wiki/Numerical_analysis
https://en.wikipedia.org/wiki/Information_system
https://en.wikipedia.org/wiki/Database_management_system
https://en.wikipedia.org/wiki/Computer_data_storage
https://en.wikipedia.org/wiki/Enterprise_information_system
https://en.wikipedia.org/wiki/Social_software
https://en.wikipedia.org/wiki/Geographic_information_system
https://en.wikipedia.org/wiki/Decision_support_system
https://en.wikipedia.org/wiki/Process_control
https://en.wikipedia.org/wiki/Multimedia_database
https://en.wikipedia.org/wiki/Data_mining
https://en.wikipedia.org/wiki/Digital_library
https://en.wikipedia.org/wiki/Computing_platform
https://en.wikipedia.org/wiki/Digital_marketing
https://en.wikipedia.org/wiki/World_Wide_Web
https://en.wikipedia.org/wiki/Information_retrieval
https://en.wikipedia.org/wiki/Computer_security
https://en.wikipedia.org/wiki/Cryptography
https://en.wikipedia.org/wiki/Formal_methods
https://en.wikipedia.org/wiki/Security_service_(telecommunication)
https://en.wikipedia.org/wiki/Intrusion_detection_system
https://en.wikipedia.org/wiki/Computer_security_compromised_by_hardware_failure
https://en.wikipedia.org/wiki/Network_security
https://en.wikipedia.org/wiki/Information_security
https://en.wikipedia.org/wiki/Application_security
https://en.wikipedia.org/wiki/Human–computer_interaction
https://en.wikipedia.org/wiki/Interaction_design
https://en.wikipedia.org/wiki/Social_computing
https://en.wikipedia.org/wiki/Ubiquitous_computing
https://en.wikipedia.org/wiki/Visualization_(computer_graphics)
https://en.wikipedia.org/wiki/Computer_accessibility
https://en.wikipedia.org/wiki/Concurrency_(computer_science)
https://en.wikipedia.org/wiki/Concurrent_computing
https://en.wikipedia.org/wiki/Parallel_computing
https://en.wikipedia.org/wiki/Distributed_computing
https://en.wikipedia.org/wiki/Multithreading_(computer_architecture)
https://en.wikipedia.org/wiki/Multiprocessing
https://en.wikipedia.org/wiki/Artificial_intelligence
https://en.wikipedia.org/wiki/Natural_language_processing
https://en.wikipedia.org/wiki/Knowledge_representation_and_reasoning
https://en.wikipedia.org/wiki/Computer_vision
https://en.wikipedia.org/wiki/Automated_planning_and_scheduling
https://en.wikipedia.org/wiki/Mathematical_optimization
https://en.wikipedia.org/wiki/Control_theory
https://en.wikipedia.org/wiki/Philosophy_of_artificial_intelligence
https://en.wikipedia.org/wiki/Distributed_artificial_intelligence
https://en.wikipedia.org/wiki/Machine_learning
https://en.wikipedia.org/wiki/Supervised_learning
https://en.wikipedia.org/wiki/Unsupervised_learning
https://en.wikipedia.org/wiki/Reinforcement_learning
https://en.wikipedia.org/wiki/Multi-task_learning
https://en.wikipedia.org/wiki/Cross-validation_(statistics)
https://en.wikipedia.org/wiki/Computer_graphics
https://en.wikipedia.org/wiki/Computer_animation
https://en.wikipedia.org/wiki/Rendering_(computer_graphics)
https://en.wikipedia.org/wiki/Photo_manipulation
https://en.wikipedia.org/wiki/Graphics_processing_unit
https://en.wikipedia.org/wiki/Mixed_reality
https://en.wikipedia.org/wiki/Virtual_reality
https://en.wikipedia.org/wiki/Image_compression
https://en.wikipedia.org/wiki/Solid_modeling
https://en.wikipedia.org/wiki/E-commerce
https://en.wikipedia.org/wiki/Enterprise_software
https://en.wikipedia.org/wiki/Computational_mathematics
https://en.wikipedia.org/wiki/Computational_physics
https://en.wikipedia.org/wiki/Computational_chemistry
https://en.wikipedia.org/wiki/Computational_biology
https://en.wikipedia.org/wiki/Computational_social_science
https://en.wikipedia.org/wiki/Computational_engineering
https://en.wikipedia.org/wiki/Health_informatics
https://en.wikipedia.org/wiki/Digital_art
https://en.wikipedia.org/wiki/Electronic_publishing
https://en.wikipedia.org/wiki/Cyberwarfare
https://en.wikipedia.org/wiki/Electronic_voting
https://en.wikipedia.org/wiki/Video_game
https://en.wikipedia.org/wiki/Word_processor
https://en.wikipedia.org/wiki/Operations_research
https://en.wikipedia.org/wiki/Educational_technology
https://en.wikipedia.org/wiki/Document_management_system
https://en.wikipedia.org/wiki/Book:Computer_science
https://en.wikipedia.org/wiki/Category:Computer_science
https://en.wikipedia.org/wiki/Portal:Computer_science
https://en.wikipedia.org/wiki/Wikipedia:WikiProject_Computer_science
https://commons.wikimedia.org/wiki/Category:Computer_science
https://en.wikipedia.org/wiki/Template:Software_engineering
https://en.wikipedia.org/wiki/Template_talk:Software_engineering
https://en.wikipedia.org/w/index.php?title=Template:Software_engineering&action=edit
https://en.wikipedia.org/wiki/Software_engineering
https://en.wikipedia.org/wiki/Computer_programming
https://en.wikipedia.org/wiki/Requirements_engineering
https://en.wikipedia.org/wiki/Software_deployment
https://en.wikipedia.org/wiki/Software_design
https://en.wikipedia.org/wiki/Software_maintenance
https://en.wikipedia.org/wiki/Systems_analysis
https://en.wikipedia.org/wiki/Formal_methods
https://en.wikipedia.org/wiki/Data_modeling
https://en.wikipedia.org/wiki/Enterprise_architecture
https://en.wikipedia.org/wiki/Functional_specification
https://en.wikipedia.org/wiki/Modeling_language
https://en.wikipedia.org/wiki/Orthogonality_(programming)
https://en.wikipedia.org/wiki/Programming_paradigm
https://en.wikipedia.org/wiki/Software
https://en.wikipedia.org/wiki/Software_archaeology
https://en.wikipedia.org/wiki/Software_architecture
https://en.wikipedia.org/wiki/Software_configuration_management
https://en.wikipedia.org/wiki/Software_development_process
https://en.wikipedia.org/wiki/Software_development_process
https://en.wikipedia.org/wiki/Software_quality
https://en.wikipedia.org/wiki/Software_quality_assurance
https://en.wikipedia.org/wiki/Software_verification_and_validation
https://en.wikipedia.org/wiki/Structured_analysis
https://en.wikipedia.org/wiki/Agile_software_development
https://en.wikipedia.org/wiki/Aspect-oriented_software_development
https://en.wikipedia.org/wiki/Object-oriented_programming
https://en.wikipedia.org/wiki/Ontology_(information_science)
https://en.wikipedia.org/wiki/Service-oriented_architecture
https://en.wikipedia.org/wiki/Systems_development_life_cycle
https://en.wikipedia.org/wiki/Agile_software_development
https://en.wikipedia.org/wiki/Enterprise_Unified_Process
https://en.wikipedia.org/wiki/Executable_UML
https://en.wikipedia.org/wiki/Incremental_build_model
https://en.wikipedia.org/wiki/Iterative_and_incremental_development
https://en.wikipedia.org/wiki/Software_prototyping
https://en.wikipedia.org/wiki/Rapid_application_development
https://en.wikipedia.org/wiki/Unified_Process
https://en.wikipedia.org/wiki/Scrum_(software_development)
https://en.wikipedia.org/wiki/Spiral_model
https://en.wikipedia.org/wiki/V-Model_(software_development)
https://en.wikipedia.org/wiki/Waterfall_model
https://en.wikipedia.org/wiki/Extreme_programming
https://en.wikipedia.org/wiki/ISO/IEC_15504
https://en.wikipedia.org/wiki/Capability_Maturity_Model_Integration
https://en.wikipedia.org/wiki/Data_model
https://en.wikipedia.org/wiki/Entity–relationship_model
https://en.wikipedia.org/wiki/Function_model
https://en.wikipedia.org/wiki/Information_model
https://en.wikipedia.org/wiki/Metamodeling
https://en.wikipedia.org/wiki/Object_model
https://en.wikipedia.org/wiki/Systems_modeling
https://en.wikipedia.org/wiki/View_model
https://en.wikipedia.org/wiki/IDEF
https://en.wikipedia.org/wiki/Unified_Modeling_Language
https://en.wikipedia.org/wiki/Universal_Systems_Language
https://en.wikipedia.org/wiki/Systems_Modeling_Language
https://en.wikipedia.org/wiki/Victor_Basili
https://en.wikipedia.org/wiki/Kent_Beck
https://en.wikipedia.org/wiki/Grady_Booch
https://en.wikipedia.org/wiki/Fred_Brooks
https://en.wikipedia.org/wiki/Barry_Boehm
https://en.wikipedia.org/wiki/Peter_Chen
https://en.wikipedia.org/wiki/Danese_Cooper
https://en.wikipedia.org/wiki/Ward_Cunningham
https://en.wikipedia.org/wiki/Tom_DeMarco
https://en.wikipedia.org/wiki/Edsger_W._Dijkstra
https://en.wikipedia.org/wiki/Delores_M._Etter
https://en.wikipedia.org/wiki/Martin_Fowler
https://en.wikipedia.org/wiki/Adele_Goldstine
https://en.wikipedia.org/wiki/Margaret_Hamilton_(scientist)
https://en.wikipedia.org/wiki/Tony_Hoare
https://en.wikipedia.org/wiki/Lois_Haibt
https://en.wikipedia.org/wiki/Mary_Jean_Harrold
https://en.wikipedia.org/wiki/Grace_Hopper
https://en.wikipedia.org/wiki/Watts_Humphrey
https://en.wikipedia.org/wiki/Michael_A._Jackson
https://en.wikipedia.org/wiki/Ivar_Jacobson
https://en.wikipedia.org/wiki/Alan_Kay
https://en.wikipedia.org/wiki/Nancy_Leveson
https://en.wikipedia.org/wiki/Stephen_J._Mellor
https://en.wikipedia.org/wiki/Bertrand_Meyer
https://en.wikipedia.org/wiki/David_Parnas
https://en.wikipedia.org/wiki/Trygve_Reenskaug
https://en.wikipedia.org/wiki/Winston_W._Royce
https://en.wikipedia.org/wiki/James_Rumbaugh
https://en.wikipedia.org/wiki/Mary_Shaw_(computer_scientist)
https://en.wikipedia.org/wiki/Peri_Tarr
https://en.wikipedia.org/wiki/Elaine_Weyuker
https://en.wikipedia.org/wiki/Niklaus_Wirth
https://en.wikipedia.org/wiki/Edward_Yourdon
https://en.wikipedia.org/wiki/Computer_science
https://en.wikipedia.org/wiki/Computer_engineering
https://en.wikipedia.org/wiki/Project_management
https://en.wikipedia.org/wiki/Risk_management
https://en.wikipedia.org/wiki/Systems_engineering
https://en.wikipedia.org/wiki/Category:Software_engineering
https://commons.wikimedia.org/wiki/Software_engineering
https://en.wikipedia.org/wiki/File:Green_bug_and_broom.svg
https://en.wikipedia.org/wiki/Portal:Software_testing
https://en.wikipedia.org/wiki/Help:Authority_control
https://en.wikipedia.org/wiki/National_Diet_Library
https://id.ndl.go.jp/auth/ndlna/01179782
https://en.wikipedia.org/w/index.php?title=Software_testing&oldid=807366470
https://en.wikipedia.org/wiki/Help:Category
https://en.wikipedia.org/wiki/Category:Software_testing
https://en.wikipedia.org/wiki/Category:Computer_occupations
https://en.wikipedia.org/wiki/Category:Webarchive_template_wayback_links
https://en.wikipedia.org/wiki/Category:All_accuracy_disputes
https://en.wikipedia.org/wiki/Category:Articles_with_disputed_statements_from_September_2014
https://en.wikipedia.org/wiki/Category:Articles_lacking_reliable_references_from_March_2015
https://en.wikipedia.org/wiki/Category:All_articles_lacking_reliable_references
https://en.wikipedia.org/wiki/Category:All_articles_with_unsourced_statements
https://en.wikipedia.org/wiki/Category:Articles_with_unsourced_statements_from_November_2011
https://en.wikipedia.org/wiki/Category:Wikipedia_articles_needing_clarification_from_November_2011
https://en.wikipedia.org/wiki/Category:All_articles_with_failed_verification
https://en.wikipedia.org/wiki/Category:Articles_with_failed_verification_from_September_2011
https://en.wikipedia.org/wiki/Category:Articles_with_unsourced_statements_from_March_2013
https://en.wikipedia.org/wiki/Category:Articles_with_unsourced_statements_from_May_2016
https://en.wikipedia.org/wiki/Category:Articles_with_unsourced_statements_from_January_2008
https://en.wikipedia.org/wiki/Category:Articles_with_unsourced_statements_from_March_2008
https://en.wikipedia.org/wiki/Category:Articles_with_unsourced_statements_from_July_2012
https://en.wikipedia.org/wiki/Category:Articles_with_unsourced_statements_from_July_2014
https://en.wikipedia.org/wiki/Category:Articles_with_unsourced_statements_from_February_2011
https://en.wikipedia.org/wiki/Category:Articles_with_DMOZ_links
https://en.wikipedia.org/wiki/Special:MyTalk
https://en.wikipedia.org/wiki/Special:MyContributions
https://en.wikipedia.org/w/index.php?title=Special:CreateAccount&returnto=Software+testing
https://en.wikipedia.org/w/index.php?title=Special:UserLogin&returnto=Software+testing
https://en.wikipedia.org/wiki/Software_testing
https://en.wikipedia.org/wiki/Talk:Software_testing
https://en.wikipedia.org/wiki/Software_testing
https://en.wikipedia.org/w/index.php?title=Software_testing&action=edit
https://en.wikipedia.org/w/index.php?title=Software_testing&action=history
https://en.wikipedia.org/wiki/Main_Page
https://en.wikipedia.org/wiki/Main_Page
https://en.wikipedia.org/wiki/Portal:Contents
https://en.wikipedia.org/wiki/Portal:Featured_content
https://en.wikipedia.org/wiki/Portal:Current_events
https://en.wikipedia.org/wiki/Special:Random
https://donate.wikimedia.org/wiki/Special:FundraiserRedirector?utm_source=donate&utm_medium=sidebar&utm_campaign=C13_en.wikipedia.org&uselang=en
https://shop.wikimedia.org
https://en.wikipedia.org/wiki/Help:Contents
https://en.wikipedia.org/wiki/Wikipedia:About
https://en.wikipedia.org/wiki/Wikipedia:Community_portal
https://en.wikipedia.org/wiki/Special:RecentChanges
https://en.wikipedia.org/wiki/Wikipedia:Contact_us
https://en.wikipedia.org/wiki/Special:WhatLinksHere/Software_testing
https://en.wikipedia.org/wiki/Special:RecentChangesLinked/Software_testing
https://en.wikipedia.org/wiki/Wikipedia:File_Upload_Wizard
https://en.wikipedia.org/wiki/Special:SpecialPages
https://en.wikipedia.org/w/index.php?title=Software_testing&oldid=807366470
https://en.wikipedia.org/w/index.php?title=Software_testing&action=info
https://www.wikidata.org/wiki/Special:EntityPage/Q188522
https://en.wikipedia.org/w/index.php?title=Special:CiteThisPage&page=Software_testing&id=807366470
https://en.wikipedia.org/w/index.php?title=Special:Book&bookcmd=book_creator&referer=Software+testing
https://en.wikipedia.org/w/index.php?title=Special:ElectronPdf&page=Software+testing&action=show-download-screen
https://en.wikipedia.org/w/index.php?title=Software_testing&printable=yes
https://commons.wikimedia.org/wiki/Category:Software_testing
https://en.wikibooks.org/wiki/Introduction_to_Software_Engineering/Testing
https://ar.wikipedia.org/wiki/فحص_البرمجيات
https://be-x-old.wikipedia.org/wiki/Тэставаньне_праграмнага_забесьпячэньня
https://bg.wikipedia.org/wiki/Тестване_на_софтуер
https://ca.wikipedia.org/wiki/Proves_de_programari
https://cs.wikipedia.org/wiki/Testování_softwaru
https://de.wikipedia.org/wiki/Softwaretest
https://et.wikipedia.org/wiki/Tarkvara_testimine
https://es.wikipedia.org/wiki/Pruebas_de_software
https://fa.wikipedia.org/wiki/آزمون_نرم‌افزار
https://fr.wikipedia.org/wiki/Test_(informatique)
https://ko.wikipedia.org/wiki/소프트웨어_테스트
https://hi.wikipedia.org/wiki/सॉफ्टवेयर_परीक्षण
https://id.wikipedia.org/wiki/Pengujian_perangkat_lunak
https://it.wikipedia.org/wiki/Collaudo_del_software
https://he.wikipedia.org/wiki/בדיקות_תוכנה
https://kn.wikipedia.org/wiki/ತಂತ್ರಾಂಶ_ಪರೀಕ್ಷೆ
https://ka.wikipedia.org/wiki/პროგრამული_უზრუნველყოფის_ტესტირება
https://kk.wikipedia.org/wiki/Бағдарламалық_тестілеу
https://hu.wikipedia.org/wiki/Szoftvertesztelés
https://mk.wikipedia.org/wiki/Тестирање_на_софтвер
https://ms.wikipedia.org/wiki/Pengujian_perisian
https://nl.wikipedia.org/wiki/Testen_(software)
https://ja.wikipedia.org/wiki/ソフトウェアテスト
https://no.wikipedia.org/wiki/Programvaretesting
https://pl.wikipedia.org/wiki/Testowanie_oprogramowania
https://pt.wikipedia.org/wiki/Teste_de_software
https://ro.wikipedia.org/wiki/Testare_software
https://ru.wikipedia.org/wiki/Тестирование_программного_обеспечения
https://sq.wikipedia.org/wiki/Testimi_i_softuerit
https://simple.wikipedia.org/wiki/Software_testing
https://sk.wikipedia.org/wiki/Testovanie_softvéru
https://fi.wikipedia.org/wiki/Ohjelmiston_testaaminen
https://sv.wikipedia.org/wiki/Programvarutestning
https://ta.wikipedia.org/wiki/மென்பொருட்_சோதனை
https://th.wikipedia.org/wiki/การทดสอบซอฟต์แวร์
https://tr.wikipedia.org/wiki/Yazılım_testi
https://uk.wikipedia.org/wiki/Тестування_програмного_забезпечення
https://vi.wikipedia.org/wiki/Kiểm_thử_phần_mềm
https://zh.wikipedia.org/wiki/软件测试
https://www.wikidata.org/wiki/Special:EntityPage/Q188522
https://en.wikipedia.org/wiki/Wikipedia:Text_of_Creative_Commons_Attribution-ShareAlike_3.0_Unported_License
https://creativecommons.org/licenses/by-sa/3.0/
https://wikimediafoundation.org/wiki/Terms_of_Use
https://wikimediafoundation.org/wiki/Privacy_policy
https://www.wikimediafoundation.org/
https://wikimediafoundation.org/wiki/Privacy_policy
https://en.wikipedia.org/wiki/Wikipedia:About
https://en.wikipedia.org/wiki/Wikipedia:General_disclaimer
https://en.wikipedia.org/wiki/Wikipedia:Contact_us
https://www.mediawiki.org/wiki/Special:MyLanguage/How_to_contribute
https://wikimediafoundation.org/wiki/Cookie_statement
https://en.m.wikipedia.org/w/index.php?title=Software_testing&mobileaction=toggle_view_mobile
https://wikimediafoundation.org/
https://www.mediawiki.org/
